using ProberErrorCode;
using ProberInterfaces;
using ProberInterfaces.Param;
using SubstrateObjects;
using System;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using CylType;
using NeedleCleanerModuleParameter;
using LogModule;
using SystemExceptions.MotionException;
using SystemExceptions.InOutException;
using SystemExceptions.VisionException;
using System.ServiceModel;
using SequenceRunner;
using ProberInterfaces.SequenceRunner;
using ProberInterfaces.CardChange;
using System.Diagnostics;
using SystemExceptions.ProberSystemException;
using ProbingModule;
using VirtualStageConnector;
using System.Threading;
using TouchSensorSystemParameter;
using ProberInterfaces.WaferTransfer;

namespace OpusVStageMove
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Multiple)]
    public class OPUSVStageMove : IStageMove
    {
        public bool Initialized { get; set; } = false;

        private ProberInterfaces.StageState _StageMove;
        public ProberInterfaces.StageState StageMove
        {
            get { return _StageMove; }
            set { _StageMove = value; }
        }

        private bool IsInfo = true;

        public bool WaferCamCylinderExtended = false;

        // Component Verification 기능을 통한 Wafer Align 수행시 WaferCamBrige를 접지 않는 옵션 Flag
        public bool NoRetractWaferCamBridgeWhenMarkAlignFlag = false;


        public OPUSVStageMove()
        {

        }

        public EnumAxisConstants PinViewAxis { get => EnumAxisConstants.PZ; }

        public EventCodeEnum SetContainer(Autofac.IContainer container)
        {
            EventCodeEnum RetVal = EventCodeEnum.UNDEFINED;

            try
            {
                if (container != null)
                {
                    RetVal = EventCodeEnum.NONE;
                }
                else
                {
                    RetVal = EventCodeEnum.NONE;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }
            return RetVal;
        }
        public bool CheckUsingBernoulliHandler()
        {
            bool retval = false;

            try
            {
                var BernoulliTopHandlerAttached = this.CoordinateManager().StageCoord.BernoulliTopHandlerAttached.Value;
                var device = this.StageSupervisor().WaferObject.GetPhysInfo().WaferSubstrateType.Value;

                if ((BernoulliTopHandlerAttached == true) && (device == WaferSubstrateTypeEnum.Thin))
                {
                    retval = true;
                }
                else
                {
                    retval = false;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return retval;
        }

        public bool IsServiceAvailable()
        {
            return true;
        }
        public void InitService()
        {
            LoggerManager.Debug("InitService - OPUSVStageMove");
        }

        public void DeInitModule()
        {

        }

        public void StageSupervisorStateTransition(ProberInterfaces.StageState state)
        {
            try
            {
                this.StageSupervisor().StageSupervisorStateTransition(state);
                StageMove = state;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }
        }

        #region Move 
        public EventCodeEnum MOVETONEXTDIE()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MOVETONEXTDIE() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MOVETONEXTDIE();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ProbingZUP(double overdrive)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ProbingZUP() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ProbingZUP(overdrive);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ProbingZUP(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ProbingZUP() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ProbingZUP(wafercoord, pincoord, overdrive);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ProbingZUP(NCCoordinate nccoord, PinCoordinate pincoord, double overdrive)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ProbingZUP() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ProbingZUP(nccoord, pincoord, overdrive);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ProbingZDOWN(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ProbingZDOWN() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ProbingZDOWN(wafercoord, pincoord, overdrive, zclearance);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ProbingZDOWN(NCCoordinate nccoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ProbingZDOWN() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ProbingZDOWN(nccoord, pincoord, overdrive, zclearance);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ProbingZDOWN(double overdrive, double zclearance)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ProbingZDOWN() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ProbingZDOWN(overdrive, zclearance);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveToSoaking() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveToSoaking(waferoffset, pinoffset, zclearance);
            }
            catch (Exception err)
            {
                retval = EventCodeEnum.MOTION_MOVING_ERROR;
                LoggerManager.Exception(err);
            }

            return retval;
        }

        public EventCodeEnum ZCLEARED()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ZCLEARED() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ZCLEARED();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum CheckWaferStatus(bool isExist)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CheckWaferStatus() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.CheckWaferStatus(isExist);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum CCZCLEARED()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CCZCLEARED() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.CCZCLEARED();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum MoveToCardHolderPositionAndCheck()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveToCardHolderPositionAndCheck() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveToCardHolderPositionAndCheck();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum MoveToBackPosition()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveToBackPosition() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveToBackPosition();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum MoveToFrontPosition()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveToFrontPosition() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveToFrontPosition();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum MoveToCenterPosition()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveToCenterPosition() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveToCenterPosition();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum MoveToNcPadChangePosition()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveToNcPadChangePosition() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveToNcPadChangePosition();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferHighViewMove(xpos, ypos, zpos, tpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferLowViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferLowViewMove(xpos, ypos, zpos, tpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], PinHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.PinHighViewMove(xpos, ypos, zpos, tpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], PinLowViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.PinLowViewMove(xpos, ypos, zpos, tpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferHighViewMove(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferLowViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferLowViewMove(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], PinHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.PinHighViewMove(xpos, ypos, zpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], TouchSensorLowViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.TouchSensorLowViewMove(xpos, ypos, zpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], TouchSensorHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.TouchSensorHighViewMove(xpos, ypos, zpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0.0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferHighViewIndexMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferHighViewIndexMove(mach_x, mach_y, zpos, NotUseHeightProfile);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0.0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferLowViewIndexMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferLowViewIndexMove(mach_x, mach_y, zpos, NotUseHeightProfile);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], PinLowViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.PinLowViewMove(xpos, ypos, zpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum PogoViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], PogoViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.PogoViewMove(xpos, ypos, zpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferHighViewMove(xpos, ypos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferLowViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferLowViewMove(xpos, ypos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum CardViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CardViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.CardViewMove(xpos, ypos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum PinHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], PinHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.PinHighViewMove(xpos, ypos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum PinLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], PinLowViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.PinLowViewMove(xpos, ypos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaferHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferHighViewMove(axis, pos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaferLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferLowViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferLowViewMove(axis, pos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;

        }
        public EventCodeEnum CardViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CardViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.CardViewMove(axis, pos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }
            return retval;
        }

        public EventCodeEnum PinHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], PinHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.PinHighViewMove(axis, pos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum PinLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], PinLowViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.PinLowViewMove(axis, pos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveLoadingPosition() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveLoadingPosition(offsetvalue);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum MoveTCW_Position()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveTCW_Position() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveTCW_Position();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = EventCodeEnum.EXCEPTION;
            }

            return retval;
        }

        public EventCodeEnum MoveLoadingOffsetPosition(double offsetvalue)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveLoadingOffsetPosition() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveLoadingPosition(offsetvalue);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum MoveLoadingOffsetPosition(double x, double y, double z, double t)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveLoadingOffsetPosition() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveLoadingOffsetPosition(x, y, z, t);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MovePadToPin() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MovePadToPin(waferoffset, pinoffset, zclearance);

                if (retval != EventCodeEnum.NONE)
                {
                    ZCLEARED();
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
                ZCLEARED();
            }

            return retval;
        }

        public EventCodeEnum Handlerhold(long timeout = 0)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            LoggerManager.Debug($"[{this.GetType().Name}], Handlerhold() called in a [{StageMove.GetState()}] state.");

            // 디바이스 파라미터 확인 후 BERNOULLI 핸들러 or ThreeLeg
            try
            {
                bool UsingBernoulliTopHandler = CheckUsingBernoulliHandler();

                if (UsingBernoulliTopHandler == true)
                {
                    if (Extensions_IParam.ProberRunMode == RunMode.EMUL)
                    {
                        return EventCodeEnum.NONE;
                    }

                    LoggerManager.Debug($"[{this.GetType().Name}], BernoulliHandlerhold() called in a [{StageMove.GetState()}] state.");

                    retval = StageMove.BernoulliHandlerhold();
                }
                else
                {
                    LoggerManager.Debug($"[{this.GetType().Name}], ThreeLegUp() called in a [{StageMove.GetState()}] state.");

                    retval = StageMove.ThreeLegUp(timeout);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum Handlerrelease(long timeout = 0)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            LoggerManager.Debug($"[{this.GetType().Name}], Handlerrelease() called in a [{StageMove.GetState()}] state.");

            try
            {
                bool UsingBernoulliTopHandler = CheckUsingBernoulliHandler();

                if (UsingBernoulliTopHandler == true)
                {
                    if (Extensions_IParam.ProberRunMode == RunMode.EMUL)
                    {
                        return EventCodeEnum.NONE;
                    }

                    LoggerManager.Debug($"[{this.GetType().Name}], BernoulliHandlerrelease() called in a [{StageMove.GetState()}] state.");

                    retval = StageMove.BernoulliHandlerrelease();
                }
                else
                {
                    LoggerManager.Debug($"[{this.GetType().Name}], ThreeLegDown() called in a [{StageMove.GetState()}] state.");

                    retval = StageMove.ThreeLegDown(timeout);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum CCRotLock(long timeout = 6000)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CCRotLock() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.CCRotLock(timeout);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum CCRotUnLock(long timeout)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CCRotUnLock() called in a [{StageMove.GetState()}] state.");

                if (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.RETRACT)
                {
                    retval = StageMove.CCRotUnLock(timeout);
                }
                else
                {
                    retval = EventCodeEnum.STAGEMOVE_SET_WAFER_CAM_BASE_POS_ERROR;

                    LoggerManager.Debug($"[{this.GetType().Name}], CCRotUnLock() called in a [{StageMove.GetState()}] state. MoveWaferCam = {StageCylinderType.MoveWaferCam.State}");

                    throw new MotionException("CCRotUnLock(): WaferCam state is retracted", retval);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }
            return retval;
        }

        public EventCodeEnum NCPadUp()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], NCPadUp() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.NCPadUp();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }
            return retval;

        }

        public EventCodeEnum NCPadDown()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], NCPadDown() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.NCPadDown();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }
            return retval;
        }

        public EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferHighCamCoordMoveNCpad() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferHighCamCoordMoveNCpad(nccoord, offsetZ);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaferLowCamCoordMoveNCpad() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.WaferLowCamCoordMoveNCpad(nccoord, offsetZ);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum SetWaferCamBasePos(bool value)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], SetWaferCamBasePos() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.SetWaferCamBasePos(value);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ProbingCoordMoveNCPad() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ProbingCoordMoveNCPad(nccoord, pincoord, offsetZ);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], TouchSensorSensingMoveStage() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.TouchSensorSensingMoveStage(wcoord, pincoord, zclearance);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = EventCodeEnum.EXCEPTION;
            }

            return retval;
        }

        public EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], TouchSensorSensingMoveNCPad() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.TouchSensorSensingMoveNCPad(nccoord, pincoord, offsetZ);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CC_AxisMoveToPos() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.CC_AxisMoveToPos(axis, pos, velScale, accScale);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;

        }

        public EventCodeEnum LockCCState()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], LockCCState() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.LockCCState();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum UnLockCCState()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], UnLockCCState() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.UnLockCCState();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public StageStateEnum GetState()
        {
            StageStateEnum retval = StageStateEnum.UNKNOWN;

            try
            {
                retval = StageMove.GetState();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = StageStateEnum.UNKNOWN;
            }

            return retval;
        }
        /// <summary>
        /// Thread에서 계속 불리는 함수이니 Log 추가 금지
        /// </summary>
        /// <param name="val"></param>
        /// <returns></returns>
        public EventCodeEnum ReadVacuum(out bool val)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            bool tmp = false;

            try
            {
                retval = StageMove.ReadVacuum(out tmp);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }
            finally
            {
                val = tmp;
            }

            return retval;
        }

        public EventCodeEnum VacuumOnOff(bool val, bool extraVacReady, bool extraVacOn = true, long timeout = 0)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], VacuumOnOff() called in a [{StageMove.GetState()}] state. val = {val}, timeout = {timeout}");

                retval = StageMove.VacuumOnOff(val, extraVacReady, extraVacOn, timeout);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum WaitForVacuum(bool val, long timeout = 0)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], WaitForVacuum() called in a [{StageMove.GetState()}] state. val = {val}, timeout = {timeout}");

                retval = StageMove.WaitForVacuum(val, timeout);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum MonitorForVacuum(bool val, long sustain = 0, long timeout = 0)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MonitorForVacuum() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MonitorForVacuum(val, sustain, timeout);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ChuckMainVacOff()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = StageMove.ChuckMainVacOff();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ExceptionHandler(err);
            }

            return ret;
        }

        public EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveStageRepeatRelMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveStageRepeatRelMove(xpos, ypos, xvel, xacc, yvel, yacc);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], StageRelMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.StageRelMove(xpos, ypos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], StageRelMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.StageRelMove(axis, pos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum StageVMove(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], StageVMove() called in a [{StageMove.GetState()}] state. axis = {axis.Label}, vel : {vel}");

                retval = StageMove.StageVMove(axis, vel, trjtype);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum StageMoveStop(ProbeAxisObject axis)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], StageMoveStop() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.StageMoveStop(axis);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum NCPadMove(NCCoordinate nccoord, PinCoordinate pincoord)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], NCPadMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.NCPadMove(nccoord, pincoord);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum TiltMove(ProbeAxisObject axis, double pos)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], TiltMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.TiltMove(axis, pos);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum TiltingMove(double tz1offset, double tz2offset, double tz3offset)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], TiltingMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.TiltingMove(tz1offset, tz2offset, tz3offset);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], AirBlowMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.AirBlowMove(xpos, ypos, zpos);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum AirBlowAirOnOff(bool val)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], AirBlowAirOnOff() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.AirBlowAirOnOff(val);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum AirBlowMove(EnumAxisConstants axis, double pos, double speed, double acc)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], AirBlowMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.AirBlowMove(axis, pos, speed, acc);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ChuckTiltMove(double RPos, double TTPos)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ChuckTiltMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ChuckTiltMove(RPos, TTPos);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum ManualAbsMove(double posX, double posY, double posZ, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ManualAbsMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ManualAbsMove(posX, posY, posZ, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum ManualRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ManualRelMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ManualRelMove(axis, pos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ManualZDownMove()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ManualZDownMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ManualZDownMove();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum MoveToMark()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], MoveToMark() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.MoveToMark();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }
            return retval;
        }

        public EventCodeEnum StageSystemInit()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], StageSystemInit() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.StageSystemInit();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum CardChageMoveToIN()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CardChageMoveToIN() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.CardChageMoveToIN();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum CardChageMoveToIDLE()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CardChageMoveToIDLE() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.CardChageMoveToIDLE();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum CardChageMoveToOUT()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], CardChageMoveToOUT() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.CardChageMoveToOUT();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], VMViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.VMViewMove(xpos, ypos, zpos, tpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], VMViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.VMViewMove(xpos, ypos, zpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum VMRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], VMRelMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.VMRelMove(axis, pos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum VMAbsMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], VMAbsMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.VMAbsMove(axis, pos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], VMWaferHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.VMWaferHighViewMove(xpos, ypos, zpos, tpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], VMWaferHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.VMWaferHighViewMove(xpos, ypos, zpos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], VMWaferHighViewMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.VMWaferHighViewMove(xpos, ypos, trjtype, ovrd);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ProbingCoordMoveNCPad() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ProbingCoordMoveNCPad(nccoord, pincoord, offsetZ, zspeed, zacc);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum LoaderDoorOpen()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], LoaderDoorOpen() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.LoaderDoorOpen();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum CardDoorOpen()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;
            bool isCardDoor = false;

            try
            {
                isCardDoor = this.CardChangeModule().GetCardDoorAttached();

                if (isCardDoor)
                {
                    LoggerManager.Debug($"[{this.GetType().Name}], CardDoorOpen() called in a [{StageMove.GetState()}] state.");

                    retval = StageMove.CardDoorOpen();
                }
                else
                {
                    LoggerManager.Debug($"[{this.GetType().Name}], CardDoorOpen() - LoaderDoorOpen() called in a [{StageMove.GetState()}] state.");

                    retval = StageMove.LoaderDoorOpen();
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum LoaderDoorClose()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], LoaderDoorClose() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.LoaderDoorClose();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum CardDoorClose()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;
            bool isCardDoor = false;

            try
            {
                isCardDoor = this.CardChangeModule().GetCardDoorAttached();

                if (isCardDoor)
                {
                    LoggerManager.Debug($"[{this.GetType().Name}], CardDoorClose() called in a [{StageMove.GetState()}] state.");

                    retval = StageMove.CardDoorClose();
                }
                else
                {
                    LoggerManager.Debug($"[{this.GetType().Name}], CardDoorClose() - LoaderDoorClose() called in a [{StageMove.GetState()}] state.");

                    retval = StageMove.LoaderDoorClose();
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum LoaderDoorCloseRecovery()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], LoaderDoorCloseRecovery() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.LoaderDoorCloseRecovery();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum IsLoaderDoorOpen(ref bool isloaderdooropen, bool writelog = true)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                if (writelog)
                {
                    LoggerManager.Debug($"[{this.GetType().Name}], IsLoaderDoorOpen() called in a [{StageMove.GetState()}] state.");
                }

                retval = StageMove.IsLoaderDoorOpen(ref isloaderdooropen);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum IsLoaderDoorClose(ref bool isloaderdoorclose, bool writelog = true)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                if (writelog)
                {
                    LoggerManager.Debug($"[{this.GetType().Name}], IsLoaderDoorClose() called in a [{StageMove.GetState()}] state.");
                }

                retval = StageMove.IsLoaderDoorClose(ref isloaderdoorclose);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum IsCardDoorOpen(ref bool iscarddooropen, bool writelog = true)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                if (writelog)
                {
                    LoggerManager.Debug($"[{this.GetType().Name}], IsCardDoorOpen() called in a [{StageMove.GetState()}] state.");
                }

                retval = StageMove.IsCardDoorOpen(ref iscarddooropen);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum FrontDoorLock()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], FrontDoorLock() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.FrontDoorLock();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum FrontDoorUnLock()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], FrontDoorUnLock() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.FrontDoorUnLock();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum IsFrontDoorLock(ref bool isfrontdoorlock)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], IsFrontDoorLock() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.IsFrontDoorLock(ref isfrontdoorlock);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum IsFrontDoorUnLock(ref bool isfrontdoorunlock)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], IsFrontDoorUnLock() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.IsFrontDoorUnLock(ref isfrontdoorunlock);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum IsFrontDoorOpen(ref bool isfrontdooropen)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], IsFrontDoorOpen() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.IsFrontDoorOpen(ref isfrontdooropen);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum IsFrontDoorClose(ref bool isfrontdoorclose)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], IsFrontDoorClose() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.IsFrontDoorClose(ref isfrontdoorclose);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public bool IsHandlerholdWafer()
        {
            bool retval = false;

            try
            {
                bool UsingBernoulliTopHandler = CheckUsingBernoulliHandler();

                if (UsingBernoulliTopHandler == true)
                {
                    //thread에서 항상 호출하는 function으로 주석 처리함
                    //LoggerManager.Debug($"[{this.GetType().Name}], IsHandlerholdWafer() called in a [{StageMove.GetState()}] state.");

                    retval = StageMove.IsHandlerholdWafer();
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return retval;
        }

        public Task<EventCodeEnum> StageHomeOffsetMove()
        {
            Task<EventCodeEnum> retval = Task.FromResult<EventCodeEnum>(EventCodeEnum.UNDEFINED);

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], StageHomeOffsetMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.StageHomeOffsetMove();
            }
            catch (Exception err)
            {
                LoggerManager.Prolog(PrologType.INFORMATION, retval);
                LoggerManager.Exception(err);

                retval = Task.FromResult<EventCodeEnum>(retval.Result);
            }

            return retval;
        }
        public Task<EventCodeEnum> LoaderHomeOffsetMove()
        {
            Task<EventCodeEnum> retval = Task.FromResult<EventCodeEnum>(EventCodeEnum.UNDEFINED);

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], LoaderHomeOffsetMove() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.LoaderHomeOffsetMove();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = Task.FromResult<EventCodeEnum>(EventCodeEnum.EXCEPTION);
            }

            return retval;
        }
        public EventCodeEnum StageLock()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], StageLock() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.StageLock();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum StageUnlock()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], StageUnlock() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.StageUnlock();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ThreeLegUp(long timeout = 0)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ThreeLegUp() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ThreeLegUp();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public EventCodeEnum ThreeLegDown(long timeout = 0)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], ThreeLegDown() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.ThreeLegDown();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }


        // Component Verification 기능을 통한 Wafer Align 수행시 WaferCamBrige를 접지 않는 옵션에 대한 Flag를 설정하는 함수
        public EventCodeEnum SetNoRetractWaferCamBridgeWhenMarkAlignFlag(bool isFlagOn)
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                LoggerManager.Debug($"[{this.GetType().Name}], SetNoRetractWaferCamBridgeWhenMarkAlignFlag() called in a [{StageMove.GetState()}] state.");

                retval = StageMove.SetNoRetractWaferCamBridgeWhenMarkAlignFlag(isFlagOn);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        public ModuleStateEnum GetModuleState()
        {
            ModuleStateEnum retval = ModuleStateEnum.UNDEFINED;

            try
            {
                retval = StageMove.GetModuleState();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ModuleStateEnum.UNDEFINED;
            }

            return retval;
        }
        public EventCodeEnum InitModule()
        {
            EventCodeEnum retval = EventCodeEnum.UNDEFINED;

            try
            {
                if (Initialized == false)
                {
                    StageMove = new StageIDLEState(this);

                    this.CoordinateManager().SetPinAxisAs(this.PinViewAxis);
                    Initialized = true;

                    retval = EventCodeEnum.NONE;
                }
                else
                {
                    LoggerManager.Error($"DUPLICATE_INVOCATION IN {this.GetType().Name}");

                    retval = EventCodeEnum.DUPLICATE_INVOCATION;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return retval;
        }
        public bool IsCardExist()
        {
            bool retval = false;

            try
            {
                //==> Upmodule이 올라가 있는가?
                bool DICARDCHANGE_UP_L;
                this.IOManager().IOServ.ReadBit(this.IOManager().IO.Inputs.DIUPMODULE_LEFT_SENSOR, out DICARDCHANGE_UP_L);

                bool DICARDCHANGE_UP_R;
                this.IOManager().IOServ.ReadBit(this.IOManager().IO.Inputs.DIUPMODULE_RIGHT_SENSOR, out DICARDCHANGE_UP_R);


                if (DICARDCHANGE_UP_L || DICARDCHANGE_UP_R)
                {
                    retval = true;
                }
            }
            catch (Exception err)
            {
                retval = false;

                LoggerManager.Exception(err);
            }

            return retval;
        }
        public EventCodeEnum CheckHardwareInterference(double targetX, double targetY, double targetZ, double targetPZ)
        {
            double posMargin = 100.0;
            double posOffset = 5000;

            // 아래 모든 조건은 이전 위치와 다음 위치를 고려하여 Z축을 먼저 움직일 것인지 혹은 나중에 움직일 것인지에 대해서는 이미 Move 함수에서 고려한다고 가정함.
            EventCodeEnum retval = EventCodeEnum.NONE;

            try
            {

                if (IsCardExist())
                {
                    //==> Card가 존재할 때 움직이면 안됨.
                    retval = EventCodeEnum.MOTION_CARD_POD_MODULE_IS_ABOVE_THE_CHUCK;

                    LoggerManager.Debug("Card pod module is above the chuck");

                    return retval;
                }

                if ((Extensions_IParam.ProberRunMode == RunMode.EMUL && WaferCamCylinderExtended == false) || (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.RETRACT))
                {
                    // TODO : 
                    if (targetY < this.CoordinateManager().StageCoord.ProbingSWLimitNegative.Y.Value)
                    {
                        if (this.StageSupervisor().StageModuleState.GetState() != StageStateEnum.PINHIGHVIEW &
                            this.StageSupervisor().StageModuleState.GetState() != StageStateEnum.PINLOWVIEW)
                        {

                            if (this.StageSupervisor().StageModuleState.GetState() != StageStateEnum.Z_CLEARED)
                            {
                                if (targetPZ > (this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value + posMargin))
                                {
                                    retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                                    LoggerManager.Error($"Frontside Hardware interference error! (Target PZ: {targetPZ}, SafePos: {this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value}), Limit Y = {this.CoordinateManager().StageCoord.ProbingSWLimitNegative.Y.Value}, Target Y = {targetY}");
                                }
                            }

                            if (targetZ > (this.CoordinateManager().StageCoord.SafePosZAxis + posMargin))
                            {
                                retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                                LoggerManager.Error($"Frontside Hardware interference error! (Target Z: {targetZ}, SafePos: {this.CoordinateManager().StageCoord.SafePosZAxis})");
                            }
                        }
                        else
                        {
                            double pzUpperLimit = this.CoordinateManager().StageCoord.RefMarkPos.Z.Value
                                                - this.CoordinateManager().StageCoord.WHOffset.Z.Value
                                                + this.CoordinateManager().StageCoord.MarkPosInChuckCoord.Z.Value
                                                + this.CoordinateManager().StageCoord.PinReg.PinRegMax.Value;
                            if (targetPZ > pzUpperLimit + posMargin)
                            {
                                retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                                LoggerManager.Error($"Frontside Hardware interference error! (Target PZ: {targetPZ}, SafePos: {this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value})");
                            }

                            if (targetZ > (this.CoordinateManager().StageCoord.SafePosZAxis + posMargin))
                            {
                                retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                                LoggerManager.Error($"Frontside Hardware interference error! (Target Z: {targetZ}, SafePos: {this.CoordinateManager().StageCoord.SafePosZAxis})");
                            }
                        }
                        // 목표 위치의 Y가 앞쪽으로 범위 밖일 때 : 목표 위치의 Z와 PZ가 안전한 높이가 아니면 에러

                    }

                    if (targetY < this.CoordinateManager().StageCoord.CleanPadSWLimitNegative.Y.Value)
                    {
                        // 목표 위치의 Y가 카드 캐리어와 간섭이 발생하는 범위일 때 : 목표 위치의 PZ가 홈 위치 높이가 아니면 에러
                        if ((targetPZ > (this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value) + posMargin))
                        {
                            retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                            LoggerManager.Error($"Frontside Hardware interference error! (Target PZ: {targetPZ}, SafePos: {this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value}), Limit Y = {this.CoordinateManager().StageCoord.CleanPadSWLimitNegative.Y.Value}, Target Y = {targetY}");
                        }
                    }

                    if (targetY > this.CoordinateManager().StageCoord.ProbingSWLimitPositive.Y.Value)
                    {
                        // 목표 위치의 Y가 뒤쪽으로 범위 밖일 때 : 목표 위치의 Z가 안전한 높이가 아니면 에러
                        if (targetZ > (this.CoordinateManager().StageCoord.SafePosZAxis + posMargin))
                        {
                            retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                            LoggerManager.Error($"Backside Hardware interference error! (Target Z: {targetZ}, SafePos: {this.CoordinateManager().StageCoord.SafePosZAxis}), Limit Y = {this.CoordinateManager().StageCoord.ProbingSWLimitPositive.Y.Value}, Target Y = {targetY}");
                        }
                    }

                    double radiusDist = Math.Sqrt(Math.Pow(targetX, 2) + Math.Pow(targetY, 2));

                    if (radiusDist > this.CoordinateManager().StageCoord.ProbingSWRadiusLimit.Value)
                    {
                        if (targetZ > this.CoordinateManager().StageCoord.ProbingSWRadiusZLimit.Value)
                        {
                            retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                            LoggerManager.Error($"Probing Z Radius limited! (Target Z: {targetZ}, Target Pos: X = {targetX}, Y = {targetY} Available Radius: {this.CoordinateManager().StageCoord.ProbingSWRadiusLimit.Value}, SafePos Height: {this.CoordinateManager().StageCoord.ProbingSWRadiusZLimit.Value})");
                        }
                    }
                }
                else
                {
                    // 웨이퍼 카메라 베이스가 앞으로 나와 있으면 어떤 위치에서든지 Z가 안전한 높이여야 함                                     
                    if (GetState() == StageStateEnum.NC_SENSING || GetState() == StageStateEnum.NC_SENSORVIEW || GetState() == StageStateEnum.NC_PADVIEW)
                    {
                        double safeDisk = 0.0;
                        // 센싱 중에는 실제 컨텍이 발생하므로 안전 위치가 아닐 수 있다. 하지만 그것도 정도껏!  
                        if (this.CoordinateManager().StageCoord.SafePosPZAxis < this.CoordinateManager().StageCoord.MarkEncPos.Z.Value + this.CoordinateManager().StageCoord.MarkPosInChuckCoord.Z.Value + 5000)
                        {
                            // 5000은 센서 돌출량 감안한 거리
                            safeDisk = (this.CoordinateManager().StageCoord.MarkEncPos.Z.Value + this.CoordinateManager().StageCoord.MarkPosInChuckCoord.Z.Value + 5000) - this.CoordinateManager().StageCoord.SafePosPZAxis;
                        }
                        else
                        {
                            safeDisk = this.CoordinateManager().StageCoord.SafePosPZAxis - (this.CoordinateManager().StageCoord.MarkEncPos.Z.Value + this.CoordinateManager().StageCoord.MarkPosInChuckCoord.Z.Value + 5000);
                        }

                        posOffset = safeDisk;
                    }
                    else
                    {
                        posOffset = 0;  // 터치센서로 센싱하는 상황을 빼고는 간섭이 발생하지 않는 안전 위치에 있어야 한다.
                    }

                    LoggerManager.Debug($"Stage Move State : {GetState()}, posOffset : {posOffset:0.00}, posMargin : {posMargin:0.00}, SafePosPZAixs : {this.CoordinateManager().StageCoord.SafePosPZAxis:0.00}");

                    if (targetY < this.CoordinateManager().StageCoord.CleanPadSWLimitNegative.Y.Value)
                    {
                        // 목표 위치의 Y가 카드 캐리어와 간섭이 발생하는 범위일 때 : 목표 위치의 PZ가 홈 위치 높이가 아니면 에러
                        if ((targetPZ > (this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value) + posMargin))
                        {
                            retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                            LoggerManager.Error($"Frontside Hardware interference error! (Target PZ: {targetPZ}, SafePos: {this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value}), Limit Y = {this.CoordinateManager().StageCoord.CleanPadSWLimitNegative.Y.Value}, Target Y = {targetY}");
                        }
                    }

                    if (targetPZ > (this.CoordinateManager().StageCoord.SafePosPZAxis + posMargin + posOffset))
                    {
                        retval = EventCodeEnum.MOTION_DANGEROUS_POS;
                        retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                        LoggerManager.Error($"Wafer Camera Base Hardware interference error! (Target PZ: {targetPZ}, SafePos: {this.CoordinateManager().StageCoord.SafePosPZAxis + posMargin + posOffset})");
                    }
                    if (targetZ > (this.CoordinateManager().StageCoord.SafePosZAxis + posMargin + posOffset))
                    {
                        retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                        LoggerManager.Error($"Wafer Camera Base Hardware interference error! (Target Z: {targetZ}, SafePos: {this.CoordinateManager().StageCoord.SafePosZAxis})");
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }
        public EventCodeEnum CheckHardwareInterference_GPCC(double targetX, double targetY, double targetZ, double targetPZ)
        {
            EventCodeEnum retval = EventCodeEnum.NONE;

            double posMargin = 100.0;
            double posOffset = 5000;

            double upmoduleMargin = 0;

            // 아래 모든 조건은 이전 위치와 다음 위치를 고려하여 Z축을 먼저 움직일 것인지 혹은 나중에 움직일 것인지에 대해서는 이미 Move 함수에서 고려한다고 가정함.
            try
            {
                if ((Extensions_IParam.ProberRunMode == RunMode.EMUL && WaferCamCylinderExtended == false)
                    || (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.RETRACT))
                {
                    if (targetY < (this.CoordinateManager().StageCoord.ProbingSWLimitNegative.Y.Value - this.CoordinateManager().StageCoord.MarkPosInChuckCoord.Y.Value))
                    //if (targetY < this.CoordinateManager().StageCoord.ProbingSWLimitNegative.Y.Value)
                    {
                        //// 목표 위치의 Y가 앞쪽으로 범위 밖일 때 : 목표 위치의 Z와 PZ가 안전한 높이가 아니면 에러
                        if (targetPZ > (this.CoordinateManager().StageCoord.PinReg.PinRegMax.Value -
                            this.CoordinateManager().StageCoord.MarkPosInChuckCoord.Z.Value + posMargin))
                        {
                            retval = EventCodeEnum.MOTION_DANGEROUS_POS;
                            var yLimit = (this.CoordinateManager().StageCoord.PinReg.PinRegMax.Value -
                            this.CoordinateManager().StageCoord.MarkPosInChuckCoord.Z.Value + posMargin);

                            LoggerManager.Error($"Frontside Hardware interference error! (Target PZ: {targetPZ}, SafePos: {this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value}), Limit Y = {yLimit}, Target Y = {targetY}");
                        }

                        //if (targetZ > (this.CoordinateManager().StageCoord.SafePosZAxis + posMargin - upmoduleMargin))
                        if (targetZ > (this.CoordinateManager().StageCoord.PinReg.PinRegMin.Value + posMargin - upmoduleMargin))
                        {
                            retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                            LoggerManager.Error($"Frontside Hardware interference error! (Target Z: {targetZ}, SafePos: {(this.CoordinateManager().StageCoord.SafePosZAxis + posMargin - upmoduleMargin)})");
                        }
                    }

                    if (targetY < this.CoordinateManager().StageCoord.CleanPadSWLimitNegative.Y.Value)
                    {
                        // TODO : 
                        // 목표 위치의 Y가 카드 캐리어와 간섭이 발생하는 범위일 때 : 목표 위치의 PZ가 홈 위치 높이가 아니면 에러
                        //if (targetPZ > (this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value + posMargin - upmoduleMargin))
                        //{
                        //    retVal = EventCodeEnum.MOTION_DANGEROUS_POS;
                        //    LoggerManager.Debug($"Frontside Hardware interference error! (Target PZ: {targetPZ}, SafePos: {(this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value + posMargin - upmoduleMargin)})");
                        //}
                    }

                    if (targetY > this.CoordinateManager().StageCoord.ProbingSWLimitPositive.Y.Value)
                    {
                        // 목표 위치의 Y가 뒤쪽으로 범위 밖일 때 : 목표 위치의 Z가 안전한 높이가 아니면 에러
                        if (targetZ > (this.CoordinateManager().StageCoord.SafePosZAxis + posMargin - upmoduleMargin))
                        {
                            retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                            LoggerManager.Error($"Backside Hardware interference error! (Target Z: {targetZ}, SafePos: {(this.CoordinateManager().StageCoord.SafePosZAxis + posMargin - upmoduleMargin)}), Limit Y = {this.CoordinateManager().StageCoord.ProbingSWLimitPositive.Y.Value}, Target Y = {targetY}");
                        }
                    }
                }
                else
                {
                    // 웨이퍼 카메라 베이스가 앞으로 나와 있으면 어떤 위치에서든지 Z가 안전한 높이여야 함
                    if (GetState() != StageStateEnum.NC_SENSING)
                    {
                        posOffset = 0;  // 터치센서로 센싱하는 상황을 빼고는 간섭이 발생하지 않는 안전 위치에 있어야 한다.
                    }
                    else
                    {
                        posOffset = 5000;   // 센싱 중에는 실제 컨텍이 발생하므로 안전 위치가 아닐 수 있다. 하지만 그것도 정도껏!  
                    }

                    if (targetY < this.CoordinateManager().StageCoord.CleanPadSWLimitNegative.Y.Value)
                    {
                        // 목표 위치의 Y가 카드 캐리어와 간섭이 발생하는 범위일 때 : 목표 위치의 PZ가 홈 위치 높이가 아니면 에러
                        if (targetPZ > (this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value + posMargin - upmoduleMargin))
                        {
                            retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                            LoggerManager.Error($"Frontside Hardware interference error! (Target PZ: {targetPZ}, SafePos: {(this.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value + posMargin - upmoduleMargin)}), Limit Y = {this.CoordinateManager().StageCoord.CleanPadSWLimitNegative.Y.Value}, Target Y = {targetY}");
                        }
                    }

                    if (targetPZ > (this.CoordinateManager().StageCoord.SafePosPZAxis + posMargin + posOffset - upmoduleMargin))
                    {
                        retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                        LoggerManager.Error($"Wafer Camera Base Hardware interference error! (Target PZ: {targetPZ}, SafePos: {this.CoordinateManager().StageCoord.SafePosPZAxis + posMargin + posOffset - upmoduleMargin})");
                    }

                    if (targetZ > (this.CoordinateManager().StageCoord.SafePosZAxis + posMargin + posOffset - upmoduleMargin))
                    {
                        retval = EventCodeEnum.MOTION_DANGEROUS_POS;

                        LoggerManager.Error($"Wafer Camera Base Hardware interference error! (Target Z: {targetZ}, SafePos: {(this.CoordinateManager().StageCoord.SafePosZAxis + posMargin + posOffset - upmoduleMargin)})");
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                retval = ExceptionHandler(err);
            }

            return retval;
        }

        #endregion

        private EventCodeEnum ExceptionHandler(Exception err)
        {
            EventCodeEnum returnCode = EventCodeEnum.UNDEFINED;

            try
            {
                if (err is MotionException)
                {
                    var motEx = (MotionException)err;
                    returnCode = motEx.ErrorCode;
                }
                else if (err is InOutException)
                {
                    var ioEx = (InOutException)err;
                    returnCode = ioEx.ErrorCode;
                }
                else if (err is VisionException)
                {
                    var visionEx = (VisionException)err;
                    returnCode = visionEx.ErrorCode;
                }
                else
                {
                    LoggerManager.Error($"ExceptionHandler(): Unspecified Exception. Ex = {err}, Message = {err.Message}");
                }
            }
            catch (Exception ex)
            {
                LoggerManager.Exception(ex);
                returnCode = EventCodeEnum.EXCEPTION;
            }

            LoggerManager.Debug($"ExceptionHandler(): Return Code = {returnCode}, Inner Exception = {err.GetType()}, Message = {err.Message}", isInfo: IsInfo);

            return returnCode;
        }
    }

    public abstract class StageState : ProberInterfaces.StageState
    {
        private OPUSVStageMove _Module;

        public OPUSVStageMove Module
        {
            get { return _Module; }
            private set { _Module = value; }
        }

        private bool IsInfo = true;

        public StageState(OPUSVStageMove module)
        {
            Module = module;
        }

        #region baseMove
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferHighViewMove(xpos,ypos,zpos,tpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error("StageStateBase: Error occurred while Move to WaferLowViewMove(xpos,ypos,zpos,tpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to PinHighViewMove(xpos,ypos,zpos,tpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to PinLowViewMove(xpos,ypos,zpos,tpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferHighViewMove(xpos,ypos,zpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferLowViewMove(xpos,ypos,zpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to PinHighViewMove(xpos,ypos,zpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to TouchSensorLowViewMove(xpos,ypos,zpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to TouchSensorHighViewMove(xpos,ypos,zpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0.0, bool NotUseHeightProfile = false)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferHighViewIndexMove(mach_x,mach_y,zpos,NotUseHeightProfile).");
            return EventCodeEnum.NODATA;
        }
        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0.0, bool NotUseHeightProfile = false)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferLowViewIndexMove(mach_x,mach_y,zpos,NotUseHeightProfile).");
            return EventCodeEnum.NODATA;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to PinLowViewMove(xpos,ypos,zpos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferHighViewMove(xpos,ypos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferLowViewMove(xpos,ypos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to PinHighViewMove(xpos,ypos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to PinLowViewMove(xpos,ypos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferHighViewMove(axis,pos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferLowViewMove(axis,pos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum PinHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to PinHighViewMove(axis,pos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum PinLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to PinLowViewMove(axis,pos).");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum ZCLEARED()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to ZCLEARED.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

        }
        public override EventCodeEnum CCZCLEARED()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to CCZCLEARED.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

        }
        public override EventCodeEnum MoveToBackPosition()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to Back Position.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

        }
        public override EventCodeEnum MoveToFrontPosition()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to Front Position.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

        }
        public override EventCodeEnum MoveToCenterPosition()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to Center Position.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

        }
        public override EventCodeEnum MoveToNcPadChangePosition()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to NC Pad Change Position.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to MovePadToPin.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum ProbingZDOWN(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to ProbingZDOWN.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum ProbingZDOWN(double overdrive, double zclearance)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to ProbingZDOWN.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum ProbingZDOWN(NCCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to ProbingZDOWN.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum ProbingZUP(double overdrive)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to ProbingZUP.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum ProbingZUP(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, ProbingSpeedRateList SpeedRateList = null)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to ProbingZUP.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum ProbingZUP(NCCoordinate nccoord, PinCoordinate pincoord, double overdrive)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to ProbingZUP.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to MoveToSoaking.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum CardViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to CardViewMove.");

            return EventCodeEnum.NODATA;
        }
        public override EventCodeEnum CardViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to CardViewMove.");

            return EventCodeEnum.NODATA;
        }
        public override EventCodeEnum PogoViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to PogoViewMove.");

            return EventCodeEnum.NODATA;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to MoveLoadingPosition.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum MoveLoadingOffsetPosition(double x, double y, double z, double t)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to MoveLoadingOffsetPosition.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum ThreeLegDown(long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                //threeleg down
                ret = SwitchThreeLegFunc(false, 15000);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ThreeLegUp(long timeout = 0)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to ThreeLegUp.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum BernoulliHandlerrelease()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to BernoulliHandlerrelease.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

        }
        public override EventCodeEnum BernoulliHandlerhold()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to BernoulliHandlerhold.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum CCRotLock(long timeout)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to CCRotLock.");

            throw new NotImplementedException();
        }
        public override EventCodeEnum CCRotUnLock(long timeout)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to CCRotUnLock.");

            throw new NotImplementedException();
        }

        public override EventCodeEnum MOVETONEXTDIE()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to MOVETONEXTDIE.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

        }
        public override EventCodeEnum NCPadDown()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to NCPadDown.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum NCPadUp()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to NCPadUp.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferHighViewMoveNCpad.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to WaferLowCamCoordMoveNCpad.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while SetWaferCamBasePos.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to ProbingCoordMoveNCPad.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to TouchSensorSensingMoveNCPad.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to TouchSensorSensingMoveStage.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum MoveToCardHolderPositionAndCheck()
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to CardChange.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            LoggerManager.Error($"StageStateBase: Error occurred while Move to CardChange.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum LockCCState()
        {
            Module.StageSupervisorStateTransition(new CardChangeState(Module));

            return EventCodeEnum.NONE;
        }
        public override EventCodeEnum UnLockCCState()
        {
            Module.StageSupervisorStateTransition(new StageIDLEState(Module));

            return EventCodeEnum.NONE;
        }

        public override EventCodeEnum ReadVacuum(out bool val)
        {
            EventCodeEnum ret = EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

            val = false;

            try
            {
                ret = ReadVacuumFunc(out val);

                if (ret != EventCodeEnum.NONE)
                {
                    LoggerManager.Error($"StageStateBase.VacuumOnOff: Error occurred while Move to ReadVacuum.");

                    return EventCodeEnum.STAGEMOVE_READ_VACUUM_ERROR;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return ret;
        }
        public override EventCodeEnum VacuumOnOff(bool val, bool extraVacReady, bool extraVacOn = true, long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

            try
            {
                ret = VacuumOnOffFunc(val, extraVacReady, extraVacOn, timeout);

                if (ret != EventCodeEnum.NONE)
                {
                    LoggerManager.Error($"StageStateBase.VacuumOnOff: Error occurred while Move to VacuumOnOff.");

                    return EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return ret;
        }
        public override EventCodeEnum MoveTCW_Position()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveTCW_PositionFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageTCWState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CheckWaferStatus(bool isExist)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                int sustain = 100;
                int timeout = 1500;
                bool val = !isExist; //vacuum은 반대로
                var device = Module.StageSupervisor().WaferObject.GetPhysInfo().WaferSizeEnum;
                int returnValue = -1;

                switch (device)
                {
                    case EnumWaferSize.INVALID:
                        break;
                    case EnumWaferSize.UNDEFINED:
                        break;
                    case EnumWaferSize.INCH6:
                        returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6, val, sustain, timeout);

                        if (returnValue == 0)
                        {
                            ret = EventCodeEnum.NONE;
                        }
                        else
                        {
                            ret = RetryMonitorVaccum(EnumWaferSize.INCH6, val, sustain, timeout);
                        }
                        break;
                    case EnumWaferSize.INCH8:
                        returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6, val, sustain, timeout);

                        if (returnValue == 0)
                        {
                            returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_8, val, sustain, timeout);

                            if (returnValue == 0)
                            {
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                ret = RetryMonitorVaccum(EnumWaferSize.INCH8, val, sustain, timeout);
                            }
                        }
                        else
                        {
                            ret = RetryMonitorVaccum(EnumWaferSize.INCH6, val, sustain, timeout);

                            if (ret == EventCodeEnum.NONE)
                            {
                                returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_8, val, sustain, timeout);
                                if (returnValue == 0)
                                {
                                    ret = EventCodeEnum.NONE;
                                }
                                else
                                {
                                    ret = RetryMonitorVaccum(EnumWaferSize.INCH8, val, sustain, timeout);
                                }
                            }
                        }

                        break;
                    case EnumWaferSize.INCH12:

                        returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6, val, sustain, timeout);

                        if (returnValue == 0)
                        {
                            returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_8, val, sustain, timeout);

                            if (returnValue == 0)
                            {
                                returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_12, val, sustain, timeout);

                                if (returnValue == 0)
                                {
                                    ret = EventCodeEnum.NONE;
                                }
                                else
                                {
                                    ret = RetryMonitorVaccum(EnumWaferSize.INCH12, val, sustain, timeout);
                                }
                            }
                            else
                            {
                                ret = RetryMonitorVaccum(EnumWaferSize.INCH8, val, sustain, timeout);

                                if (ret == EventCodeEnum.NONE)
                                {
                                    returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_12, val, sustain, timeout);

                                    if (returnValue == 0)
                                    {
                                        ret = EventCodeEnum.NONE;
                                    }
                                    else
                                    {
                                        ret = RetryMonitorVaccum(EnumWaferSize.INCH12, val, sustain, timeout);
                                    }
                                }
                            }
                        }
                        else
                        {
                            ret = RetryMonitorVaccum(EnumWaferSize.INCH6, val, sustain, timeout);

                            if (ret == EventCodeEnum.NONE)
                            {
                                returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_8, val, sustain, timeout);

                                if (returnValue == 0)
                                {
                                    returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_12, val, sustain, timeout);

                                    if (returnValue == 0)
                                    {
                                        ret = EventCodeEnum.NONE;
                                    }
                                    else
                                    {
                                        ret = RetryMonitorVaccum(EnumWaferSize.INCH12, val, sustain, timeout);
                                    }
                                }
                                else
                                {
                                    ret = RetryMonitorVaccum(EnumWaferSize.INCH8, val, sustain, timeout);

                                    if (ret == EventCodeEnum.NONE)
                                    {
                                        returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_12, val, sustain, timeout);

                                        if (returnValue == 0)
                                        {
                                            ret = EventCodeEnum.NONE;
                                        }
                                        else
                                        {
                                            ret = RetryMonitorVaccum(EnumWaferSize.INCH12, val, sustain, timeout);
                                        }
                                    }
                                }
                            }
                        }

                        break;
                    default:
                        break;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public EventCodeEnum RetryMonitorVaccum(EnumWaferSize size, bool val, int sustain, int timeout)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                int returnValue = -1;

                switch (size)
                {
                    case EnumWaferSize.INVALID:
                        break;
                    case EnumWaferSize.UNDEFINED:
                        break;
                    case EnumWaferSize.INCH6:

                        returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6, val, sustain, timeout);

                        if (returnValue == 0)
                        {
                            ret = EventCodeEnum.NONE;
                        }
                        else if (returnValue == -2)
                        {
                            ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
                        }
                        break;
                    case EnumWaferSize.INCH8:

                        returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_8, val, sustain, timeout);

                        if (returnValue == 0)
                        {
                            ret = EventCodeEnum.NONE;
                        }
                        else if (returnValue == -2)
                        {
                            ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
                        }
                        break;
                    case EnumWaferSize.INCH12:

                        returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_12, val, sustain, timeout);

                        if (returnValue == 0)
                        {
                            ret = EventCodeEnum.NONE;
                        }
                        else if (returnValue == -2)
                        {
                            ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
                        }
                        break;
                    default:
                        break;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaitForVacuum(bool val, long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

            ret = WaitForVacuumFunc(val, timeout);

            if (ret != EventCodeEnum.NONE)
            {
                LoggerManager.Error($"StageStateBase.WaitForVacuum: Error occurred while Move to WaitForVacuum.");

                return EventCodeEnum.STAGEMOVE_WAITFOR_VAC_ERROR;
            }

            return ret;

        }
        public override EventCodeEnum MonitorForVacuum(bool val, long sustain = 0, long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;

            ret = MonitorForVacuumFunc(val, sustain, timeout);

            if (ret != EventCodeEnum.NONE & ret != EventCodeEnum.IO_TIMEOUT_ERROR)
            {
                LoggerManager.Error($"StageStateBase.MonitorForVacuum: Error occurred while Move to WaitForVacuum.");

                return EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
            }

            return ret;
        }
        public override EventCodeEnum ChuckMainVacOff()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = ChuckMainVacOffFunc();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            LoggerManager.Error($"MoveStageRepeatRelMove: Error occurred while Move to MoveStageRepeatRelMove.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageRelMove: Error occurred while Move to StageRelMove.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"StageRelMove: Error occurred while Move to StageRelMove.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum StageVMove(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            LoggerManager.Error($"StageVMove: Error occurred while Move to StageVMove.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum StageMoveStop(ProbeAxisObject axis)
        {
            LoggerManager.Error($"StageVMove: Error occurred while Move to StageVMove.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum NCPadMove(NCCoordinate nccoord, PinCoordinate pincoord)
        {
            LoggerManager.Error($"NCPadMove: Error occurred while Move to NCPadMove.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum TiltMove(ProbeAxisObject axis, double pos)
        {
            LoggerManager.Error($"TiltMove: Error occurred while Move to TiltMove.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum TiltingMove(double tz1offset, double tz2offset, double tz3offset)
        {
            LoggerManager.Error($"TiltingMove: Error occurred while Move to TiltingMove.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            LoggerManager.Error($"AirBlowMove(xpos,ypos,zpos): Error occurred while Move to AirBlowMove.");

            return EventCodeEnum.MOTION_MOVING_ERROR;
        }
        public override EventCodeEnum AirBlowAirOnOff(bool val)
        {
            LoggerManager.Error($"AirBlowAirOnOff: Error occurred while AirBlowAirOnOff.");

            return EventCodeEnum.IO_DEV_LIB_ERROR;
        }
        public override EventCodeEnum AirBlowMove(EnumAxisConstants axis, double pos, double speed, double acc)
        {
            LoggerManager.Error($"AirBlowMove(axis,pos,speed,acc): Error occurred while Move to AirBlowMove.");

            return EventCodeEnum.MOTION_MOVING_ERROR;
        }

        public override EventCodeEnum ChuckTiltMove(double RPos, double TTPos)
        {
            LoggerManager.Error($"AirBlowMove(axis,pos,speed,acc): Error occurred while Move to AirBlowMove.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum MoveToMark()
        {
            LoggerManager.Error($"MoveToMark(): Error occurred while Move to MoveToMark.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum StageSystemInit()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = StageSystemInitFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageIDLEState(Module));
            }
            catch (Exception err)
            {
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum CardChageMoveToIN()
        {
            LoggerManager.Error($"CardChageMoveToIN(): Error occurred while Move to CardChageMoveToIN.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum CardChageMoveToIDLE()
        {
            LoggerManager.Error($"CardChageMoveToIDLE(): Error occurred while Move to CardChageMoveToIDLE.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum CardChageMoveToOUT()
        {
            LoggerManager.Error($"CardChageMoveToOUT(): Error occurred while Move to CardChageMoveToOUT.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"VMViewMove(): Error occurred while Move to VMViewMoveToIDLE.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"VMViewMove(): Error occurred while Move to VMViewMoveToIDLE.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"VMWaferHighViewMove(): Error occurred while Move to VMWaferHighViewMoveToIDLE.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"VMWaferHighViewMove(): Error occurred while Move to VMWaferHighViewMoveToIDLE.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"VMWaferHighViewMove(): Error occurred while Move to VMWaferHighViewMoveToIDLE.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum VMRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"VMRelMove(): Error occurred while Move to VMRelMoveToIDLE.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum VMAbsMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"VMAbsMove(): Error occurred while Move to VMAbsMoveToIDLE.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            LoggerManager.Error($"ProbingCoordMoveNCPad(): Error occurred while Move to ProbingCoordMoveNCPad.");

            return EventCodeEnum.STAGEMOVE_NOTIMPLEMENT_ERROR;
        }

        public override EventCodeEnum LoaderDoorOpen()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            int retIval = -1;
            IORet retVal = IORet.ERROR;

            try
            {
                if (SystemManager.SysteMode == SystemModeEnum.Single)
                {
                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, false);
                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, true);

                    if (retVal == IORet.NO_ERR)
                    {
                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, true);

                        if (retIval == 0)
                        {
                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, false);

                            if (retIval == 0)
                            {
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                            }
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                    }
                }
                else
                {
                    if (Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                       Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_OPEN.IOOveride.Value == EnumIOOverride.EMUL &&
                       Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                       Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN.IOOveride.Value == EnumIOOverride.EMUL)
                    {
                        ret = EventCodeEnum.NONE;
                        return ret;
                    }

                    if (Module.CardChangeModule().GetCardDoorAttached())
                    {
                        ret = CardDoorClose();
                        if (ret != EventCodeEnum.NONE)
                        {
                            ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;
                            return ret;
                        }
                    }

                    bool isSealOpen = false;
                    bool isSealClose = false;
                    bool isOpen = false;
                    bool isClose = false;

                    Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_SEAL_OPEN, out isSealOpen);
                    Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_SEAL_CLOSE, out isSealClose);
                    Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, out isOpen);
                    Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, out isClose);

                    if (isSealOpen == true && isSealClose == false && isOpen == true && isClose == false)
                    {
                        LoggerManager.Debug($"Shutter Already Open Done.");

                        ret = EventCodeEnum.NONE;
                    }
                    else
                    {
                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_CLOSE, false);
                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_OPEN, true);

                        if (retVal == IORet.NO_ERR)
                        {
                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_SEAL_OPEN, true, 5000);
                            if (retIval == 0)
                            {
                                retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_SEAL_CLOSE, false, 5000);

                                if (retIval == 0)
                                {
                                    LoggerManager.Debug($"Shutter Seal Open Done.");
                                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, false);
                                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, true);

                                    if (retVal == IORet.NO_ERR)
                                    {
                                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, true, 5000);

                                        if (retIval == 0)
                                        {
                                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, false, 5000);
                                            if (retIval == 0)
                                            {
                                                // 정상
                                                LoggerManager.Debug($"Shutter Door Open Done.");
                                                ret = EventCodeEnum.NONE;
                                            }
                                            else
                                            {
                                                LoggerManager.Error($"Shutter Close Error. WaitForIO(DILOADERDOOR_CLOSE,false) RetVal={retIval}");

                                                ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                                            }
                                        }
                                        else
                                        {
                                            LoggerManager.Error($"Shutter Close Error. WaitForIO(DILOADERDOOR_OPEN,true) RetVal={retIval}");

                                            ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;

                                            for (int i = 0; i < 3; i++) //retry
                                            {
                                                LoggerManager.Debug($"LoaderDoorOpen Retry: {i + 1}");

                                                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, true);
                                                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, false);

                                                Thread.Sleep(1000);

                                                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, false);
                                                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, true);

                                                if (retVal == IORet.NO_ERR)
                                                {
                                                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, false, 1500);

                                                    if (retIval == 0)
                                                    {
                                                        ret = EventCodeEnum.NONE;
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    LoggerManager.Error($"Shutter Close Error. WaitForIO(DILOADERDOOR_SEAL_CLOSE,false) RetVal={retIval}");

                                    ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                                }
                            }
                            else
                            {
                                LoggerManager.Error($"Shutter Seal Open Error. WaitForIO(DILOADERDOOR_SEAL_OPEN,true) RetVal={retIval}");

                                ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                            }
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardDoorOpen()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            int retIval = -1;
            IORet retVal = IORet.ERROR;

            try
            {
                if (SystemManager.SysteMode == SystemModeEnum.Single)
                {
                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_CLOSE, false);
                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_OPEN, true);

                    if (retVal == IORet.NO_ERR)
                    {
                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_OPEN, true);

                        if (retIval == 0)
                        {
                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_CLOSE, false);

                            if (retIval == 0)
                            {
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_OPEN_ERROR;
                            }
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_OPEN_ERROR;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_OPEN_ERROR;
                    }
                }
                else
                {
                    if (Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                       Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_OPEN.IOOveride.Value == EnumIOOverride.EMUL &&
                       Module.IOManager().IO.Outputs.DOCARDDOOR_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                       Module.IOManager().IO.Outputs.DOCARDDOOR_OPEN.IOOveride.Value == EnumIOOverride.EMUL)
                    {
                        ret = EventCodeEnum.NONE;
                        return ret;
                    }

                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_CLOSE, false);
                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_OPEN, true);

                    if (retVal == IORet.NO_ERR)
                    {
                        Task.Delay(1000).Wait();
                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_CLOSE, false);
                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_OPEN, true);
                        Task.Delay(500).Wait();

                        if (retVal == IORet.NO_ERR)
                        {
                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_CLOSE, false);

                            if (retIval == 0)
                            {
                                retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_OPEN, true);

                                if (retIval == 0)
                                {
                                    ret = EventCodeEnum.NONE;
                                }
                                else
                                {
                                    ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_OPEN_ERROR;
                                }
                            }
                            else
                            {
                                ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_OPEN_ERROR;
                            }

                            if (ret != EventCodeEnum.NONE)
                            {
                                ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_OPEN_ERROR;

                                for (int i = 0; i < 3; i++) //retry
                                {
                                    LoggerManager.Debug($"CARDDoorOpen Retry: {i + 1}");

                                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_CLOSE, true);
                                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_OPEN, false);

                                    Task.Delay(1000).Wait();

                                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_CLOSE, false);
                                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_OPEN, true);

                                    if (retVal == IORet.NO_ERR)
                                    {
                                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_CLOSE, false);

                                        if (retIval == 0)
                                        {
                                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_OPEN, true);

                                            if (retIval == 0)
                                            {
                                                ret = EventCodeEnum.NONE;
                                                break;
                                            }
                                            else
                                            {
                                                ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_OPEN_ERROR;
                                            }
                                        }
                                        else
                                        {
                                            ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_OPEN_ERROR;
                                        }

                                    }
                                }
                            }

                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_OPEN_ERROR;
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum LoaderDoorCloseRecovery()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            int retIval = -1;
            IORet retVal = IORet.ERROR;

            try
            {
                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, true);
                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, false);

                if (retVal == IORet.NO_ERR)
                {
                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, false, 5000);

                    if (retIval == 0)
                    {
                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, true, 5000);

                        if (retIval == 0)
                        {
                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_CLOSE, true);
                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_OPEN, false);

                            if (retVal == IORet.NO_ERR)
                            {
                                ret = EventCodeEnum.NONE;
                            }
                        }
                        else
                        {
                            //retry
                            ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;

                            for (int i = 0; i < 3; i++)
                            {
                                LoggerManager.Debug($"LoaderDoorClose Retry: {i + 1}");

                                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, false);
                                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, true);

                                Thread.Sleep(1000);

                                retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, false, 5000);

                                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, true);
                                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, false);

                                if (retVal == IORet.NO_ERR)
                                {
                                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, false, 5000);

                                    if (retIval == 0)
                                    {
                                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, true, 5000);

                                        if (retIval == 0)
                                        {
                                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_CLOSE, true);
                                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_OPEN, false);

                                            if (retVal == IORet.NO_ERR)
                                            {
                                                ret = EventCodeEnum.NONE;
                                                break;
                                            }
                                            else
                                            {
                                                ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //retry
                        ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;

                        for (int i = 0; i < 3; i++)
                        {
                            LoggerManager.Debug($"LoaderDoorClose Retry: {i + 1}");

                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, false);
                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, true);

                            Task.Delay(1000).Wait();

                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, false, 5000);

                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, true);
                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, false);

                            if (retVal == IORet.NO_ERR)
                            {
                                retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, false, 5000);

                                if (retIval == 0)
                                {
                                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, true, 5000);

                                    if (retIval == 0)
                                    {
                                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_CLOSE, true);
                                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_OPEN, false);

                                        if (retVal == IORet.NO_ERR)
                                        {
                                            ret = EventCodeEnum.NONE;
                                            break;
                                        }
                                        else
                                        {
                                            ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum LoaderDoorClose()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            int retIval = -1;
            IORet retVal = IORet.ERROR;

            try
            {
                if (SystemManager.SysteMode == SystemModeEnum.Single)
                {
                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, true);
                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, false);

                    if (retVal == IORet.NO_ERR)
                    {
                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, true);
                        if (retIval == 0)
                        {
                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, false);

                            if (retIval == 0)
                            {
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;
                            }
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;
                    }
                }
                else
                {
                    EventCodeEnum isShutterCloseRetVal = EventCodeEnum.UNDEFINED;
                    isShutterCloseRetVal = Module.LoaderController().IsShutterClose();

                    LoggerManager.Debug($"LoaderDoorClose() -> IsShutterClose(): return Value:{isShutterCloseRetVal}");

                    if (isShutterCloseRetVal == EventCodeEnum.NONE)
                    {
                        if (Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                          Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_OPEN.IOOveride.Value == EnumIOOverride.EMUL &&
                          Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                          Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN.IOOveride.Value == EnumIOOverride.EMUL)
                        {
                            LoggerManager.Debug($"Shutter Close Done.");

                            ret = EventCodeEnum.NONE;
                            return ret;
                        }

                        if (Module.CardChangeModule().GetCardDoorAttached())
                        {
                            ret = CardDoorClose();

                            if (ret != EventCodeEnum.NONE)
                            {
                                ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;
                                return ret;
                            }
                        }

                        bool isSealOpen = false;
                        bool isSealClose = false;
                        bool isOpen = false;
                        bool isClose = false;

                        Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_SEAL_OPEN, out isSealOpen);
                        Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_SEAL_CLOSE, out isSealClose);
                        Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, out isOpen);
                        Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, out isClose);

                        if (isSealOpen == false && isSealClose == true && isOpen == false && isClose == true)
                        {
                            LoggerManager.Debug($"Shutter Already Close Done.");

                            ret = EventCodeEnum.NONE;
                        }
                        else
                        {
                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_CLOSE, true);
                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_OPEN, false);

                            if (retVal == IORet.NO_ERR)
                            {
                                retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, false, 5000);

                                if (retIval == 0)
                                {
                                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, true, 5000);

                                    if (retIval == 0)
                                    {
                                        LoggerManager.Debug($"Shutter Door Close Done.");
                                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_CLOSE, true);
                                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOLOADERDOOR_SEAL_OPEN, false);

                                        if (retVal == IORet.NO_ERR)
                                        {
                                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_SEAL_OPEN, false, 5000);

                                            if (retIval == 0)
                                            {
                                                retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DILOADERDOOR_SEAL_CLOSE, true, 5000);

                                                if (retIval == 0)
                                                {
                                                    LoggerManager.Debug($"Shutter Seal Close Done.");

                                                    ret = EventCodeEnum.NONE;
                                                }
                                                else
                                                {
                                                    LoggerManager.Error($"Shutter Close Error. WaitForIO(DILOADERDOOR_SEAL_CLOSE,true) RetVal={retIval}");

                                                    ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                                                }
                                            }
                                            else
                                            {
                                                LoggerManager.Error($"Shutter Close Error. WaitForIO(DILOADERDOOR_SEAL_OPEN,false) RetVal={retIval}");

                                                ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        LoggerManager.Error($"Shutter Close Error. WaitForIO(DILOADERDOOR_CLOSE,true) RetVal={retIval}");

                                        ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;
                                    }
                                }
                                else
                                {
                                    LoggerManager.Error($"Shutter Close Error. WaitForIO(DILOADERDOOR_OPEN,false) RetVal={retIval}");

                                    ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum CardDoorClose()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            int retIval = -1;
            IORet retVal = IORet.ERROR;

            try
            {
                if (SystemManager.SysteMode == SystemModeEnum.Single)
                {
                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_CLOSE, true);
                    retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_OPEN, false);

                    if (retVal == IORet.NO_ERR)
                    {
                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_CLOSE, true);

                        if (retIval == 0)
                        {
                            retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_OPEN, false);

                            if (retIval == 0)
                            {
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;
                            }
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;
                    }
                }
                else
                {
                    EventCodeEnum isShutterCloseRetVal = EventCodeEnum.UNDEFINED;

                    isShutterCloseRetVal = Module.LoaderController().IsShutterClose();

                    LoggerManager.Debug($"CardDoorClose() -> IsShutterClose(): return Value:{isShutterCloseRetVal}");

                    if (isShutterCloseRetVal == EventCodeEnum.NONE)
                    {
                        if (Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                        Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_OPEN.IOOveride.Value == EnumIOOverride.EMUL &&
                        Module.IOManager().IO.Outputs.DOCARDDOOR_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                        Module.IOManager().IO.Outputs.DOCARDDOOR_OPEN.IOOveride.Value == EnumIOOverride.EMUL)
                        {
                            ret = EventCodeEnum.NONE;
                            return ret;
                        }

                        var isSealOpen = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DICARDDOOR_SEAL_OPEN, false, 10, 100);
                        var isSealClose = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DICARDDOOR_SEAL_CLOSE, true, 10, 100);
                        var isOpen = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DICARDDOOR_OPEN, false, 10, 100);
                        var isClose = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DICARDDOOR_CLOSE, true, 10, 100);

                        LoggerManager.Debug($"CardDoorClose(): Before isSealOpen:{isSealOpen} isSealClose:{isSealClose}, isOpen:{isOpen}, isClose:{isClose}");

                        if ((isSealOpen == 0) && (isSealClose == 0) && (isOpen == 0) && (isClose == 0))
                        {
                            ret = EventCodeEnum.NONE;
                        }
                        else
                        {
                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_CLOSE, true);
                            retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_OPEN, false);

                            if (retVal == IORet.NO_ERR)
                            {
                                retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_OPEN, false);

                                if (retIval == 0)
                                {
                                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_CLOSE, true);

                                    if (retIval == 0)
                                    {
                                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_CLOSE, true);

                                        if (retVal != IORet.NO_ERR)
                                        {
                                            LoggerManager.Debug($"CardDoorClose(): isSealOpen:{isSealOpen} isSealClose:{isSealClose}, isOpen:{isOpen}, isClose:{isClose}");

                                            ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;

                                            return ret;
                                        }

                                        retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_OPEN, false);

                                        if (retVal != IORet.NO_ERR)
                                        {
                                            LoggerManager.Debug($"CardDoorClose(): isSealOpen:{isSealOpen} isSealClose:{isSealClose}, isOpen:{isOpen}, isClose:{isClose}");

                                            ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;

                                            return ret;
                                        }

                                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_SEAL_OPEN, false);

                                        if (retVal != IORet.NO_ERR)
                                        {
                                            LoggerManager.Debug($"CardDoorClose(): isSealOpen:{isSealOpen} isSealClose:{isSealClose}, isOpen:{isOpen}, isClose:{isClose}");

                                            ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;

                                            return ret;
                                        }

                                        retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICARDDOOR_SEAL_CLOSE, true);

                                        if (retVal != IORet.NO_ERR)
                                        {
                                            LoggerManager.Debug($"CardDoorClose(): isSealOpen:{isSealOpen} isSealClose:{isSealClose}, isOpen:{isOpen}, isClose:{isClose}");

                                            ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;

                                            return ret;
                                        }

                                        ret = EventCodeEnum.NONE;
                                    }
                                    else
                                    {
                                        ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;
                                    }
                                }
                                else
                                {
                                    ret = EventCodeEnum.STAGEMOVE_IS_CARD_DOOR_CLOSE_ERROR;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum IsLoaderDoorOpen(ref bool isloaderdooropen)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            bool bvalue = false;
            bool closeValue = false;
            IORet retVal = IORet.ERROR;

            try
            {
                if (SystemManager.SysteMode == SystemModeEnum.Single)
                {
                    retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, out bvalue);

                    if (retVal == IORet.NO_ERR)
                    {
                        if (bvalue == true)
                        {
                            isloaderdooropen = bvalue;
                            ret = EventCodeEnum.NONE;
                        }
                        else
                        {
                            isloaderdooropen = false;
                            ret = EventCodeEnum.NONE;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                    }
                }
                else
                {
                    retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, out bvalue);

                    if (retVal == IORet.NO_ERR)
                    {
                        if (bvalue == true)
                        {
                            retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, out closeValue);

                            if (closeValue == false)
                            {
                                // 정상
                                isloaderdooropen = bvalue;
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                isloaderdooropen = false;
                                ret = EventCodeEnum.NONE;
                            }
                        }
                        else
                        {
                            isloaderdooropen = false;
                            ret = EventCodeEnum.NONE;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum IsLoaderDoorClose(ref bool isloaderdoorclose)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            bool bvalue = false;
            bool openValue = false;

            IORet retVal = IORet.ERROR;

            try
            {
                if (SystemManager.SysteMode == SystemModeEnum.Single)
                {
                    retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, out bvalue);

                    if (retVal == IORet.NO_ERR)
                    {
                        if (bvalue == true)
                        {
                            isloaderdoorclose = bvalue;
                            ret = EventCodeEnum.NONE;
                        }
                        else
                        {
                            isloaderdoorclose = false;
                            ret = EventCodeEnum.NONE;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_CLOSE_ERROR;
                    }
                }
                else
                {
                    retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_CLOSE, out bvalue);

                    if (retVal == IORet.NO_ERR)
                    {
                        if (bvalue == true)
                        {
                            retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DILOADERDOOR_OPEN, out openValue);
                            if (openValue == false)
                            {
                                isloaderdoorclose = bvalue;
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                isloaderdoorclose = false;
                                ret = EventCodeEnum.NONE;
                            }
                        }
                        else
                        {
                            isloaderdoorclose = false;
                            ret = EventCodeEnum.NONE;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_IS_LOADER_DOOR_OPEN_ERROR;
                    }
                }

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum IsCardDoorOpen(ref bool iscarddooropen)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            try
            {
                if (Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                       Module.IOManager().IO.Outputs.DOCARDDOOR_SEAL_OPEN.IOOveride.Value == EnumIOOverride.EMUL &&
                       Module.IOManager().IO.Outputs.DOCARDDOOR_CLOSE.IOOveride.Value == EnumIOOverride.EMUL &&
                       Module.IOManager().IO.Outputs.DOCARDDOOR_OPEN.IOOveride.Value == EnumIOOverride.EMUL)
                {
                    ret = EventCodeEnum.NONE;
                    return ret;
                }

                var isSealOpen = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DICARDDOOR_SEAL_OPEN, false, 10, 100);
                var isSealClose = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DICARDDOOR_SEAL_CLOSE, true, 10, 100);
                var isOpen = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DICARDDOOR_OPEN, false, 10, 100);
                var isClose = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DICARDDOOR_CLOSE, true, 10, 100);

                LoggerManager.Debug($"IsCardDoorOpen(): Before isSealOpen:{isSealOpen} isSealClose:{isSealClose}, isOpen:{isOpen}, isClose:{isClose}");

                if ((isSealOpen == 0) && (isSealClose == 0) && (isOpen == 0) && (isClose == 0))
                {
                    ret = EventCodeEnum.NONE;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }
            return ret;
        }
        public override EventCodeEnum FrontDoorLock()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            int retIval = -1;
            IORet retVal = IORet.ERROR;

            try
            {
                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOFDOOR_UNLOCK, false);
                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOFDOOR_LOCK, true);

                if (retVal == IORet.NO_ERR)
                {

                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DIFRONTDOOR_LOCK_R, true);
                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DIFRONTDOOR_LOCK_L, true);

                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DIFRONTDOOR_UNLOCK_L, false);
                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DIFRONTDOOR_UNLOCK_R, false);

                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    ret = EventCodeEnum.STAGEMOVE_FRONT_DOOR_LOCK_ERROR;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum FrontDoorUnLock()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            int retIval = -1;
            IORet retVal = IORet.ERROR;

            try
            {
                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOFDOOR_UNLOCK, true);
                retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOFDOOR_LOCK, false);

                if (retVal == IORet.NO_ERR)
                {
                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DIFRONTDOOR_UNLOCK_L, true);
                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DIFRONTDOOR_UNLOCK_R, true);

                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DIFRONTDOOR_LOCK_R, false);
                    retIval = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DIFRONTDOOR_LOCK_L, false);

                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    ret = EventCodeEnum.STAGEMOVE_FRONT_DOOR_UNLOCK_ERROR;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum IsFrontDoorLock(ref bool isfrontdoorlock)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            bool bvalue = false;
            IORet retVal = IORet.ERROR;

            try
            {
                retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIFRONTDOOR_LOCK_L, out bvalue);

                if (retVal == IORet.NO_ERR)
                {
                    if (bvalue == true)
                    {
                        bvalue = false;

                        retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIFRONTDOOR_LOCK_R, out bvalue);

                        if (retVal == IORet.NO_ERR)
                        {
                            if (bvalue == true)
                            {
                                isfrontdoorlock = bvalue;
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                isfrontdoorlock = false;
                                ret = EventCodeEnum.NONE;
                            }
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_IS_FRONT_DOOR_LOCK_ERROR;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.NONE;
                        isfrontdoorlock = false;
                    }
                }
                else
                {
                    ret = EventCodeEnum.STAGEMOVE_IS_FRONT_DOOR_LOCK_ERROR;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum IsFrontDoorUnLock(ref bool isfrontdoorunlock)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            bool bvalue = false;
            IORet retVal = IORet.ERROR;

            try
            {
                retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIFRONTDOOR_UNLOCK_L, out bvalue);

                if (retVal == IORet.NO_ERR)
                {
                    if (bvalue == true)
                    {
                        bvalue = false;

                        retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIFRONTDOOR_UNLOCK_R, out bvalue);

                        if (retVal == IORet.NO_ERR)
                        {
                            if (bvalue == true)
                            {
                                isfrontdoorunlock = bvalue;
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                isfrontdoorunlock = false;
                                ret = EventCodeEnum.NONE;
                            }
                        }
                        else
                        {
                            ret = EventCodeEnum.STAGEMOVE_IS_FRONT_DOOR_UNLOCK_ERROR;
                        }
                    }
                    else
                    {
                        ret = EventCodeEnum.NONE;
                        isfrontdoorunlock = false;
                    }
                }
                else
                {
                    ret = EventCodeEnum.STAGEMOVE_IS_FRONT_DOOR_UNLOCK_ERROR;
                }

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum IsFrontDoorOpen(ref bool isfrontdooropen)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            bool bvalue = false;
            IORet retVal = IORet.ERROR;

            try
            {
                retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIFRONTDOOROPEN, out bvalue);

                if (retVal == IORet.NO_ERR)
                {
                    if (bvalue == true)
                    {
                        isfrontdooropen = bvalue;
                        ret = EventCodeEnum.NONE;
                    }
                    else
                    {
                        isfrontdooropen = false;
                        ret = EventCodeEnum.NONE;
                    }
                }
                else
                {
                    ret = EventCodeEnum.STAGEMOVE_IS_FRONT_DOOR_OPEN_ERROR;
                }

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum IsFrontDoorClose(ref bool isfrontdoorclose)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            bool bvalue = false;
            IORet retVal = IORet.ERROR;

            try
            {
                retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIFRONTDOORCLOSE, out bvalue);

                if (retVal == IORet.NO_ERR)
                {
                    if (bvalue == true)
                    {
                        isfrontdoorclose = bvalue;
                        ret = EventCodeEnum.NONE;
                    }
                    else
                    {
                        isfrontdoorclose = false;
                        ret = EventCodeEnum.NONE;
                    }
                }
                else
                {
                    ret = EventCodeEnum.STAGEMOVE_IS_FRONT_DOOR_CLOSE_ERROR;
                }

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override bool IsHandlerholdWafer()
        {
            bool ret = false;
            int DOBERNOULLI = -1;
            int DOBERNOULLI_ANTIPAD = -1;
            try
            {
                EnumWaferSize device = Module.LoaderController().GetTransferWaferSize();

                switch (device)
                {
                    case EnumWaferSize.INVALID:
                    case EnumWaferSize.UNDEFINED:
                        break;
                    case EnumWaferSize.INCH6:
                        DOBERNOULLI = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Outputs.DOBERNOULLI_6INCH, true, 0, 1000, false);
                        break;
                    case EnumWaferSize.INCH8:
                        DOBERNOULLI = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Outputs.DOBERNOULLI_8INCH, true, 0, 1000, false);
                        break;
                    case EnumWaferSize.INCH12:
                        DOBERNOULLI = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Outputs.DOBERNOULLI_12INCH, true, 0, 1000, false);
                        break;
                }

                switch (device)
                {
                    case EnumWaferSize.INVALID:
                    case EnumWaferSize.UNDEFINED:
                        break;
                    case EnumWaferSize.INCH6:
                        DOBERNOULLI_ANTIPAD = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD, true, 0, 1000, false);
                        break;
                    case EnumWaferSize.INCH8:
                    case EnumWaferSize.INCH12:
                        DOBERNOULLI_ANTIPAD = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD, false, 0, 1000, false);
                        break;
                }

                int returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST, true, 100, 1000, false);

                if (returnValue == 0 && DOBERNOULLI == 0 && DOBERNOULLI_ANTIPAD == 0)
                {
                    ret = true;
                }
                else
                {
                    ret = false;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return ret;
        }

        public override EventCodeEnum ManualZDownMove()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageManualState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ManualRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"ManualRelMove(): Error occurred while Move to ManualRelMove.");

            return EventCodeEnum.STAGEMOVE_MANUAL_MOVE;
        }
        public override EventCodeEnum ManualAbsMove(double posX, double posY, double posZ, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            LoggerManager.Error($"ManualAbsMove(): Error occurred while Move to ManualRelMove.");

            return EventCodeEnum.STAGEMOVE_MANUAL_MOVE;
        }

        public override Task<EventCodeEnum> StageHomeOffsetMove()
        {
            EventCodeEnum retVal = EventCodeEnum.UNDEFINED;

            int ret = -1;

            try
            {
                var homeoffstX = Module.MotionManager().GetAxis(EnumAxisConstants.X).Param.HomeOffset.Value;
                var homeoffstY = Module.MotionManager().GetAxis(EnumAxisConstants.Y).Param.HomeOffset.Value;
                var homeoffstZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Param.HomeOffset.Value;
                var homeoffstC = Module.MotionManager().GetAxis(EnumAxisConstants.C).Param.HomeOffset.Value;
                var homeoffstPZ = Module.MotionManager().GetAxis(EnumAxisConstants.PZ).Param.HomeOffset.Value;

                retVal = Module.MotionManager().StageMove(homeoffstX, homeoffstY, homeoffstZ, homeoffstC);
                ResultValidate(MethodBase.GetCurrentMethod(), retVal);

                retVal = Module.MotionManager().AbsMove(EnumAxisConstants.PZ, homeoffstPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), retVal);

                // Success Stage Initialize

                // C
                var axisc = Module.MotionManager().GetAxis(EnumAxisConstants.C);

                retVal = Module.MotionManager().AbsMove(EnumAxisConstants.C, 0);

                if (retVal != EventCodeEnum.NONE)
                {
                    return Task.FromResult<EventCodeEnum>(EventCodeEnum.MOTION_HOMING_ERROR);
                }

                bool isthreelegdown = false;

                retVal = Module.MotionManager().IsThreeLegDown(EnumAxisConstants.TRI, ref isthreelegdown);
                ResultValidate(MethodBase.GetCurrentMethod(), retVal);

                var axistri = Module.MotionManager().GetAxis(EnumAxisConstants.TRI);

                if (isthreelegdown == true)
                {
                    //이미 RLS가 들어와있기때문에 
                }
                else
                {
                    retVal = Module.MotionManager().VMove(axistri, axistri.Param.Speed.Value * -1d, EnumTrjType.Normal);
                    ResultValidate(MethodBase.GetCurrentMethod(), retVal);
                }

                bool UsingBernoulliTopHandler = Module.CheckUsingBernoulliHandler();

                if (UsingBernoulliTopHandler == true)
                {
                    CheckBernoulliHandlerFunc();
                }

                ret = Module.MotionManager().WaitForAxisMotionDone(axisc);

                if (ret != 0)
                {
                    return Task.FromResult<EventCodeEnum>(EventCodeEnum.MOTION_HOMING_ERROR);
                }

                //카드팟 모듈이 올라가있으면 내리기 위한 
                SequenceBehavior beh;
                EventCodeEnum behret;
                bool isCardPodUp = false;

                try
                {
                    if (SystemManager.SysteMode == SystemModeEnum.Multiple)
                    {
                        if (Module.CardChangeModule().GetCCType() != EnumCardChangeType.NONE)
                        {
                            beh = new GP_CheckCardOnCardPod();
                            behret = Module.CardChangeModule().BehaviorRun(beh).Result;

                            if (behret == EventCodeEnum.GP_CardChange_CARD_POD_IS_UP_STATUS || behret == EventCodeEnum.GP_CardChage_EXIST_CARD_ON_CARD_POD)
                            {
                                if (Module.CardChangeModule().GetCCType() == EnumCardChangeType.DIRECT_CARD)
                                {
                                    isCardPodUp = true;
                                    retVal = behret;
                                }
                                else// Carrier 타입이거나 NONE, UNDEFINED일 경우.
                                {
                                    retVal = EventCodeEnum.GP_CardChage_EXIST_CARD_ON_CARD_POD;
                                }
                            }
                            // Card 파손 발생 가능한 로직으로 제거 되었음. (모든 GP 시스템 동일)
                            else if (behret == EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD)
                            {
                                retVal = EventCodeEnum.NONE;
                            }
                            else // 에러상황, none일경우, GP_CardChage_EXIST_CARD_ON_CARD_POD일 경우
                            {
                                retVal = behret;
                            }
                        }

                        ret = StageCylinderType.MoveWaferCam.Retract();

                        if (retVal == EventCodeEnum.NONE)
                        {
                            if (Module.CardChangeModule().GetCCDockType() == EnumCardDockType.DIRECTDOCK)
                            {
                                ret = StageCylinderType.MoveWaferCam.Retract();
                                retVal = Module.MarkAligner().DoMarkAlign();
                            }
                            else
                            {
                                retVal = Module.MarkAligner().DoMarkAlign();
                            }
                            if (retVal == EventCodeEnum.NONE)
                            {
                                Module.CoordinateManager().StageCoord.MarkEncPos.X.Value = Module.CoordinateManager().StageCoord.RefMarkPos.X.Value;
                                Module.CoordinateManager().StageCoord.MarkEncPos.Y.Value = Module.CoordinateManager().StageCoord.RefMarkPos.Y.Value;
                                Module.CoordinateManager().StageCoord.MarkEncPos.Z.Value = Module.CoordinateManager().StageCoord.RefMarkPos.Z.Value;
                                Module.CoordinateManager().SaveSysParameter();
                            }
                            else
                            {
                                return Task.FromResult<EventCodeEnum>(retVal);
                            }

                            ret = StageCylinderType.MoveWaferCam.Retract();
                        }
                        else
                        {
                            LoggerManager.Debug($"StageHomeOffsetMove(): retVal:{retVal}. Do Not MarkAlign ");

                            return Task.FromResult<EventCodeEnum>(retVal);
                        }
                    }
                    else
                    {
                        retVal = Module.MarkAligner().DoMarkAlign();

                        if (retVal == EventCodeEnum.NONE)
                        {
                            Module.CoordinateManager().StageCoord.MarkEncPos.X.Value = Module.CoordinateManager().StageCoord.RefMarkPos.X.Value;
                            Module.CoordinateManager().StageCoord.MarkEncPos.Y.Value = Module.CoordinateManager().StageCoord.RefMarkPos.Y.Value;
                            Module.CoordinateManager().StageCoord.MarkEncPos.Z.Value = Module.CoordinateManager().StageCoord.RefMarkPos.Z.Value;
                            Module.CoordinateManager().SaveSysParameter();
                        }
                        else
                        {
                            return Task.FromResult<EventCodeEnum>(retVal);
                        }

                        ret = StageCylinderType.MoveWaferCam.Retract();
                    }

                }
                catch (Exception err)
                {
                    LoggerManager.Exception(err, $"Error occured while check card is on card pod");
                }

                if (ret != 0)
                {
                    // ERROR
                    return Task.FromResult<EventCodeEnum>(EventCodeEnum.STAGEMOVE_SET_WAFER_CAM_BASE_POS_ERROR);

                }

                if (SystemManager.SysteMode == SystemModeEnum.Multiple)
                {
                    if (Module.CardChangeModule().IsCardStuck)
                    {
                        IBehaviorResult returnVal = new BehaviorResult();

                        if (Module.CardChangeModule().IsCardStuck)
                        {
                            SequenceBehavior cardrecovery = null;

                            if (this.Module.CardChangeModule().GetCCType() == EnumCardChangeType.DIRECT_CARD)
                            {
                                cardrecovery = new GP_PCardSutckRecovery();
                                returnVal = cardrecovery.Run().Result;
                            }
                            else if (this.Module.CardChangeModule().GetCCType() == EnumCardChangeType.CARRIER)
                            {
                                cardrecovery = new GOP_PCardSutckRecovery();
                                returnVal = cardrecovery.Run().Result;
                            }
                            else if (this.Module.CardChangeModule().GetCCType() == EnumCardChangeType.UNDEFINED)
                            {
                                retVal = EventCodeEnum.GP_CardChange_INIT_FAIL;
                                Module.NotifyManager().Notify(retVal, Module.LoaderController().GetChuckIndex());
                            }
                            else
                            {
                                returnVal.ErrorCode = EventCodeEnum.NONE;
                            }

                            if (returnVal.ErrorCode == EventCodeEnum.NONE)
                            {
                                retVal = returnVal.ErrorCode;
                            }
                            else if (returnVal.ErrorCode == EventCodeEnum.GP_CardChange_CARD_POD_VAC_ON_ERROR)
                            {
                                retVal = EventCodeEnum.GP_CardChange_CHECK_TO_LATCH;
                                Module.NotifyManager().Notify(retVal, Module.LoaderController().GetChuckIndex());
                            }
                            else
                            {
                                retVal = EventCodeEnum.GP_CardChange_RECOVERY_FAIL;
                                Module.NotifyManager().Notify(retVal, Module.LoaderController().GetChuckIndex());
                            }
                        }
                        else
                        {
                            retVal = EventCodeEnum.NONE;
                        }
                    }

                    // TODO : 
                    if (retVal == EventCodeEnum.GP_CardChange_CHECK_TO_LATCH || retVal == EventCodeEnum.GP_CardChange_RECOVERY_FAIL)
                    {

                    }
                    else if (retVal == EventCodeEnum.NONE)
                    {

                    }
                    else
                    {

                    }

                    if (isCardPodUp)
                    {
                        retVal = EventCodeEnum.GP_CardChange_CARD_POD_IS_UP_STATUS;
                        Module.NotifyManager().Notify(retVal, Module.LoaderController().GetChuckIndex());
                    }
                }

                retVal = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                Module.NotifyManager().Notify(retVal, $"{err.Message}", Module.LoaderController().GetChuckIndex());
                LoggerManager.Exception(err, $"Exception error occured while StageHomeMove");
            }

            return Task.FromResult<EventCodeEnum>(retVal);
        }

        public override EventCodeEnum StageLock()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                Module.LoaderController().SetStageLock(StageLockMode.LOCK);

                Module.StageSupervisorStateTransition(new StageLockState(Module));

                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);

                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum StageUnlock()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                Module.LoaderController().SetStageLock(StageLockMode.UNLOCK);

                Module.StageSupervisorStateTransition(new StageIDLEState(Module));

                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);

                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        // Component Verification 기능을 통한 Wafer Align 수행시 WaferCamBrige를 접지 않는 옵션에 대한 Flag를 설정하는 함수
        public override EventCodeEnum SetNoRetractWaferCamBridgeWhenMarkAlignFlag(bool isFlagOn)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                Module.NoRetractWaferCamBridgeWhenMarkAlignFlag = isFlagOn;
                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);

                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override Task<EventCodeEnum> LoaderHomeOffsetMove()
        {
            Task<EventCodeEnum> retval = Task.FromResult<EventCodeEnum>(EventCodeEnum.UNDEFINED);

            EventCodeEnum retVal = EventCodeEnum.UNDEFINED;

            int ret = -1;

            try
            {
                // SC
                var axissc = Module.MotionManager().GetAxis(EnumAxisConstants.SC);

                retVal = Module.MotionManager().AbsMove(EnumAxisConstants.SC, axissc.Param.ClearedPosition.Value);

                if (retVal != EventCodeEnum.NONE)
                {
                    return Task.FromResult<EventCodeEnum>(EventCodeEnum.MOTION_HOMING_ERROR);
                }

                // Motion Done
                ret = Module.MotionManager().WaitForAxisMotionDone(axissc);

                if (ret != 0)
                {
                    return Task.FromResult<EventCodeEnum>(EventCodeEnum.MOTION_HOMING_ERROR);
                }

                retval = Task.FromResult<EventCodeEnum>(EventCodeEnum.NONE);
            }
            catch (Exception err)
            {
                retval = Task.FromResult<EventCodeEnum>(EventCodeEnum.EXCEPTION);

                LoggerManager.Exception(err);
            }

            return retval;
        }

        #endregion

        #region ActionMethod

        protected EventCodeEnum ReadVacuumFunc(out bool val)
        {
            WaferObject wafer = (WaferObject)Module.StageSupervisor().WaferObject;

            double WaferSize = wafer.GetPhysInfo().WaferSize_um.Value;
            bool inch6Val = false;
            bool inch8Val = false;
            bool inch12Val = false;
            val = false;

            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = ReadVacuumAll(out inch6Val, out inch8Val, out inch12Val);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                //false 가 웨이퍼가 있다는거임 
                if (wafer.GetPhysInfo().WaferSizeEnum == EnumWaferSize.INCH6)
                {
                    if (inch6Val == false)
                    {
                        val = true;
                    }
                    else
                    {
                        val = false;
                    }
                    ret = EventCodeEnum.NONE;
                }
                else if (wafer.GetPhysInfo().WaferSizeEnum == EnumWaferSize.INCH8)
                {
                    if (inch8Val == false)
                    {
                        val = true;
                    }
                    else
                    {
                        val = false;
                    }
                    ret = EventCodeEnum.NONE;

                }
                else if (wafer.GetPhysInfo().WaferSizeEnum == EnumWaferSize.INCH12)
                {
                    if (inch12Val == false)
                    {
                        val = true;
                    }
                    else
                    {
                        val = false;
                    }
                    ret = EventCodeEnum.NONE;

                }
                else
                {
                    ret = EventCodeEnum.STAGEMOVE_READ_VACUUM_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        private EventCodeEnum ReadVacuumAll(out bool inch6Val, out bool inch8Val, out bool inch12Val)
        {
            inch6Val = false;
            inch8Val = false;
            inch12Val = false;
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                var retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6, out inch6Val);

                if (retVal != IORet.NO_ERR)
                {
                    LoggerManager.Error($"ReadVacuumAll 6INCH");

                    ret = EventCodeEnum.STAGEMOVE_READ_VACUUM_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_8, out inch8Val);

                if (retVal != IORet.NO_ERR)
                {
                    LoggerManager.Error($"ReadVacuumAll 8INCH");

                    ret = EventCodeEnum.STAGEMOVE_READ_VACUUM_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                retVal = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_12, out inch12Val);

                if (retVal != IORet.NO_ERR)
                {
                    LoggerManager.Error($"ReadVacuumAll 12INCH");

                    ret = EventCodeEnum.STAGEMOVE_READ_VACUUM_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum WaitForVacuumFunc(bool val, long timeout = 0)
        {
            //vac true
            WaferObject wafer = (WaferObject)Module.StageSupervisor().WaferObject;
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                int retVal = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6, val, timeout);

                if (retVal != 0)
                {
                    LoggerManager.Error($"VacuumOnOffError DIWAFERONCHUCK_6 WaitForIO");

                    ret = EventCodeEnum.STAGEMOVE_WAITFOR_VAC_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                // TODO : 
                if (Module.StageSupervisor().WaferINCH8Size <= wafer.GetPhysInfo().WaferSize_um.Value)
                {

                }

                // TODO : 
                if (Module.StageSupervisor().WaferINCH12Size <= wafer.GetPhysInfo().WaferSize_um.Value)
                {

                }

                // TODO : 

                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }

        protected EventCodeEnum MonitorForVacuumFunc(bool val, long sustain, long timeout)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                IIOManager iOManager = Module.IOManager();

                if (Module.DeviceModule() != null)
                {
                    if (Module.DeviceModule().ModuleState.GetState() != ModuleStateEnum.RUNNING)
                    {
                        var device = Module.StageSupervisor().WaferObject.GetPhysInfo().WaferSizeEnum;
                        int returnValue = -1;

                        switch (device)
                        {
                            case EnumWaferSize.INVALID:
                                break;
                            case EnumWaferSize.UNDEFINED:
                                break;
                            case EnumWaferSize.INCH6:

                                returnValue = iOManager.IOServ.MonitorForIO(iOManager.IO.Inputs.DIWAFERONCHUCK_6, val, sustain, timeout);

                                if (returnValue == 0)
                                {
                                    ret = EventCodeEnum.NONE;
                                }
                                else if (returnValue == -2)
                                {
                                    ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                                }
                                else
                                {
                                    ret = EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
                                }
                                break;
                            case EnumWaferSize.INCH8:

                                if (returnValue == 0)
                                {
                                    returnValue = iOManager.IOServ.MonitorForIO(iOManager.IO.Inputs.DIWAFERONCHUCK_8, val, sustain, timeout);

                                    if (returnValue == 0)
                                    {
                                        ret = EventCodeEnum.NONE;
                                    }
                                    else if (returnValue == -2)
                                    {
                                        ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                                    }
                                    else
                                    {
                                        ret = EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
                                    }
                                }
                                else if (returnValue == -2)
                                {
                                    ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                                }
                                else
                                {
                                    ret = EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
                                }

                                break;
                            case EnumWaferSize.INCH12:

                                returnValue = iOManager.IOServ.MonitorForIO(iOManager.IO.Inputs.DIWAFERONCHUCK_6, val, sustain, timeout);

                                if (returnValue == 0)
                                {
                                    returnValue = iOManager.IOServ.MonitorForIO(iOManager.IO.Inputs.DIWAFERONCHUCK_8, val, sustain, timeout);

                                    if (returnValue == 0)
                                    {
                                        returnValue = iOManager.IOServ.MonitorForIO(iOManager.IO.Inputs.DIWAFERONCHUCK_12, val, sustain, timeout);

                                        if (returnValue == 0)
                                        {
                                            ret = EventCodeEnum.NONE;
                                        }
                                        else if (returnValue == -2)
                                        {
                                            ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                                        }
                                        else
                                        {
                                            ret = EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
                                        }
                                    }
                                    else if (returnValue == -2)
                                    {
                                        ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                                    }
                                    else
                                    {
                                        ret = EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
                                    }
                                }
                                else if (returnValue == -2)
                                {
                                    ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                                }
                                else
                                {
                                    ret = EventCodeEnum.STAGEMOVE_MONITORFOR_VAC_ERROR;
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
                else
                {
                    LoggerManager.Error($"Error Ocurred  while this function : {MethodBase.GetCurrentMethod().Name}, Err = DeviceModule can not use.");
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }


        private EventCodeEnum ExtraVacuumGetReady(bool mainVac, bool extraVac)
        {
            IORet ret;
            EventCodeEnum retVal = EventCodeEnum.UNDEFINED;

            try
            {
                DateTime now = DateTime.Now;
                IIOManager iOManager = this.Module.IOManager();
                var extra_vac_ready = iOManager.IO.Inputs.DIEXTRA_CHUCK_VAC_READY;
                var extra_air_on = iOManager.IO.Outputs.DOEXTRA_CHUCK_AIR_READY;

                LoggerManager.Debug($"ExtraVacuumOnReady(): Wait Start. mainVac:{mainVac}, extraVac:{extraVac}");


                bool input_value;
                var extra_chuck_vac_on = iOManager.IOServ.ReadBit(extra_vac_ready, out input_value);

                // if (Module.prev_val == false && Module.prev_ReadyToVacOn == false && val == true)
                if ((input_value == false || extra_air_on.Value == false) &&
                    (mainVac == true || extraVac == true))// => TODO: (Input: false || Ouput: false) && (val == true || readyToVacOn == true)
                                                          // 1) readyToVacOn 값을 OR로 주는 이유 = Value가 false 일떄도 Valve를 열어야하는 경우가 있음.
                                                          // 2) Ouput 값을 보는 이유 = Valve를 닫는다고 해도 HW 동작 시간이 있으므로 Input이 즉시 false로 바뀌지 않을 수 있음. 즉시 대기압 상태로 바뀌지 않을 수 있음.
                {// *Ouput - io DOEXTRA_CHUCK_AIR_ON could be reverse value

                    ret = iOManager.IOServ.WriteBit(extra_air_on, true);
                    if (ret == IORet.NO_ERR)
                    {
                        if (mainVac == true)
                        {
                            var waitForInput = iOManager.IOServ.WaitForIO(extra_vac_ready, true);//Val == false 인 경우 5초 다 대기 안하고 흘려보내도 됨. 단, 스래드가 종료되기 전 true가 들어올 수 있음. 
                            if (waitForInput == 0)
                            {
                                retVal = EventCodeEnum.NONE;
                            }
                            else
                            {
                                retVal = EventCodeEnum.IO_TIMEOUT_ERROR;
                            }
                        }
                        else
                        {
                            // 당장 사용할 것이 아니므로 센서 상태를 대기하지 않는다. 
                            retVal = EventCodeEnum.NONE;
                        }

                    }
                }
                else if (mainVac == false && extraVac == false)
                {
                    ret = iOManager.IOServ.WriteBit(extra_air_on, false);
                    if (ret == IORet.NO_ERR)
                    {
                        retVal = EventCodeEnum.NONE;
                    }
                }
                else
                {
                    retVal = EventCodeEnum.NONE;
                }

                LoggerManager.Debug($"ExtraVacuumOnReady(): Wait End. retVal:{retVal}, elapsed time:{(DateTime.Now - now).TotalMilliseconds}msec,  DIEXTRA_CHUCK_VAC_READY.IOOveride:{extra_vac_ready.IOOveride.Value}, DOEXTRA_CHUCK_AIR_ON.IOOveride:{extra_air_on.IOOveride.Value}");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }
            return retVal;
        }

        object chuckVacCtrl = null;
        protected EventCodeEnum VacuumOnOffFunc(bool val, bool extraVacReady, bool extraVacOn = true, long timeout = 0)
        {

            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            try
            {
                WaferObject wafer = (WaferObject)Module.StageSupervisor().WaferObject;
                var physinfo = Module.StageSupervisor().WaferObject.GetPhysInfo();

                IORet retVal = IORet.ERROR;
                var isVacRunning = false;

                IIOManager iOManager = Module.IOManager();
                IIOService iOService = iOManager.IOServ;

                if (iOManager != null && iOService != null)
                {
                    // 아래 내용 함수로 빼고 그 함수를 호출한다. 
                    LoggerManager.Debug($"VaccumOnOffFunc(): val={val} Start. extraVacReady:{extraVacReady}, extraVacOn:{extraVacOn}");

                    if (iOManager.IO.Inputs.DIEXTRA_CHUCK_VAC_READY.IOOveride.Value == EnumIOOverride.NONE
                        || iOManager.IO.Outputs.DOEXTRA_CHUCK_AIR_READY.IOOveride.Value == EnumIOOverride.NONE)
                    {
                        ret = ExtraVacuumGetReady(val, extraVacReady);           
                        if (ret != EventCodeEnum.NONE)
                        {
                            this.Module.NotifyManager().Notify(EventCodeEnum.EXTRA_CHUCK_VACUUM_STATUS_INVALID);
                            ret = EventCodeEnum.EXTRA_CHUCK_VACUUM_STATUS_INVALID;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }
                    }
                    

                    if (val == false)
                    {
                        // ChuckVac을 끄려고 할 때, 이미 꺼져있는 경우 중복 호출 될 필요가 없음.
                        // 이미 꺼져있는데도 불구하고 또 끄고 Blow를 불면 Wafer가 슬립날 수 있음.

                        // 위 의도는 IsAnyVacuumOn() 조건에 따라서 Blow 하도록 변경됨.
                        if (physinfo.WaferSizeEnum == EnumWaferSize.UNDEFINED)
                        {
                            if (physinfo.WaferSize_um.Value == 150000)
                            {
                                physinfo.WaferSizeEnum = EnumWaferSize.INCH6;
                            }
                            else if (physinfo.WaferSize_um.Value == 200000)
                            {
                                physinfo.WaferSizeEnum = EnumWaferSize.INCH8;
                            }
                            else if (physinfo.WaferSize_um.Value == 300000)
                            {
                                physinfo.WaferSizeEnum = EnumWaferSize.INCH12;
                            }
                        }
                    }

                    if (val == true)
                    {
                        retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW, false);
                        retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW_12, false);
                    }

                    EnumWaferSize enumWaferSize = wafer.GetPhysInfo().WaferSizeEnum;
                    bool extraOuput;

                    if(val == true)
                    {
                        extraOuput = extraVacOn && val;
                    }
                    else
                    {
                        extraOuput = val;
                    }


                    switch (enumWaferSize)
                    {
                        case EnumWaferSize.INVALID:
                            break;
                        case EnumWaferSize.UNDEFINED:
                            break;
                        case EnumWaferSize.INCH6:

                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCKAIRON_0, val);

                            if (retVal != IORet.NO_ERR)
                            {
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }


                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_EXTRA_AIRON_0, extraOuput);

                            if (retVal != IORet.NO_ERR)
                            {
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }


                            break;
                        case EnumWaferSize.INCH8:

                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCKAIRON_0, val);

                            if (retVal != IORet.NO_ERR)
                            {
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }

                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_EXTRA_AIRON_0, extraOuput);

                            if (retVal != IORet.NO_ERR)
                            {
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }



                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCKAIRON_1, val);

                            if (retVal != IORet.NO_ERR)
                            {
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }


                            break;
                        case EnumWaferSize.INCH12:

                            isVacRunning = IsAnyVacuumOn(EnumWaferSize.INCH8);
                            if (val == false)
                            {
                                if (isVacRunning)
                                {
                                    LoggerManager.Debug($"IsAnyVacuumOn(EnumWaferSize.INCH8) vacuum is running.");
                                }
                                else
                                {
                                    LoggerManager.Debug($"IsAnyVacuumOn(EnumWaferSize.INCH8) vacuum is already off.");
                                }
                            }                        

                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_EXTRA_AIRON_0, extraOuput);

                            if (retVal != IORet.NO_ERR)
                            {
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }

                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_EXTRA_AIRON_2, extraOuput);

                            if (retVal != IORet.NO_ERR)
                            {
                                this.Module.NotifyManager().Notify(EventCodeEnum.MONITORING_CHUCK_12VAC_ERROR);
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;

                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }

                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCKAIRON_0, val);

                            if (retVal != IORet.NO_ERR)
                            {
                                this.Module.NotifyManager().Notify(EventCodeEnum.MONITORING_CHUCK_6VAC_ERROR);
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }


                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCKAIRON_1, val);

                            if (retVal != IORet.NO_ERR)
                            {
                                this.Module.NotifyManager().Notify(EventCodeEnum.MONITORING_CHUCK_8VAC_ERROR);
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }


                            if (val == false && isVacRunning)
                            {
                                ret = FlushBlow(EnumWaferSize.INCH8, allBlow: false);
                                if (ret != EventCodeEnum.NONE)
                                {
                                    ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                                }

                                LoggerManager.Debug($"VacuumOnOff(): DelayTimeAfterThreeLegAreakVacOff Start: ({Module.CoordinateManager().StageCoord.DelayTimeAfterThreeLegAreakVacOff.Value} msec)");
                                Thread.Sleep(Module.CoordinateManager().StageCoord.DelayTimeAfterThreeLegAreakVacOff.Value);
                                LoggerManager.Debug($"VacuumOnOff(): DelayTimeAfterThreeLegAreakVacOff End: ({Module.CoordinateManager().StageCoord.DelayTimeAfterThreeLegAreakVacOff.Value} msec)");
                            }

                            isVacRunning = IsAnyVacuumOn(EnumWaferSize.INCH12);
                            if(val == false)
                            {
                                if (isVacRunning)
                                {
                                    LoggerManager.Debug($"IsAnyVacuumOn(EnumWaferSize.INCH12) vacuum is running.");
                                }
                                else
                                {
                                    LoggerManager.Debug($"IsAnyVacuumOn(EnumWaferSize.INCH12) vacuum is already off.");
                                }
                            }
                           

                            retVal = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCKAIRON_2, val);

                            if (retVal != IORet.NO_ERR)
                            {
                                this.Module.NotifyManager().Notify(EventCodeEnum.MONITORING_CHUCK_12VAC_ERROR);
                                ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;

                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }

                        
                            if (val == false && isVacRunning)
                            {
                                ret = FlushBlow(EnumWaferSize.INCH12, allBlow: false);
                                if (ret != EventCodeEnum.NONE)
                                {
                                    ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                                }
                            }

                            break;
                        default:
                            break;
                    }


                }
                else
                {
                    LoggerManager.Error($"Error Ocurred  while this function : {MethodBase.GetCurrentMethod().Name}, Err = IOManager can not use.");
                }


                ret = EventCodeEnum.NONE;

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }
            finally
            {
                LoggerManager.Debug($"VaccumOnOffFunc(): val={val} End.");
            }
            
            return ret;
        }

        protected bool IsAnyVacuumOn(EnumWaferSize size)
        {
            bool isRunning = false;
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            try
            {
                IORet ioreturnValue = IORet.ERROR;

                bool inch6 = false;
                bool inch8 = false;
                bool inch12 = false;

                bool inch6_out = false;
                bool inch8_out = false;
                bool inch12_out = false;

                bool inch6IsRunning = false;
                bool inch8IsRunning = false;
                bool inch12IsRunning = false;

                switch (size)
                {
                    case EnumWaferSize.INVALID:
                        break;
                    case EnumWaferSize.UNDEFINED:
                        break;
                    case EnumWaferSize.INCH6:
                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6, out inch6);

                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_6VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_0, out inch6_out);

                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_6VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        inch6IsRunning = inch6 == false || inch6_out == true;
                        if (inch6IsRunning)
                        {
                            isRunning = true;
                            ret = EventCodeEnum.NONE;
                        }
                        else
                        {
                            LoggerManager.Debug($"IsAnyVacuumOn({size}): Vaccuum is off now. inch6IsRunning:{inch6IsRunning}");
                        }

                        break;
                    case EnumWaferSize.INCH8:

                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6, out inch6);

                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_6VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_0, out inch6_out);

                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_6VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }


                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_8, out inch8);

                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_8VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_1, out inch8_out);

                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_8VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        inch6IsRunning = inch6 == false || inch6_out == true;
                        inch8IsRunning = inch8 == false || inch8_out == true;

                        if (inch6IsRunning || inch8IsRunning)
                        {
                            isRunning = true;
                            ret = EventCodeEnum.NONE;
                        }
                        else
                        {
                            LoggerManager.Debug($"IsAnyVacuumOn({size}): Vaccuum is off now. inch6IsRunning:{inch6IsRunning}, inch8IsRunning{inch8IsRunning}");
                        }


                        break;
                    case EnumWaferSize.INCH12:

                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6, out inch6);
                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_6VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_0, out inch6_out);
                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_6VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }


                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_8, out inch8);

                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_8VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_1, out inch8_out);

                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_8VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Inputs.DIWAFERONCHUCK_12, out inch12);

                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_12VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        ioreturnValue = Module.IOManager().IOServ.ReadBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_2, out inch12_out);
                        if (ioreturnValue != IORet.NO_ERR)
                        {
                            ret = EventCodeEnum.MONITORING_CHUCK_12VAC_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }



                        inch6IsRunning = inch6 == false || inch6_out == true;
                        inch8IsRunning = inch8 == false || inch8_out == true;
                        inch12IsRunning = inch12 == false || inch12_out == true;

                        if (inch6IsRunning || inch8IsRunning || inch12IsRunning)
                        {
                            isRunning = true;
                            ret = EventCodeEnum.NONE;
                        }
                        else
                        {
                            LoggerManager.Debug($"IsAnyVacuumOn({size}): Vaccuum is off now. inch6IsRunning:{inch6IsRunning}, inch8IsRunning{inch8IsRunning}, inch12IsRunning{inch12IsRunning}");
                        }

                        break;
                    default:
                        break;
                }

                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }
            return isRunning;
        }

        protected EventCodeEnum FlushBlow(EnumWaferSize size, bool allBlow = true)
        {
            EventCodeEnum retVal = EventCodeEnum.UNDEFINED;

            try
            {
                IIOManager iOManager = Module.IOManager();
                IIOService iOService = iOManager.IOServ;
                IORet ioRet;
                WaferObject wafer = (WaferObject)Module.StageSupervisor().WaferObject;

                int nDefaultTime = (int)iOManager.IO.Outputs.DOCHUCK_BLOW.MaintainTime.Value; //기본 air blow time
                int nCustomizeTime = Module.CoordinateManager().StageCoord.ChuckVacBlowTimeout.Value; //stm에서 사용하는 air bolw time
                int nBlowTime = (nCustomizeTime == 0) ? nDefaultTime : nCustomizeTime;


                if (wafer.GetStatus() == EnumSubsStatus.EXIST)
                {
                    nBlowTime = nDefaultTime;// wafer 존재 상황
                }// else : wafer가 없거나 blow timeout이 설정되어 있지 않을때

                if (allBlow)
                {
                    LoggerManager.Debug($"FlushBlow():{nBlowTime} all blow Start");
                    ioRet = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW, true);
                    ioRet = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW_12, true);

                    Thread.Sleep(nBlowTime);

                    ioRet = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW, false);
                    ioRet = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW_12, false);
                    LoggerManager.Debug($"FlushBlow():{nBlowTime} all blow End");
                }
                else if (size == EnumWaferSize.INCH6 || size == EnumWaferSize.INCH8)
                {
                    LoggerManager.Debug($"FlushBlow():{nBlowTime} {size} Start");
                    ioRet = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW, true);

                    Thread.Sleep(nBlowTime);

                    ioRet = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW, false);
                    LoggerManager.Debug($"FlushBlow():{nBlowTime} {size} End");
                }
                else if (size == EnumWaferSize.INCH12)
                {
                    LoggerManager.Debug($"FlushBlow():{nBlowTime} {size} Start");
                    ioRet = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW_12, true);

                    Thread.Sleep(nBlowTime);

                    ioRet = iOService.WriteBit(iOManager.IO.Outputs.DOCHUCK_BLOW_12, false);
                    LoggerManager.Debug($"FlushBlow():{nBlowTime} {size} End");
                }
                retVal = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }
            return retVal;
        }

        protected EventCodeEnum WaferHighViewMoveFunc(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();
            double heightzpos = 0.0;
            double curZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axist = Module.MotionManager().GetAxis(EnumAxisConstants.C);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            wfcoord.X.Value = xpos * 1d;
            wfcoord.Y.Value = ypos * 1d;
            wfcoord.Z.Value = zpos * 1d;
            wfcoord.T.Value = tpos * 10000d;

            try
            {
                curZpos = axisz.Status.Position.Ref;
                heightzpos = Module.WaferAligner().GetHeightValue(xpos, ypos, true);
                wfcoord.Z.Value = 1d * heightzpos;

                mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);

                double curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > mccoord.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, wfcoord.T.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZpos, wfcoord.T.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"WaferHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, zpos = {zpos}, tpos = {tpos})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum WaferLowViewMoveFunc(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            double heightzpos = 0.0;
            double curZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axist = Module.MotionManager().GetAxis(EnumAxisConstants.C);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            wfcoord.X.Value = xpos * 1;
            wfcoord.Y.Value = ypos * 1;
            wfcoord.Z.Value = zpos * 1;
            wfcoord.T.Value = tpos * 10000d;

            try
            {
                curZpos = axisz.Status.Position.Ref;

                heightzpos = Module.WaferAligner().GetHeightValue(xpos, ypos);
                wfcoord.Z.Value = 1d * heightzpos;

                mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                double curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > mccoord.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, wfcoord.T.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZpos, wfcoord.T.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"WaferLowViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, zpos = {zpos}, tpos = {tpos})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        protected EventCodeEnum PinHighViewMoveFunc(double xpos, double ypos, double pzpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            MachineCoordinate machine = new MachineCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            double curPZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
            var axist = Module.MotionManager().GetAxis(EnumAxisConstants.C);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

            pincoord.X.Value = xpos;
            pincoord.Y.Value = ypos;
            pincoord.Z.Value = pzpos;
            pincoord.T.Value = tpos * 10000d;

            try
            {
                curPZpos = axispz.Status.Position.Ref;

                machine = Module.CoordinateManager().PinHighPinConvert.ConvertBack(pincoord);

                double curZ = 0;
                curZ = axisz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(machine.X.Value, machine.Y.Value, curZ, machine.Z.Value);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curPZpos > machine.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, machine.Z.Value, machine.T.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, curPZpos, machine.T.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"PinHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, pzpos = {pzpos}, tpos = {tpos})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum PinLowViewMoveFunc(double xpos, double ypos, double pzpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            MachineCoordinate machine = new MachineCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            double curPZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
            var axist = Module.MotionManager().GetAxis(EnumAxisConstants.C);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

            pincoord.X.Value = xpos;
            pincoord.Y.Value = ypos;
            pincoord.Z.Value = pzpos;
            pincoord.T.Value = tpos * 10000d;

            try
            {
                curPZpos = axispz.Status.Position.Ref;

                machine = Module.CoordinateManager().PinLowPinConvert.ConvertBack(pincoord);

                double curZ = 0;
                curZ = axisz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(machine.X.Value, machine.Y.Value, curZ, machine.Z.Value);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curPZpos > machine.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, machine.Z.Value, machine.T.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, curPZpos, machine.T.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"PinLowViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, pzpos = {pzpos}, tpos = {tpos})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }
            return ret;
        }

        protected EventCodeEnum WaferHighViewMoveFunc(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            double heightzpos = 0.0;
            double curZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

            wfcoord.X.Value = xpos * 1d;
            wfcoord.Y.Value = ypos * 1d;

            if (NotUseHeightProfile == false)
            {
                heightzpos = Module.WaferAligner().GetHeightValue(xpos, ypos, true);
            }
            else
            {
                heightzpos = zpos;
            }

            //z 값이 안전한지
            if (wfcoord.Z.Value <= 0)
            {
                wfcoord.Z.Value = Module.StageSupervisor().WaferObject.GetSubsInfo().ActualThickness;
            }
            else if (wfcoord.Z.Value > Module.StageSupervisor().WaferMaxThickness)
            {
                wfcoord.Z.Value = Module.StageSupervisor().WaferMaxThickness;
            }

            wfcoord.Z.Value = 1d * heightzpos;

            try
            {
                curZpos = axisz.Status.Position.Ref;

                mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);

                double curPZ = 0;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > mccoord.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"WaferHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, zpos = {zpos}, heightzpos = {heightzpos})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum CardViewMoveFunc(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            double curZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

            wfcoord.X.Value = xpos * 1d;
            wfcoord.Y.Value = ypos * 1d;
            wfcoord.Z.Value = zpos * 1d;

            try
            {
                curZpos = axisz.Status.Position.Ref;

                mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);

                double curPZ = 0;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > mccoord.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"WaferHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, zpos = {zpos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum WaferLowViewMoveFunc(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            double heightzpos = 0.0;
            double curZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

            wfcoord.X.Value = xpos * 1;
            wfcoord.Y.Value = ypos * 1;
            wfcoord.Z.Value = zpos * 1;

            try
            {
                if (NotUseHeightProfile == false)
                {
                    heightzpos = Module.WaferAligner().GetHeightValue(xpos, ypos);
                }
                else
                {
                    heightzpos = zpos;
                }

                if (wfcoord.Z.Value <= 0)
                {
                    wfcoord.Z.Value = Module.StageSupervisor().WaferObject.GetSubsInfo().ActualThickness;
                }
                else if (wfcoord.Z.Value > Module.StageSupervisor().WaferMaxThickness)
                {
                    wfcoord.Z.Value = Module.StageSupervisor().WaferMaxThickness;
                }

                wfcoord.Z.Value = 1d * heightzpos;

                curZpos = axisz.Status.Position.Ref;

                mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                double curPZ = 0;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > mccoord.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"WaferLowViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, zpos = {zpos}, heightzpos = {heightzpos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        protected EventCodeEnum PinHighViewMoveFunc(double xpos, double ypos, double pzpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate machine = new MachineCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            double curPZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            pincoord.X.Value = xpos;
            pincoord.Y.Value = ypos;
            pincoord.Z.Value = pzpos;

            try
            {
                machine = Module.CoordinateManager().PinHighPinConvert.ConvertBack(pincoord);
                curPZpos = axispz.Status.Position.Ref;

                double curZ = 0;
                curZ = axisz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(machine.X.Value, machine.Y.Value, curZ, machine.Z.Value);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curPZpos > machine.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"PinHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, pzpos = {pzpos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum PinLowViewMoveFunc(double xpos, double ypos, double pzpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            MachineCoordinate machine = new MachineCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            double curPZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            pincoord.X.Value = xpos;
            pincoord.Y.Value = ypos;
            pincoord.Z.Value = pzpos;

            try
            {
                machine = Module.CoordinateManager().PinLowPinConvert.ConvertBack(pincoord);
                curPZpos = axispz.Status.Position.Ref;

                double curZ = 0;
                curZ = axisz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(machine.X.Value, machine.Y.Value, curZ, machine.Z.Value);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curPZpos > machine.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"PinLowViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, pzpos = {pzpos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum PogoViewMoveFunc(double xpos, double ypos, double pzpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate machine = new MachineCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            double curPZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            pincoord.X.Value = xpos;
            pincoord.Y.Value = ypos;
            pincoord.Z.Value = pzpos;

            try
            {
                machine = Module.CoordinateManager().PinLowPinConvert.ConvertBack(pincoord);
                curPZpos = axispz.Status.Position.Ref;

                double curZ = 0;
                curZ = axisz.Status.Position.Ref;

                MoveToZClearance();

                ret = Module.CheckHardwareInterference_GPCC(machine.X.Value, machine.Y.Value, curZ, machine.Z.Value);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curPZpos > machine.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axispz, machine.Z.Value, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"PogoViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, pzpos = {pzpos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum WaferHighViewMoveFunc(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            wfcoord.X.Value = xpos * 1d;
            wfcoord.Y.Value = ypos * 1d;

            try
            {
                mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);

                double curZ = 0;
                double curPZ = 0;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, curZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                LoggerManager.Debug($"WaferHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum WaferLowViewMoveFunc(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            wfcoord.X.Value = xpos * 1;
            wfcoord.Y.Value = ypos * 1;

            try
            {
                mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                double curZ = 0;
                double curPZ = 0;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, curZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                LoggerManager.Debug($"WaferLowViewMoveFunc() : xpos = {xpos}, ypos = {ypos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        protected EventCodeEnum CardViewMoveFunc(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            wfcoord.X.Value = xpos * 1;
            wfcoord.Y.Value = ypos * 1;

            try
            {
                mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                double curZ = 0;
                double curPZ = 0;

                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference_GPCC(mccoord.X.Value, mccoord.Y.Value, curZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                LoggerManager.Debug($"CardViewMoveFunc() : xpos = {xpos}, ypos = {ypos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum PinHighViewMoveFunc(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            MachineCoordinate machine = new MachineCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            pincoord.X.Value = xpos;
            pincoord.Y.Value = ypos;

            try
            {
                machine = Module.CoordinateManager().PinHighPinConvert.ConvertBack(pincoord);

                double curZ = 0;
                double curPZ = 0;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(machine.X.Value, machine.Y.Value, curZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                LoggerManager.Debug($"PinHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum PinLowViewMoveFunc(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate machine = new MachineCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            pincoord.X.Value = xpos;
            pincoord.Y.Value = ypos;

            try
            {
                machine = Module.CoordinateManager().PinLowPinConvert.ConvertBack(pincoord);

                double curZ = 0;
                double curPZ = 0;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(machine.X.Value, machine.Y.Value, curZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().StageMove(machine.X.Value, machine.Y.Value, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                LoggerManager.Debug($"PinLowViewMoveFunc() : xpos = {xpos}, ypos = {ypos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum WaferHighIndexMoveForMappingFunc(long machx, long machy)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();
            WaferCoordinate wfcoord_next = new WaferCoordinate();
            WaferCoordinate wfcoord_offset = new WaferCoordinate();
            WaferCoordinate wfcoord_LL = new WaferCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            double curX = 0;
            double curY = 0;
            double curZ = 0;
            double curPZ = 0;

            try
            {
                // 현재 좌표
                ICamera cam = Module.VisionManager().GetCam(EnumProberCam.WAFER_HIGH_CAM);
                MachineIndex mcoord = cam.GetCurCoordMachineIndex();

                long x = mcoord.XIndex;
                long y = mcoord.YIndex;

                // 현재 위치
                wfcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                // 현재 다이의 LL 위치
                wfcoord_LL = Module.WaferAligner().MachineIndexConvertToDieLeftCorner((int)x, (int)y);

                // 현재 다이에서 LL 까지의 거리
                wfcoord_offset.X.Value = wfcoord.X.Value - wfcoord_LL.X.Value;
                wfcoord_offset.Y.Value = wfcoord.Y.Value - wfcoord_LL.Y.Value;

                // 이동할 위치
                wfcoord_next = Module.WaferAligner().MachineIndexConvertToDieLeftCorner((int)machx, (int)machy);
                wfcoord_next.X.Value = wfcoord_next.X.Value + wfcoord_offset.X.Value;
                wfcoord_next.Y.Value = wfcoord_next.Y.Value + wfcoord_offset.Y.Value;

                LoggerManager.Debug($"IndexModeTargetPos X : [{wfcoord_next.X.Value}], Y : [{wfcoord_next.Y.Value}]");

                pincoord.X.Value = Module.StageSupervisor().ProbeCardInfo.ProbeCardDevObjectRef.PinCenX;
                pincoord.Y.Value = Module.StageSupervisor().ProbeCardInfo.ProbeCardDevObjectRef.PinCenY;
                pincoord.Z.Value = Module.StageSupervisor().ProbeCardInfo.ProbeCardDevObjectRef.PinHeight;

                mccoord = Module.CoordinateManager().WaferHighChuckConvert.GetWaferPinAlignedPosition(wfcoord_next, pincoord);

                curPZ = Module.MotionManager().GetAxis(EnumAxisConstants.PZ).Status.Position.Ref;
                curZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                mccoord.T.Value = Module.WaferAligner().WaferAlignInfo.AlignAngle * 10000.0;

                if (curZ > mccoord.Z.Value)
                {
                    // Z down first
                    curX = Module.MotionManager().GetAxis(EnumAxisConstants.X).Status.Position.Ref;
                    curY = Module.MotionManager().GetAxis(EnumAxisConstants.Y).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(curX, curY, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    curZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;
                }
                else
                {
                    curZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZ, mccoord.T.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    curX = Module.MotionManager().GetAxis(EnumAxisConstants.X).Status.Position.Ref;
                    curY = Module.MotionManager().GetAxis(EnumAxisConstants.Y).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(curX, curY, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        //NotUseHeightProfile true로 사용하는 경우 zpos 값 제대로 넘겨주기 !
        protected EventCodeEnum WaferHighIndexMoveFunc(long machx, long machy, double zpos, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();
            WaferCoordinate wfcoord_next = new WaferCoordinate();
            WaferCoordinate wfcoord_offset = new WaferCoordinate();
            WaferCoordinate wfcoord_LL = new WaferCoordinate();

            double curX = 0;
            double curY = 0;
            double curZ = 0;
            double curPZ = 0;

            try
            {
                // 현재 좌표
                ICamera cam = Module.VisionManager().GetCam(EnumProberCam.WAFER_HIGH_CAM);
                MachineIndex mcoord = cam.GetCurCoordMachineIndex();
                long x = mcoord.XIndex;
                long y = mcoord.YIndex;

                // 현재 위치
                wfcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                // 현재 다이의 LL 위치
                wfcoord_LL = Module.WaferAligner().MachineIndexConvertToDieLeftCorner((int)x, (int)y);

                // 현재 다이에서 LL 까지의 거리
                wfcoord_offset.X.Value = wfcoord.X.Value - wfcoord_LL.X.Value;
                wfcoord_offset.Y.Value = wfcoord.Y.Value - wfcoord_LL.Y.Value;

                // 이동할 위치
                wfcoord_next = Module.WaferAligner().MachineIndexConvertToDieLeftCorner((int)machx, (int)machy);
                wfcoord_next.X.Value = wfcoord_next.X.Value + wfcoord_offset.X.Value;
                wfcoord_next.Y.Value = wfcoord_next.Y.Value + wfcoord_offset.Y.Value;

                if (NotUseHeightProfile)
                {
                    wfcoord_next.Z.Value = zpos;
                }

                //z 값이 안전한지
                if (wfcoord_next.Z.Value <= 0)
                {
                    wfcoord_next.Z.Value = Module.StageSupervisor().WaferObject.GetSubsInfo().ActualThickness;
                }
                else if (wfcoord_next.Z.Value > Module.StageSupervisor().WaferMaxThickness)
                {
                    wfcoord_next.Z.Value = Module.StageSupervisor().WaferMaxThickness;
                }

                LoggerManager.Debug($"WaferHighIndexMoveFunc(), IndexModeTargetPos X : [{wfcoord_next.X.Value:0.00}], Y : [{wfcoord_next.Y.Value:0.00}], Z : [{wfcoord_next.Z.Value:0.00}], NotUseHeightProfile : [{NotUseHeightProfile}]");

                mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord_next);

                curPZ = Module.MotionManager().GetAxis(EnumAxisConstants.PZ).Status.Position.Ref;
                curZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                mccoord.T.Value = Module.WaferAligner().WaferAlignInfo.AlignAngle * 10000.0;

                if (curZ > mccoord.Z.Value)
                {
                    // Z down first
                    curX = Module.MotionManager().GetAxis(EnumAxisConstants.X).Status.Position.Ref;
                    curY = Module.MotionManager().GetAxis(EnumAxisConstants.Y).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(curX, curY, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    curZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZ, mccoord.T.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    curZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZ, mccoord.T.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    curX = Module.MotionManager().GetAxis(EnumAxisConstants.X).Status.Position.Ref;
                    curY = Module.MotionManager().GetAxis(EnumAxisConstants.Y).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(curX, curY, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum WaferLowIndexMoveFunc(long machx, long machy, double zpos = 0.0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();
            WaferCoordinate wfcoord_next = new WaferCoordinate();
            WaferCoordinate wfcoord_offset = new WaferCoordinate();
            WaferCoordinate wfcoord_LL = new WaferCoordinate();

            double curX = 0;
            double curY = 0;
            double curZ = 0;
            double curPZ = 0;

            try
            {
                // 현재 좌표
                ICamera cam = Module.VisionManager().GetCam(EnumProberCam.WAFER_LOW_CAM);
                MachineIndex mcoord = cam.GetCurCoordMachineIndex();
                long x = mcoord.XIndex;
                long y = mcoord.YIndex;

                // 현재 위치
                wfcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                // 현재 다이의 LL 위치
                wfcoord_LL = Module.WaferAligner().MachineIndexConvertToDieLeftCorner((int)x, (int)y);
                wfcoord_LL.X.Value = wfcoord_LL.X.Value + Module.CoordinateManager().StageCoord.WLCAMFromWH.X.Value;
                wfcoord_LL.Y.Value = wfcoord_LL.Y.Value + Module.CoordinateManager().StageCoord.WLCAMFromWH.Y.Value;

                // 현재 다이에서 LL 까지의 거리
                wfcoord_offset.X.Value = wfcoord.X.Value - wfcoord_LL.X.Value;
                wfcoord_offset.Y.Value = wfcoord.Y.Value - wfcoord_LL.Y.Value;

                // 이동할 위치
                wfcoord_next = Module.WaferAligner().MachineIndexConvertToDieLeftCorner((int)machx, (int)machy);
                wfcoord_next.X.Value = wfcoord_next.X.Value + wfcoord_offset.X.Value + Module.CoordinateManager().StageCoord.WLCAMFromWH.X.Value;
                wfcoord_next.Y.Value = wfcoord_next.Y.Value + wfcoord_offset.Y.Value + Module.CoordinateManager().StageCoord.WLCAMFromWH.Y.Value;
                
                if (NotUseHeightProfile)
                {
                    wfcoord_next.Z.Value = zpos;
                }

                //z 값이 안전한지
                if (wfcoord_next.Z.Value <= 0)
                {
                    wfcoord_next.Z.Value = Module.StageSupervisor().WaferObject.GetSubsInfo().ActualThickness;
                }
                else if (wfcoord_next.Z.Value > Module.StageSupervisor().WaferMaxThickness)
                {
                    wfcoord_next.Z.Value = Module.StageSupervisor().WaferMaxThickness;
                }

                LoggerManager.Debug($"WaferLowIndexMoveFunc(), IndexModeTargetPos X : [{wfcoord_next.X.Value:0.00}], Y : [{wfcoord_next.Y.Value:0.00}], Z : [{wfcoord_next.Z.Value:0.00}], NotUseHeightProfile : [{NotUseHeightProfile}]");

                mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord_next);

                curPZ = Module.MotionManager().GetAxis(EnumAxisConstants.PZ).Status.Position.Ref;
                curZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                mccoord.T.Value = Module.WaferAligner().WaferAlignInfo.AlignAngle * 10000.0;

                if (curZ > mccoord.Z.Value)
                {
                    // Z down first
                    curX = Module.MotionManager().GetAxis(EnumAxisConstants.X).Status.Position.Ref;
                    curY = Module.MotionManager().GetAxis(EnumAxisConstants.Y).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(curX, curY, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    curZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZ, mccoord.T.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    curZ = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZ, mccoord.T.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    curX = Module.MotionManager().GetAxis(EnumAxisConstants.X).Status.Position.Ref;
                    curY = Module.MotionManager().GetAxis(EnumAxisConstants.Y).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(curX, curY, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum WaferHighViewMoveFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            double curX = 0;
            double curY = 0;
            double curZ = 0;
            double curPZ = 0;

            try
            {
                ret = MoveToPZClearance();

                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                switch (axis.AxisType.Value)
                {
                    case EnumAxisConstants.X:
                        wfcoord.X.Value = pos * -1;
                        mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);
                        curY = axisy.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(mccoord.X.Value, curY, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.X.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.Y:
                        wfcoord.Y.Value = pos * -1;
                        mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);

                        curX = axisx.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(curX, mccoord.Y.Value, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Y.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.Z:
                        double heightzpos = 0.0;
                        wfcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();
                        heightzpos = Module.WaferAligner().GetHeightValue(wfcoord.X.Value, wfcoord.Y.Value, true);
                        wfcoord.Z.Value = 1d * heightzpos;
                        mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);

                        curX = axisx.Status.Position.Ref;
                        curY = axisy.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(curX, curY, mccoord.Z.Value, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.C:
                        wfcoord.T.Value = pos * 10000d;
                        mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);
                        mccoord.T.Value = wfcoord.T.Value;
                        ret = Module.MotionManager().AbsMove(axis, mccoord.T.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                    default:
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                }

                LoggerManager.Debug($"WaferHighViewMoveFunc() : axis = {axis.Label} pos = {pos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum WaferLowViewMoveFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            double curX = 0;
            double curY = 0;
            double curZ = 0;
            double curPZ = 0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                switch (axis.AxisType.Value)
                {
                    case EnumAxisConstants.X:
                        wfcoord.X.Value = pos * -1;
                        mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                        curY = axisy.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(mccoord.X.Value, curY, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.X.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.Y:
                        wfcoord.Y.Value = pos * -1;
                        mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                        curX = axisx.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(curX, mccoord.Y.Value, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Y.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.Z:

                        wfcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();
                        wfcoord.Z.Value = pos;
                        mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                        curX = axisx.Status.Position.Ref;
                        curY = axisy.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(curX, curY, mccoord.Z.Value, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.C:
                        wfcoord.T.Value = pos * 10000d;
                        mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.T.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                    default:
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                }

                LoggerManager.Debug($"WaferLowViewMoveFunc() : axis = {axis.Label} pos = {pos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }
            return ret;

        }
        protected EventCodeEnum CardViewMoveFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            double curX = 0;
            double curY = 0;
            double curZ = 0;
            double curPZ = 0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                switch (axis.AxisType.Value)
                {
                    case EnumAxisConstants.X:
                        wfcoord.X.Value = pos * -1;
                        mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                        curY = axisy.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference_GPCC(mccoord.X.Value, curY, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.X.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                    case EnumAxisConstants.Y:
                        wfcoord.Y.Value = pos * -1;
                        mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                        curX = axisx.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference_GPCC(curX, mccoord.Y.Value, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Y.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.Z:

                        wfcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();
                        wfcoord.Z.Value = pos;
                        mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                        curX = axisx.Status.Position.Ref;
                        curY = axisy.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference_GPCC(curX, curY, mccoord.Z.Value, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.C:
                        wfcoord.T.Value = pos * 10000d;
                        mccoord = Module.CoordinateManager().WaferLowChuckConvert.ConvertBack(wfcoord);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.T.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                    default:
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                }

                LoggerManager.Debug($"CardViewMoveFunc() : axis = {axis.Label} pos = {pos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }
            return ret;

        }
        protected EventCodeEnum PinHighViewMoveFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            double curX = 0;
            double curY = 0;
            double curZ = 0;
            double curPZ = 0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                switch (axis.AxisType.Value)
                {
                    case EnumAxisConstants.X:
                        pincoord.X.Value = pos;
                        mccoord = Module.CoordinateManager().PinHighPinConvert.ConvertBack(pincoord);

                        curY = axisy.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(mccoord.X.Value, curY, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.X.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                    case EnumAxisConstants.Y:
                        pincoord.Y.Value = pos;
                        mccoord = Module.CoordinateManager().PinHighPinConvert.ConvertBack(pincoord);

                        curX = axisx.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(curX, mccoord.Y.Value, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Y.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                    case EnumAxisConstants.PZ:
                        pincoord.Z.Value = pos;
                        mccoord = Module.CoordinateManager().PinHighPinConvert.ConvertBack(pincoord);

                        curX = axisx.Status.Position.Ref;
                        curY = axisy.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(curX, curY, curZ, mccoord.Z.Value);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                    case EnumAxisConstants.C:
                        pincoord.T.Value = pos * 10000d;
                        mccoord = Module.CoordinateManager().PinHighPinConvert.ConvertBack(pincoord);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.T.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    default:
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                }

                LoggerManager.Debug($"PinHighViewMoveFunc() : axis = {axis.Label} pos = {pos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum PinLowViewMoveFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            PinCoordinate pincoord = new PinCoordinate();

            double curX = 0;
            double curY = 0;
            double curZ = 0;
            double curPZ = 0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                switch (axis.AxisType.Value)
                {
                    case EnumAxisConstants.X:
                        pincoord.X.Value = pos * -1;
                        mccoord = Module.CoordinateManager().PinLowPinConvert.ConvertBack(pincoord);

                        curY = axisy.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(mccoord.X.Value, curY, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.X.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                    case EnumAxisConstants.Y:
                        pincoord.Y.Value = pos * -1;
                        mccoord = Module.CoordinateManager().PinLowPinConvert.ConvertBack(pincoord);

                        curX = axisx.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;
                        curPZ = axispz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(curX, mccoord.Y.Value, curZ, curPZ);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Y.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.PZ:
                        pincoord.Z.Value = pos;
                        mccoord = Module.CoordinateManager().PinLowPinConvert.ConvertBack(pincoord);

                        curX = axisx.Status.Position.Ref;
                        curY = axisy.Status.Position.Ref;
                        curZ = axisz.Status.Position.Ref;

                        ret = Module.CheckHardwareInterference(curX, curY, curZ, mccoord.Z.Value);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        break;
                    case EnumAxisConstants.C:
                        pincoord.T.Value = pos * 10000d;
                        mccoord = Module.CoordinateManager().PinLowPinConvert.ConvertBack(pincoord);

                        ret = Module.MotionManager().AbsMove(axis, mccoord.T.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                    default:
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        break;
                }

                LoggerManager.Debug($"PinLowViewMoveFunc() : axis = {axis.Label} pos = {pos}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        private double Distance2D(double x1, double y1, double x2, double y2)
        {
            return Math.Sqrt(Math.Pow((x2 - x1), 2) + Math.Pow((y2 - y1), 2));
        }

        protected EventCodeEnum MovePadToPinFunc(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            double curZpos = 0.0;
            double curPZ = 0;

            MachineCoordinate mccoord = new MachineCoordinate();

            double twistZ = 0.0;
            double SqrForProbe = 0.0;
            double deflectX = 0.0;
            double deflectY = 0.0;
            double inclineZhor = 0.0;
            double inclineZver = 0.0;
            double inclineZ = 0.0;

            double[] pointD = new double[4];

            pointD[0] = 0;
            pointD[1] = 0;
            pointD[2] = 0;
            pointD[3] = 0;

            MachineCoordinate[] tmpPoint = new MachineCoordinate[3];
            CatCoordinates PMshift = new CatCoordinates();
            //PMTEmpShitft는 Z값은 넣으면 안댐
            CatCoordinates PMTempShift = new CatCoordinates();

            for (int i = 0; i < tmpPoint.Length; i++)
            {
                tmpPoint[i] = new MachineCoordinate();
            }

            // Prevent SW Limit. Required fix!!!!!!!!!
            //if (Extensions_IParam.ProberRunMode == RunMode.EMUL)
            //{
            //    pinoffset.X.Value = 0;
            //    pinoffset.Y.Value = 0;
            //    pinoffset.Z.Value = -3000;
            //}

            try
            {
                mccoord = Module.CoordinateManager().WaferHighChuckConvert.GetWaferPinAlignedPosition(waferoffset, pinoffset);
                zclearance = Math.Abs(zclearance);
                mccoord.Z.Value = mccoord.Z.Value + (zclearance * -1);
                curZpos = axisz.Status.Position.Ref;

                // Twist 적용
                twistZ = Module.ProbingModule().GetTwistValue();

                // Squareness for Probe 적용   
                SqrForProbe = Module.ProbingModule().GetSquarenceValue();
                SqrForProbe = mccoord.Y.Value * SqrForProbe / 1000000;  // 미터당 Y 위치 변화에 따른 X 보상량

                // DeflectX/Y 적용
                deflectX = Module.ProbingModule().GetDeflectX();
                deflectY = Module.ProbingModule().GetDeflectY();

                deflectX = mccoord.X.Value * deflectX / 1000000;
                deflectY = mccoord.Y.Value * deflectY / 1000000;

                // 마크 시프트 적용
                PMshift = Module.ProbingModule().GetPMShifhtValue();

                PMTempShift = Module.ProbingModule().GetSetTemperaturePMShifhtValue();

                if (PMTempShift == null)
                {
                    PMTempShift = new CatCoordinates(0, 0, 0, 0);
                }

                // Incline Z 적용  (카드 홀더 센터에서 상하좌우로 움직일때마다 거리에 비례하여 Z 축이 쳐지거나 올라가는 양 보상)
                inclineZhor = Module.ProbingModule().GetInclineZHor();
                //inclineZhor = Math.Abs(mccoord.X.Value) * inclineZhor / 1000000;

                inclineZver = Module.ProbingModule().GetInclineZVer();
                //inclineZver = Math.Abs(mccoord.Y.Value) * inclineZver / 1000000;

                // 엔코더 좌표계 센터
                tmpPoint[0] = new MachineCoordinate();
                tmpPoint[0].X.Value = 0;
                tmpPoint[0].Y.Value = 0;
                tmpPoint[0].Z.Value = 0;

                // Hor 값 적용
                tmpPoint[1] = new MachineCoordinate();
                tmpPoint[1].X.Value = (mccoord.X.Value > 0) ? 1000000 : -1000000; // mccoord.X.Value;
                tmpPoint[1].Y.Value = 0;
                tmpPoint[1].Z.Value = inclineZhor;

                // Ver 값 적용
                tmpPoint[2] = new MachineCoordinate();
                tmpPoint[2].X.Value = 0;
                tmpPoint[2].Y.Value = (mccoord.Y.Value > 0) ? 1000000 : -1000000; // mccoord.Y.Value;
                tmpPoint[2].Z.Value = inclineZver;

                // 평면좌표에서 대각선 위치 높이 보상값 계산
                pointD[0] = tmpPoint[0].Y.Value * (tmpPoint[1].Z.Value - tmpPoint[2].Z.Value) +
                            tmpPoint[1].Y.Value * (tmpPoint[2].Z.Value - tmpPoint[0].Z.Value) +
                            tmpPoint[2].Y.Value * (tmpPoint[0].Z.Value - tmpPoint[1].Z.Value);

                pointD[1] = tmpPoint[0].Z.Value * (tmpPoint[1].X.Value - tmpPoint[2].X.Value) +
                            tmpPoint[1].Z.Value * (tmpPoint[2].X.Value - tmpPoint[0].X.Value) +
                            tmpPoint[2].Z.Value * (tmpPoint[0].X.Value - tmpPoint[1].X.Value);

                pointD[2] = tmpPoint[0].X.Value * (tmpPoint[1].Y.Value - tmpPoint[2].Y.Value) +
                            tmpPoint[1].X.Value * (tmpPoint[2].Y.Value - tmpPoint[0].Y.Value) +
                            tmpPoint[2].X.Value * (tmpPoint[0].Y.Value - tmpPoint[1].Y.Value);

                pointD[3] = -tmpPoint[0].X.Value * ((tmpPoint[1].Y.Value * tmpPoint[2].Z.Value) - (tmpPoint[2].Y.Value * tmpPoint[1].Z.Value)) -
                             tmpPoint[1].X.Value * ((tmpPoint[2].Y.Value * tmpPoint[0].Z.Value) - (tmpPoint[0].Y.Value * tmpPoint[2].Z.Value)) -
                             tmpPoint[2].X.Value * ((tmpPoint[0].Y.Value * tmpPoint[1].Z.Value) - (tmpPoint[1].Y.Value * tmpPoint[0].Z.Value));

                if (pointD[2] != 0)
                {
                    inclineZ = -(pointD[0] * mccoord.X.Value + pointD[1] * mccoord.Y.Value + pointD[3]) / pointD[2];
                }
                else
                {
                    inclineZ = 0.0;
                }

                VirtualStageConnector.VirtualStageConnector.Instance.SetProbingOffset
                    (new ProbingOffset(
                        twistZ: twistZ,
                        sqrForProbe: SqrForProbe,
                        deflectX: deflectX,
                        deflectY: deflectY,
                        inclineZ: inclineZ,
                        pmShiftX: PMshift.X.Value,
                        pmShiftY: PMshift.Y.Value,
                        pmShiftZ: PMshift.Z.Value,
                        pmShiftT: PMshift.T.Value,
                        pmTempShiftX: PMTempShift.X.Value,
                        pmTempShiftY: PMTempShift.Y.Value,
                        pmTempShiftT: PMTempShift.T.Value
                        ));

                LoggerManager.Debug($"Probing offset : twist({twistZ}), squareness({SqrForProbe}), deflectX({deflectX}), deflectY({deflectY}), inclineZ({inclineZ}), PMShiftX: {PMshift.X.Value}, PMShiftY: {PMshift.Y.Value}, PMShiftZ: {PMshift.Z.Value}, PMShiftT: {PMshift.T.Value}", isInfo: IsInfo);

                LoggerManager.Debug($"Probing offset : PMTempShift X: {PMTempShift.X.Value}, PMTempShift Y:{PMTempShift.Y.Value}, PMTempShift T:{PMTempShift.T.Value}", isInfo: IsInfo);

                mccoord.X.Value = mccoord.X.Value + deflectX + SqrForProbe + PMshift.X.Value + PMTempShift.X.Value;
                mccoord.Y.Value = mccoord.Y.Value + deflectY + PMshift.Y.Value + PMTempShift.Y.Value;
                mccoord.Z.Value = mccoord.Z.Value + inclineZ + PMshift.Z.Value;
                mccoord.T.Value = mccoord.T.Value + twistZ + PMshift.T.Value + PMTempShift.T.Value;

                curPZ = axispz.Status.Position.Ref;

                LoggerManager.Debug($"MccordPos(X:{mccoord.X.Value}, Y:{mccoord.Y.Value}, Z:{mccoord.Z.Value}, T:{mccoord.T.Value})", isInfo: IsInfo);

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double distanceFromCenter = 0;
                distanceFromCenter = Distance2D(0, 0, mccoord.X.Value, mccoord.Y.Value);

                if (curZpos > mccoord.Z.Value)
                {
                    ret = Module.MotionManager().AbsMove(EnumAxisConstants.Z, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    curZpos = Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref;

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZpos, mccoord.T.Value, EnumTrjType.Probing);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZpos, mccoord.T.Value, EnumTrjType.Probing);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(EnumAxisConstants.Z, mccoord.Z.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                double posX = 0;
                double posY = 0;
                double posZ = 0;
                double posT = 0;

                Module.MotionManager().GetActualPos(EnumAxisConstants.X, ref posX);
                Module.MotionManager().GetActualPos(EnumAxisConstants.Y, ref posY);
                Module.MotionManager().GetActualPos(EnumAxisConstants.Z, ref posZ);
                Module.MotionManager().GetActualPos(EnumAxisConstants.C, ref posT);

                if (axisz.GroupMembers.Count == 3)
                {
                    LoggerManager.Debug($"Z group members actual position = Z0:{axisz.GroupMembers[0].Status.RawPosition.Actual:0.00}, Z1:{axisz.GroupMembers[1].Status.RawPosition.Actual:0.00}, Z2:{axisz.GroupMembers[2].Status.RawPosition.Actual:0.00}", isInfo: IsInfo);
                }

                LoggerManager.Debug($" Current probing position(Actual) = ({posX}, {posY}, {posZ}, {posT})", isInfo: IsInfo);

                Module.MotionManager().GetRefPos(EnumAxisConstants.X, ref posX);
                Module.MotionManager().GetRefPos(EnumAxisConstants.Y, ref posY);
                Module.MotionManager().GetRefPos(EnumAxisConstants.Z, ref posZ);
                Module.MotionManager().GetRefPos(EnumAxisConstants.C, ref posT);

                LoggerManager.Debug($" Current probing position(Ref) = ({posX}, {posY}, {posZ}, {posT})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum ProbingZDOWNFunc(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            MachineCoordinate mccoord = new MachineCoordinate();

            double inclineZhor = 0.0;
            double inclineZver = 0.0;
            double inclineZ = 0.0;
            double[] pointD = new double[4];
            pointD[0] = 0;
            pointD[1] = 0;
            pointD[2] = 0;
            pointD[3] = 0;

            MachineCoordinate[] tmpPoint = new MachineCoordinate[3];
            CatCoordinates PMshift = new CatCoordinates();
            CatCoordinates PMTempshift = new CatCoordinates();

            try
            {
                if (zclearance > 0)
                {
                    ret = EventCodeEnum.PARAM_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    mccoord = Module.CoordinateManager().WaferHighChuckConvert.GetWaferPinAlignedPosition(wafercoord, pincoord);

                    if (Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Count > 0)
                    {
                        var maxTiltValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Max();

                        if (maxTiltValue > 0)
                        {
                            mccoord.Z.Value = mccoord.Z.Value + zclearance - maxTiltValue;
                        }
                        else
                        {
                            mccoord.Z.Value = mccoord.Z.Value + zclearance;
                        }
                    }
                    else
                    {
                        mccoord.Z.Value = mccoord.Z.Value + zclearance;
                    }

                    // 마크 시프트 적용
                    PMshift = Module.ProbingModule().GetPMShifhtValue();

                    // Incline Z 적용  (카드 홀더 센터에서 상하좌우로 움직일때마다 거리에 비례하여 Z 축이 쳐지거나 올라가는 양 보상)
                    inclineZhor = Module.ProbingModule().GetInclineZHor();
                    //inclineZhor = Math.Abs(mccoord.X.Value) * inclineZhor / 1000000;

                    inclineZver = Module.ProbingModule().GetInclineZVer();
                    //inclineZver = Math.Abs(mccoord.Y.Value) * inclineZver / 1000000;

                    // 엔코더 좌표계 센터
                    tmpPoint[0] = new MachineCoordinate();
                    tmpPoint[0].X.Value = 0;
                    tmpPoint[0].Y.Value = 0;
                    tmpPoint[0].Z.Value = 0;

                    // Hor 값 적용
                    tmpPoint[1] = new MachineCoordinate();
                    tmpPoint[1].X.Value = (mccoord.X.Value > 0) ? 1000000 : -1000000; // mccoord.X.Value;
                    tmpPoint[1].Y.Value = 0;
                    tmpPoint[1].Z.Value = inclineZhor;

                    // Ver 값 적용
                    tmpPoint[2] = new MachineCoordinate();
                    tmpPoint[2].X.Value = 0;
                    tmpPoint[2].Y.Value = (mccoord.Y.Value > 0) ? 1000000 : -1000000; // mccoord.Y.Value;
                    tmpPoint[2].Z.Value = inclineZver;

                    // 평면좌표에서 대각선 위치 높이 보상값 계산
                    pointD[0] = tmpPoint[0].Y.Value * (tmpPoint[1].Z.Value - tmpPoint[2].Z.Value) +
                                tmpPoint[1].Y.Value * (tmpPoint[2].Z.Value - tmpPoint[0].Z.Value) +
                                tmpPoint[2].Y.Value * (tmpPoint[0].Z.Value - tmpPoint[1].Z.Value);

                    pointD[1] = tmpPoint[0].Z.Value * (tmpPoint[1].X.Value - tmpPoint[2].X.Value) +
                                tmpPoint[1].Z.Value * (tmpPoint[2].X.Value - tmpPoint[0].X.Value) +
                                tmpPoint[2].Z.Value * (tmpPoint[0].X.Value - tmpPoint[1].X.Value);

                    pointD[2] = tmpPoint[0].X.Value * (tmpPoint[1].Y.Value - tmpPoint[2].Y.Value) +
                                tmpPoint[1].X.Value * (tmpPoint[2].Y.Value - tmpPoint[0].Y.Value) +
                                tmpPoint[2].X.Value * (tmpPoint[0].Y.Value - tmpPoint[1].Y.Value);

                    pointD[3] = -tmpPoint[0].X.Value * ((tmpPoint[1].Y.Value * tmpPoint[2].Z.Value) - (tmpPoint[2].Y.Value * tmpPoint[1].Z.Value)) -
                                 tmpPoint[1].X.Value * ((tmpPoint[2].Y.Value * tmpPoint[0].Z.Value) - (tmpPoint[0].Y.Value * tmpPoint[2].Z.Value)) -
                                 tmpPoint[2].X.Value * ((tmpPoint[0].Y.Value * tmpPoint[1].Z.Value) - (tmpPoint[1].Y.Value * tmpPoint[0].Z.Value));

                    if (pointD[2] != 0)
                    {
                        inclineZ = -(pointD[0] * mccoord.X.Value + pointD[1] * mccoord.Y.Value + pointD[3]) / pointD[2];
                    }
                    else
                    {
                        inclineZ = 0.0;
                    }

                    LoggerManager.Debug($"Probing z down offset : inclineZ({inclineZ}), PMShiftX{PMshift.X.Value}, PMShiftY{PMshift.Y.Value}, PMShiftZ{PMshift.Z.Value}, PMShiftT{PMshift.T.Value}", isInfo: IsInfo);

                    mccoord.Z.Value = mccoord.Z.Value + inclineZ + PMshift.Z.Value;

                    double curX = 0;
                    double curY = 0;
                    double curPZ = 0;

                    curX = axisx.Status.Position.Ref;
                    curY = axisy.Status.Position.Ref;
                    curPZ = axispz.Status.Position.Ref;

                    ret = Module.CheckHardwareInterference(curX, curY, mccoord.Z.Value, curPZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    var z0Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z0);
                    var z1Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z1);
                    var z2Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z2);

                    if (Module.StageSupervisor().ProbeCardInfo.AlignState.Value == AlignStateEnum.DONE)
                    {
                        if (Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Count != 3)
                        {
                            Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                            Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                            Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                        }
                        z0Axis.Status.CompValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[0];
                        z1Axis.Status.CompValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[1];
                        z2Axis.Status.CompValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[2];
                    }
                    else
                    {
                        z0Axis.Status.CompValue = 0;
                        z1Axis.Status.CompValue = 0;
                        z2Axis.Status.CompValue = 0;
                    }

                    ret = Module.MotionManager().AbsMove(zaxis, mccoord.Z.Value, zaxis.Param.Speed.Value,
                    zaxis.Param.Acceleration.Value);

                    var IORet = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOZUPLAMPON, true);

                    if (!(IORet == IORet.NO_ERR))
                    {

                    }
                    else
                    {
                        LoggerManager.Debug($"PDS Activated - Chuck discharging...");
                    }

                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"ProbingZDOWNFunc");

                Module.MotionManager().CalcZTorque(true);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum ProbingZDOWNFunc(NCCoordinate nccoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            MachineCoordinate mccoord = new MachineCoordinate();

            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                if (zclearance > 0)
                {
                    ret = EventCodeEnum.PARAM_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                }
                else
                {
                    mccoord = Module.CoordinateManager().WaferHighNCPadConvert.GetNCPadPinAlignedPosition(nccoord, pincoord);

                    mccoord.Z.Value = mccoord.Z.Value + zclearance;

                    if (overdrive < 0)
                    {
                        mccoord.Z.Value += overdrive;
                    }

                    double curX = 0;
                    double curY = 0;
                    double curPZ = 0;

                    curX = axisx.Status.Position.Ref;
                    curY = axisy.Status.Position.Ref;
                    curPZ = axispz.Status.Position.Ref;

                    ret = Module.CheckHardwareInterference(curX, curY, mccoord.Z.Value, curPZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, mccoord.Z.Value, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);

                    if (ret != EventCodeEnum.NONE)
                    {
                        LoggerManager.Error($"ProbingZDOWNFunc: Error occurred while Probing ZDown.");
                        ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    }
                }

                var IORet = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOZUPLAMPON, true);

                if (!(IORet == IORet.NO_ERR))
                {

                }
                else
                {
                    LoggerManager.Debug($"PDS Activated - Chuck discharging...");
                }

                LoggerManager.Debug($"ProbingZDOWNFunc");

                Module.MotionManager().CalcZTorque(true);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum ProbingZUPFunc(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, ProbingSpeedRateList SpeedRateList = null)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            MachineCoordinate mccoord = new MachineCoordinate();

            double inclineZhor = 0.0;
            double inclineZver = 0.0;
            double inclineZ = 0.0;

            double[] pointD = new double[4];
            pointD[0] = 0;
            pointD[1] = 0;
            pointD[2] = 0;
            pointD[3] = 0;

            MachineCoordinate[] tmpPoint = new MachineCoordinate[3];
            CatCoordinates PMshift = new CatCoordinates();

            try
            {
                mccoord = Module.CoordinateManager().WaferHighChuckConvert.GetWaferPinAlignedPosition(wafercoord, pincoord);

                LoggerManager.Debug($"Probing Wafer Pin Aligned Position X : {mccoord.GetX()}, Y : {mccoord.GetY()}, Z : {mccoord.GetZ()}, T : {mccoord.GetT()}", isInfo: IsInfo);

                // Limit overdrive to -1000.0 for dry run. Remove before release!!!
                //overdrive = -900;

                double zpos = mccoord.Z.Value + overdrive;

                double curX = 0;
                double curY = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                // 마크 시프트 적용
                PMshift = Module.ProbingModule().GetPMShifhtValue();
                // Incline Z 적용  (카드 홀더 센터에서 상하좌우로 움직일때마다 거리에 비례하여 Z 축이 쳐지거나 올라가는 양 보상)
                inclineZhor = Module.ProbingModule().GetInclineZHor();
                //inclineZhor = Math.Abs(mccoord.X.Value) * inclineZhor / 1000000;

                inclineZver = Module.ProbingModule().GetInclineZVer();
                //inclineZver = Math.Abs(mccoord.Y.Value) * inclineZver / 1000000;

                // 엔코더 좌표계 센터
                tmpPoint[0] = new MachineCoordinate();
                tmpPoint[0].X.Value = 0;
                tmpPoint[0].Y.Value = 0;
                tmpPoint[0].Z.Value = 0;

                // Hor 값 적용
                tmpPoint[1] = new MachineCoordinate();
                tmpPoint[1].X.Value = (mccoord.X.Value > 0) ? 1000000 : -1000000; // mccoord.X.Value;
                tmpPoint[1].Y.Value = 0;
                tmpPoint[1].Z.Value = inclineZhor;

                // Ver 값 적용
                tmpPoint[2] = new MachineCoordinate();
                tmpPoint[2].X.Value = 0;
                tmpPoint[2].Y.Value = (mccoord.Y.Value > 0) ? 1000000 : -1000000; // mccoord.Y.Value;
                tmpPoint[2].Z.Value = inclineZver;

                // 평면좌표에서 대각선 위치 높이 보상값 계산
                pointD[0] = tmpPoint[0].Y.Value * (tmpPoint[1].Z.Value - tmpPoint[2].Z.Value) +
                            tmpPoint[1].Y.Value * (tmpPoint[2].Z.Value - tmpPoint[0].Z.Value) +
                            tmpPoint[2].Y.Value * (tmpPoint[0].Z.Value - tmpPoint[1].Z.Value);

                pointD[1] = tmpPoint[0].Z.Value * (tmpPoint[1].X.Value - tmpPoint[2].X.Value) +
                            tmpPoint[1].Z.Value * (tmpPoint[2].X.Value - tmpPoint[0].X.Value) +
                            tmpPoint[2].Z.Value * (tmpPoint[0].X.Value - tmpPoint[1].X.Value);

                pointD[2] = tmpPoint[0].X.Value * (tmpPoint[1].Y.Value - tmpPoint[2].Y.Value) +
                            tmpPoint[1].X.Value * (tmpPoint[2].Y.Value - tmpPoint[0].Y.Value) +
                            tmpPoint[2].X.Value * (tmpPoint[0].Y.Value - tmpPoint[1].Y.Value);

                pointD[3] = -tmpPoint[0].X.Value * ((tmpPoint[1].Y.Value * tmpPoint[2].Z.Value) - (tmpPoint[2].Y.Value * tmpPoint[1].Z.Value)) -
                             tmpPoint[1].X.Value * ((tmpPoint[2].Y.Value * tmpPoint[0].Z.Value) - (tmpPoint[0].Y.Value * tmpPoint[2].Z.Value)) -
                             tmpPoint[2].X.Value * ((tmpPoint[0].Y.Value * tmpPoint[1].Z.Value) - (tmpPoint[1].Y.Value * tmpPoint[0].Z.Value));

                if (pointD[2] != 0)
                {
                    inclineZ = -(pointD[0] * mccoord.X.Value + pointD[1] * mccoord.Y.Value + pointD[3]) / pointD[2];
                }
                else
                {
                    inclineZ = 0.0;
                }

                LoggerManager.Debug($"Probing z up offset : inclineZ({inclineZ}), PMShiftX{PMshift.X.Value}, PMShiftY{PMshift.Y.Value}, PMShiftZ{PMshift.Z.Value}, PMShiftT{PMshift.T.Value}", isInfo: IsInfo);

                zpos = zpos + inclineZ + PMshift.Z.Value;

                ret = Module.CheckHardwareInterference(curX, curY, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                LoggerManager.Debug($"Before Z Up: Z@{Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref}", isInfo: IsInfo);

                double z0, z1, z2;

                Module.ProbingModule().GetCPCValues(zpos, out z0, out z1, out z2);

                var z0Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z0);
                var z1Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z1);
                var z2Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z2);

                if (Module.StageSupervisor().ProbeCardInfo.AlignState.Value == AlignStateEnum.DONE)
                {
                    if (Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Count != 3)
                    {
                        Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                        Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                        Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                    }

                    z0Axis.Status.CompValue = z0 + Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[0];
                    z1Axis.Status.CompValue = z1 + Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[1];
                    z2Axis.Status.CompValue = z2 + Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[2];
                }
                else
                {
                    z0Axis.Status.CompValue = z0;
                    z1Axis.Status.CompValue = z1;
                    z2Axis.Status.CompValue = z2;
                }

                LoggerManager.Debug($"Z Up(): Tilt values: Z0 = {z0Axis.Status.CompValue}, Z1 = {z1Axis.Status.CompValue}, Z2 = {z2Axis.Status.CompValue}", isInfo: IsInfo);

                var IORet = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOZUPLAMPON, false);

                if (!(IORet == IORet.NO_ERR))
                {

                }
                else
                {
                    LoggerManager.Debug($"PDS Deactivated. Chuck isolated.");
                }

                if (SpeedRateList == null)
                {
                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                }
                else
                {
                    ret = Module.MotionManager().AbsMoveWithSpeedRate(zaxis, mccoord.Z.Value, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value, SpeedRateList);
                }

                // TODO : 

                VirtualStageConnector.VirtualStageConnector.Instance.SetOverdrive(overdrive);
                VirtualStageConnector.VirtualStageConnector.Instance.SendTCPCommand(TCPCommand.VIRTUAL_PROBING_ON);

                LoggerManager.Debug($"After Z Up: Z : {Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref}", isInfo: IsInfo);

                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double posX = 0;
                double posY = 0;
                double posZ = 0;
                double posT = 0;

                Module.MotionManager().GetActualPos(EnumAxisConstants.X, ref posX);
                Module.MotionManager().GetActualPos(EnumAxisConstants.Y, ref posY);
                Module.MotionManager().GetActualPos(EnumAxisConstants.Z, ref posZ);
                Module.MotionManager().GetActualPos(EnumAxisConstants.C, ref posT);

                if (zaxis.GroupMembers.Count == 3)
                {
                    LoggerManager.Debug($"Z group members actual position = Z0:{zaxis.GroupMembers[0].Status.RawPosition.Actual:0.00}, Z1:{zaxis.GroupMembers[1].Status.RawPosition.Actual:0.00}, Z2:{zaxis.GroupMembers[2].Status.RawPosition.Actual:0.00}", isInfo: IsInfo);
                }

                LoggerManager.Debug($"Probing Z UP position = ({posX:0.00}, {posY:0.00}, {posZ:0.00}, {posT:0.00000}), OverDrive:{overdrive:0.00}", isInfo: IsInfo);

                Module.MotionManager().CalcZTorque(true);

                #region ==> Multiple Contact

                if (Module.StageSupervisor().WaferObject.GetWaferType() == EnumWaferType.STANDARD)  
                {
                    ProbingModuleDevParam probingDevParam = null;
                    probingDevParam = Module.ProbingModule().ProbingModuleDevParam_IParam as ProbingModuleDevParam;

                    int multiContactCnt = probingDevParam.MultipleContactCount.Value;

                    double backOD = probingDevParam.MultipleContactBackOD.Value;   // -70
                    double backODValue = 0.0;
                    double originOD = probingDevParam.OverDrive.Value;
                    double allContactHeight = Module.ProbingModule().AllContactHeight;
                    double firstContactHeight = Module.ProbingModule().FirstContactHeight;
                    double multipleContactOD = probingDevParam.MultipleContactOD.Value;
                    double multipleContactSpped = probingDevParam.MultipleContactSpeed.Value;
                    double multipleContactAccel = probingDevParam.MultipleContactAccel.Value;
                    double odLimit = probingDevParam.OverdriveUpperLimit.Value;
                    double odLimitPos = mccoord.Z.Value + odLimit;

                    MultipleContactBackODOptionEnum contactMode = probingDevParam.MultipleContactBackODOption.Value;
                    int delayTime = Convert.ToInt32(probingDevParam.MultipleContactDelayTime.Value);

                    if (multiContactCnt > 0 && multiContactCnt <= 10)
                    {
                        LoggerManager.Debug($"ProbingZUPFunc() MultipleContatctCount Start. Mode : {contactMode.ToString()}", isInfo: IsInfo);

                        switch (contactMode)
                        {
                            case MultipleContactBackODOptionEnum.BackODFromProbingOD:
                                backODValue = Math.Abs(backOD); // 70
                                break;
                            case MultipleContactBackODOptionEnum.BackODFromAllContact:
                                backODValue = Math.Abs(backOD) + Math.Abs(originOD - allContactHeight); // 70 + (100-70)30 = 100
                                break;
                            case MultipleContactBackODOptionEnum.BackODFromFirstContact:
                                backODValue = Math.Abs(backOD) + Math.Abs(originOD - firstContactHeight); // 70 + (100-50)50 = 120 
                                break;
                            default:
                                break;
                        }

                        for (int i = 0; i < multiContactCnt; i++)
                        {
                            // backODValue 만큼 내림
                            if (i == 0)
                            {
                                // 첫번째 move to backODPos는 multipleContactOD 값이 적용된 zup상태가 아니였기 때문에, 내려가는 zpos 값에 offset을 빼줄 필요가 없다.
                                zpos = zpos - backODValue;
                            }
                            else
                            {
                                // 두번째 move to backODPos는 multipleContactOD 값이 적용된 zup상태이기 때문에, 내려가는 zpos 값에 multipleContactOD 만큼 빼줄 필요가 있다.
                                zpos = zpos - backODValue - multipleContactOD;
                            }

                            if (zpos > odLimitPos)
                            {
                                LoggerManager.Debug($"(MultipleContact cnt({i + 1})) Taget zpos is over than ODLimit");

                                ret = EventCodeEnum.PROBING_Z_LIMIT_ERROR;

                                return ret;
                            }

                            ret = Module.CheckHardwareInterference(curX, curY, zpos, curPZ);
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);

                            LoggerManager.Debug($"(MultipleContact cnt({i + 1})) before move to BackOD Pos: Z@{Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref}", isInfo: IsInfo);

                            ret = Module.MotionManager().AbsMove(zaxis, zpos, multipleContactSpped, multipleContactAccel); //내림

                            if (delayTime < 0 || delayTime > 5000)
                            {
                                LoggerManager.Debug($"MultipleContactDelayTime is wrong, time: {delayTime}");
                            }
                            else
                            {
                                Thread.Sleep(delayTime);
                            }

                            Module.MotionManager().GetActualPos(EnumAxisConstants.X, ref posX);
                            Module.MotionManager().GetActualPos(EnumAxisConstants.Y, ref posY);
                            Module.MotionManager().GetActualPos(EnumAxisConstants.Z, ref posZ);
                            Module.MotionManager().GetActualPos(EnumAxisConstants.C, ref posT);

                            LoggerManager.Debug($"(MultipleContact cnt({i + 1}))BackOD position = ({posX}, {posY}, {posZ}, {posT})", isInfo: IsInfo);

                            // 기본OD + MultipleContactOD 만큼 올림.
                            zpos = mccoord.Z.Value + overdrive + inclineZ + PMshift.Z.Value + multipleContactOD;

                            if (zpos > odLimitPos)
                            {
                                LoggerManager.Debug($"(MultipleContact cnt({i + 1})) Taget zpos is over than ODLimit");

                                ret = EventCodeEnum.PROBING_Z_LIMIT_ERROR;

                                return ret;
                            }

                            ret = Module.CheckHardwareInterference(curX, curY, zpos, curPZ);
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);

                            LoggerManager.Debug($"(MultipleContact cnt({i + 1})) before move to MultipleContact Pos: Z@{Module.MotionManager().GetAxis(EnumAxisConstants.Z).Status.Position.Ref}", isInfo: IsInfo);

                            ret = Module.MotionManager().AbsMove(zaxis, zpos, multipleContactSpped, multipleContactAccel); //올림

                            Module.MotionManager().GetActualPos(EnumAxisConstants.X, ref posX);
                            Module.MotionManager().GetActualPos(EnumAxisConstants.Y, ref posY);
                            Module.MotionManager().GetActualPos(EnumAxisConstants.Z, ref posZ);
                            Module.MotionManager().GetActualPos(EnumAxisConstants.C, ref posT);

                            LoggerManager.Debug($"(MultipleContact cnt({i + 1}))BackOD position = ({posX}, {posY}, {posZ}, {posT})", isInfo: IsInfo);
                        }

                        LoggerManager.Debug($"ProbingZUPFunc() MultipleContatctCount End.");
                    }
                }
                else
                {
                    LoggerManager.Debug($"ProbingZUPFunc() MultipleContatct not working. Wafer Type : {Module.StageSupervisor().WaferObject.GetWaferType()}");
                }
                
                #endregion
            }
            catch (Exception err)
            {
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum ProbingZUPFunc(NCCoordinate nccoord, PinCoordinate pincoord, double overdrive)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            MachineCoordinate mccoord = new MachineCoordinate();

            try
            {
                mccoord = Module.CoordinateManager().WaferHighNCPadConvert.GetNCPadPinAlignedPosition(nccoord, pincoord);

                double zpos = mccoord.Z.Value + overdrive;

                double curX = 0;
                double curY = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(curX, curY, mccoord.Z.Value, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var IORet = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOZUPLAMPON, false);

                if (!(IORet == IORet.NO_ERR))
                {

                }
                else
                {
                    LoggerManager.Debug($"PDS Deactivated. Chuck isolated.");
                }

                ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                LoggerManager.Debug($"ProbingZUPFunc(): Z Up done. Z height = {zpos}", isInfo: IsInfo);

                if (zaxis.GroupMembers.Count == 3)
                {
                    LoggerManager.Debug($"Z group members actual position = Z0:{zaxis.GroupMembers[0].Status.RawPosition.Actual:0.00}, Z1:{zaxis.GroupMembers[1].Status.RawPosition.Actual:0.00}, Z2:{zaxis.GroupMembers[2].Status.RawPosition.Actual:0.00}", isInfo: IsInfo);
                }

                LoggerManager.Debug($"ProbingZUPFunc");

                Module.MotionManager().CalcZTorque(true);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum ProbingZUPFunc(double overdrive)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            double zApos = 0.0;

            try
            {
                zApos = zaxis.Status.Position.Ref;
                double zpos = zApos + overdrive;

                double curX = 0;
                double curY = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(curX, curY, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double z0, z1, z2;
                Module.ProbingModule().GetCPCValues(zpos, out z0, out z1, out z2);

                var z0Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z0);
                var z1Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z1);
                var z2Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z2);

                if (Module.StageSupervisor().ProbeCardInfo.AlignState.Value == AlignStateEnum.DONE)
                {
                    if (Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Count != 3)
                    {
                        Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                        Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                        Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                    }

                    z0Axis.Status.CompValue = z0 + Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[0];
                    z1Axis.Status.CompValue = z1 + Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[1];
                    z2Axis.Status.CompValue = z2 + Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[2];
                }
                else
                {
                    z0Axis.Status.CompValue = z0;
                    z1Axis.Status.CompValue = z1;
                    z2Axis.Status.CompValue = z2;
                }

                LoggerManager.Debug($"Z Up(): Tilt values: Z0 = {z0Axis.Status.CompValue}, Z1 = {z1Axis.Status.CompValue}, Z2 = {z2Axis.Status.CompValue}", isInfo: IsInfo);

                var IORet = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOZUPLAMPON, false);

                if (!(IORet == IORet.NO_ERR))
                {

                }
                else
                {
                    LoggerManager.Debug($"PDS Deactivated. Chuck isolated.");
                }

                ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                LoggerManager.Debug($"ProbingZUPFunc(): Z Up done. Z height = {zpos}", isInfo: IsInfo);

                if (zaxis.GroupMembers.Count == 3)
                {
                    LoggerManager.Debug($"Z group members actual position = Z0:{zaxis.GroupMembers[0].Status.RawPosition.Actual:0.00}, Z1:{zaxis.GroupMembers[1].Status.RawPosition.Actual:0.00}, Z2:{zaxis.GroupMembers[2].Status.RawPosition.Actual:0.00}", isInfo: IsInfo);
                }

                LoggerManager.Debug($"ProbingZUPFunc");

                Module.MotionManager().CalcZTorque(true);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum SoakingZUPFunc(WaferCoordinate waferoffset, PinCoordinate pinoffset, double overdrive, double zclearance)
        {
            LoggerManager.Debug($"SoakingZUPFunc");

            return EventCodeEnum.NONE;
        }
        protected EventCodeEnum SoakingZDOWNFunc(WaferCoordinate waferoffset, PinCoordinate pinoffset, double overdrive, double zclearance)
        {
            LoggerManager.Debug($"SoakingZDOWNFunc");

            return EventCodeEnum.NONE;
        }
        protected EventCodeEnum MoveLoadingPositionFunc(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var taxis = Module.MotionManager().GetAxis(EnumAxisConstants.C);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            double curZpos = 0.0;
            double curPZ = 0;

            double zoffset = offsetvalue;
            double xpos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.X.Value;
            double ypos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.Y.Value;
            double zpos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.Z.Value + zoffset;

            try
            {
                curZpos = zaxis.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(xpos, ypos, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos, curZpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveLoadingPositionFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum MoveLoadingPositionFunc_GPCC(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var taxis = Module.MotionManager().GetAxis(EnumAxisConstants.C);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            double curZpos = 0.0;
            double curPZ = 0;

            double zoffset = offsetvalue;
            double xpos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.X.Value;
            double ypos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.Y.Value;
            double zpos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.Z.Value + zoffset;

            try
            {
                curZpos = zaxis.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference_GPCC(xpos, ypos, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos, curZpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveLoadingPositionFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveLoadPosFunc_GPCC(double xoffset, double yoffset, double zoffset, double toffset)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var taxis = Module.MotionManager().GetAxis(EnumAxisConstants.C);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            double curZpos = 0.0;
            double curPZ = 0;

            double xpos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.X.Value + xoffset;
            double ypos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.Y.Value + yoffset;
            double zpos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.Z.Value + zoffset;
            double tpos = toffset + 0;

            try
            {
                curZpos = zaxis.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference_GPCC(xpos, ypos, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos, tpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos, curZpos, tpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveLoadingPositionFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }


        protected EventCodeEnum BernoulliHandlerreleaseFunc()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int returnValue = -1;
            IORet retIO = IORet.ERROR;
            double offset = Module.CoordinateManager().StageCoord.HandlerPrePositionOffset.Value;
            
            EnumWaferSize device = Module.LoaderController().GetTransferWaferSize();
            if (device == EnumWaferSize.INCH12)
            {
                LoggerManager.Debug($"[BernoulliHandlerreleaseFunc] Can not handle 12inch Device ({device})");
            }

            try
            {
                // three leg down
                ret = CheckWaferStatus(true);

                if (ret == EventCodeEnum.NONE)// 척에 웨이퍼가 있음
                {
                    LoggerManager.Debug($"BernoulliHandlerreleaseFunc(Threeleg Down): Exist wafer on chuck");

                    ret = MoveToBernoulliPrePosition(offset, 1, 0, 200000);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST, true, 100, Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST.TimeOut.Value);

                    if (returnValue == 0)
                    {
                        LoggerManager.Debug($"BernoulliHandlerreleaseFunc(Threeleg Down): Bernoulli Top Handler already has a wafer");

                        ret = EventCodeEnum.BERNOULLIHANDLER_ALREADY_EXIST_ERROR;
                    }
                    else
                    {
                        LoggerManager.Debug($"BernoulliHandlerreleaseFunc(Threeleg Down): Bernoulli Top Handler hasn't a wafer");

                        SwitchDOBERNOULLI_ANTIPAD(device, false);

                        returnValue = StageCylinderType.BernoulliHandlerUpDown.Retract();

                        if (returnValue == 0)
                        {
                            ret = EventCodeEnum.NONE;
                        }
                        else if (returnValue == -2)
                        {
                            ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                            CylResultValidate(MethodBase.GetCurrentMethod(), returnValue);
                        }
                        else
                        {
                            ret = EventCodeEnum.BERNOULLIHANDLER_TRANSFER_UP_ERROR;
                            CylResultValidate(MethodBase.GetCurrentMethod(), returnValue);
                        }
                    }
                }
                else// 척에 웨이퍼가 없음
                {
                    ret = EventCodeEnum.NONE;
                    ret = CheckWaferStatus(false);

                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    LoggerManager.Debug($"BernoulliHandlerreleaseFunc(Threeleg Down): Not exist wafer on chuck");

                    ret = MoveToBernoulliPrePosition(offset, 1, 0, 200000);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST, true, 100, Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST.TimeOut.Value);

                    if (returnValue == 0)
                    {
                        ret = MoveToBernoulliPrePosition(offset);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        LoggerManager.Debug($"BernoulliHandlerreleaseFunc(Threeleg Down): Bernoulli Top Handler has a wafer");

                        SwitchDOBERNOULLI_ANTIPAD(device, true);

                        SwitchDOBERNOULLI_Air(device, true);

                        ret = MoveToBernoulliHandlerPositionFunc(offset);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        SwitchDOBERNOULLI_Air(device, false);

                        Thread.Sleep(10);

                        ret = VacuumOnOff(true, extraVacReady: true);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = CheckWaferStatus(true);

                        if (ret == EventCodeEnum.NONE)
                        {
                            Module.StageSupervisor().SetWaferObjectStatus();

                            SwitchDOBERNOULLI_ANTIPAD(device, false);

                            returnValue = StageCylinderType.BernoulliHandlerUpDown.Retract();

                            if (returnValue == 0)
                            {
                                ret = EventCodeEnum.NONE;
                            }
                            else
                            {
                                ret = EventCodeEnum.BERNOULLIHANDLER_TRANSFER_UP_ERROR;
                                CylResultValidate(MethodBase.GetCurrentMethod(), returnValue);
                            }

                            ret = MoveToBernoulliPrePosition(offset, 0.3);
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }
                        else
                        {
                            SwitchDOBERNOULLI_ANTIPAD(device, true);

                            ret = VacuumOnOff(false, extraVacReady: false);

                            SwitchDOBERNOULLI_Air(device, true);

                            // 척의 조도가 높아 BLOW
                            retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCHUCK_BLOW, true);

                            Thread.Sleep((int)Module.IOManager().IO.Outputs.DOCHUCK_BLOW.MaintainTime.Value);

                            retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCHUCK_BLOW, false);

                            ret = MoveToBernoulliPrePosition(offset, 0.3);
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);

                            ret = EventCodeEnum.Chuck_Vacuum_Error;
                        }
                    }
                    else if (returnValue == -2)
                    {
                        LoggerManager.Debug($"BernoulliHandlerreleaseFunc(Threeleg Down): Bernoulli Top Handler hasn't a wafer");

                        // 척 로딩 포지션
                        ret = Module.MoveLoadingPosition(0.0);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = MoveToBernoulliPrePosition(offset);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        SwitchDOBERNOULLI_Air(device, false);

                        SwitchDOBERNOULLI_ANTIPAD(device, false);

                        returnValue = StageCylinderType.BernoulliHandlerUpDown.Retract();

                        if (returnValue == 0)
                        {
                            ret = EventCodeEnum.NONE;
                        }
                        else
                        {
                            ret = EventCodeEnum.BERNOULLIHANDLER_TRANSFER_UP_ERROR;
                            CylResultValidate(MethodBase.GetCurrentMethod(), returnValue);
                        }
                    }
                }
            }
            catch (InOutException ioerr)
            {
                ret = ConvertExceptionAndThrow(ioerr, ret);
            }
            catch (Exception err)
            {
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum BernoulliHandlerholdFunc()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int returnValue = -1;
            double offset = Module.CoordinateManager().StageCoord.HandlerPrePositionOffset.Value;
            IORet retIO = IORet.ERROR;
            EnumWaferSize device = Module.LoaderController().GetTransferWaferSize();
            if (device == EnumWaferSize.INCH12)
            {
                LoggerManager.Debug($"[BernoulliHandlerholdFunc] 12inch Device ({device})");
            }

            try
            {
                ret = CheckWaferStatus(true);

                if (ret == EventCodeEnum.NONE) // 척에 웨이퍼 있음
                {
                    LoggerManager.Debug($"BernoulliHandlerholdfunc(Threeleg Up): Exist wafer on chuck");

                    // Bernoulli Top Handler 웨이퍼 유무
                    ret = Module.MoveLoadingPosition(0.0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = MoveToBernoulliPrePosition(offset, 1, 0, 200000);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST, true, 100, Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST.TimeOut.Value);

                    if (returnValue == 0)
                    {
                        LoggerManager.Debug($"BernoulliHandlerholdfunc(Threeleg Up): Bernoulli Top Handler already has a wafer");

                        //Bernoulli Top Handler 웨이퍼 있음
                        ret = EventCodeEnum.BERNOULLIHANDLER_ALREADY_EXIST_ERROR;
                    }
                    else
                    {
                        LoggerManager.Debug($"BernoulliHandlerholdfunc(Threeleg Up): No wafer in Bernoulli Top Handler ");

                        //Bernoulli Top Handler 웨이퍼 없음
                        ret = MoveToBernoulliPrePosition(offset);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        returnValue = StageCylinderType.BernoulliHandlerUpDown.Extend();

                        if (returnValue == 0)
                        {
                            ret = EventCodeEnum.NONE;
                        }
                        else if (returnValue == -2)
                        {
                            ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                            CylResultValidate(MethodBase.GetCurrentMethod(), returnValue);
                        }
                        else
                        {
                            ret = EventCodeEnum.BERNOULLIHANDLER_TRANSFER_DOWN_ERROR;
                            CylResultValidate(MethodBase.GetCurrentMethod(), returnValue);
                        }

                        SwitchDOBERNOULLI_ANTIPAD(device, true);

                        ret = MoveToBernoulliHandlerPositionFunc(offset);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = VacuumOnOff(false, extraVacReady: false);

                        SwitchDOBERNOULLI_Air(device, true);
                        Thread.Sleep(2000);

                        // 척의 조도가 높아 BLOW
                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCHUCK_BLOW, true);

                        Thread.Sleep((int)Module.IOManager().IO.Outputs.DOCHUCK_BLOW.MaintainTime.Value);

                        //Z 안전 위치로 내림 (HandlerholdingPosition.Z- offset)
                        ret = MoveToBernoulliPrePosition(offset, 0.3);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCHUCK_BLOW, false);

                        //척 VAC 끄기
                        ret = CheckWaferStatus(false);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                }
                else //척에 웨이퍼 없음
                {
                    ret = CheckWaferStatus(false);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    // 척 로딩 포지션
                    ret = Module.MoveLoadingPosition(0.0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    // Bernoulli Top Handler 웨이퍼 유무
                    ret = MoveToBernoulliPrePosition(offset, 1, 0, 200000);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST, true, 100, Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST.TimeOut.Value);

                    if (returnValue == 0)
                    {
                        LoggerManager.Debug($"BernoulliHandlerholdfunc(Threeleg Up): Bernoulli Top Handler has a wafer");
                    }
                    else if (returnValue == -2)
                    {
                        LoggerManager.Debug($"BernoulliHandlerholdfunc(Threeleg Up): No wafer in Bernoulli Top Handler");
                    }

                    ret = MoveToBernoulliPrePosition(offset);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    returnValue = StageCylinderType.BernoulliHandlerUpDown.Extend();

                    if (returnValue == 0)
                    {
                        ret = EventCodeEnum.NONE;
                    }
                    else if (returnValue == -2)
                    {
                        ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                        CylResultValidate(MethodBase.GetCurrentMethod(), returnValue);
                    }
                    else
                    {
                        ret = EventCodeEnum.BERNOULLIHANDLER_TRANSFER_DOWN_ERROR;
                        CylResultValidate(MethodBase.GetCurrentMethod(), returnValue);
                    }

                    SwitchDOBERNOULLI_ANTIPAD(device, true);

                    SwitchDOBERNOULLI_Air(device, true);
                }
            }
            catch (InOutException ioerr)
            {
                ret = ConvertExceptionAndThrow(ioerr, ret);
            }
            catch (Exception err)
            {
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum CheckBernoulliHandlerFunc()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            EnumWaferSize device = Module.LoaderController().GetTransferWaferSize();
            if (device == EnumWaferSize.INCH12)
            {
                LoggerManager.Debug($"[CheckBernoulliHandlerFunc] 12inch Device ({device})");
            }

            int returnValue = -1;
            double offset = Module.CoordinateManager().StageCoord.HandlerPrePositionOffset.Value;

            try
            {
                ret = CheckWaferStatus(true);

                if (ret == EventCodeEnum.NONE)
                {
                    LoggerManager.Debug($"[CheckBernoulliHandlerFunc] No wafer in Bernoulli Top Handler");

                    SwitchDOBERNOULLI_Air(device, false);

                    SwitchDOBERNOULLI_ANTIPAD(device, false);
                }
                else
                {
                    returnValue = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST, true, 100, Module.IOManager().IO.Inputs.DIBERNOULLIWAFER_EXIST.TimeOut.Value);

                    if (returnValue == 0 && IsHandlerholdWafer())
                    {
                        LoggerManager.Debug($"[CheckBernoulliHandlerFunc] Bernoulli Top Handler has a wafer");

                        SwitchDOBERNOULLI_Air(device, true);
                    }
                    else
                    {
                        LoggerManager.Debug($"[CheckBernoulliHandlerFunc] No wafer in Bernoulli Top Handler");

                        SwitchDOBERNOULLI_Air(device, false);
                    }
                }

                SwitchDOBERNOULLI_ANTIPAD(device, true);

                ret = EventCodeEnum.NONE;
            }
            catch (InOutException ioerr)
            {
                ret = ConvertExceptionAndThrow(ioerr, ret);
            }
            catch (Exception err)
            {
                Trace.WriteLineIf(LoggerManager.GPTraceSwitch.TraceError, err);
                throw new ProberSystemException(ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveToBernoulliHandlerPositionFunc(double offset = 10000)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            double curZpos = 0.0;
            double curPZ = axispz.Status.Position.Ref;

            if (Math.Abs(offset) < 10000)
            {
                offset = 10000;
            }

            double xpos = Module.CoordinateManager().StageCoord.HandlerholdingPosX.Value;
            double ypos = Module.CoordinateManager().StageCoord.HandlerholdingPosY.Value;
            double zpos = Module.CoordinateManager().StageCoord.HandlerholdingPosZ.Value;

            double bigZPos = zpos - Math.Abs(offset);

            LoggerManager.Debug($"MoveToBernoulliHandlerPositionFunc : HandlerholdingPosition.X ({xpos}), HandlerholdingPosition.Y ({ypos}), StageCoord.HandlerholdingPosition.Z ({zpos})", isInfo: IsInfo);

            LoggerManager.Debug($"MoveToBernoulliHandlerPositionFunc : HandlerPrePositionOffset ({offset}), StageCoord.HandlerholdingPosition.Z - offset ({bigZPos})", isInfo: IsInfo);

            try
            {
                curZpos = zaxis.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(xpos, ypos, (curZpos - 35000), curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                int returnValue = StageCylinderType.BernoulliHandlerAlign.Retract();

                if (returnValue == 0)
                {
                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    ret = EventCodeEnum.BERNOULLIHANDLER_ALIGN_ON_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().AbsMove(zaxis, bigZPos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value / 3, zaxis.Param.Acceleration.Value / 3);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos, curZpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, bigZPos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value / 3, zaxis.Param.Acceleration.Value / 3);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveWaferHoldPosFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveToBernoulliHandlerPosAndDoAlignFunc(double offset = 10000)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            double curZpos = 0.0;
            double curPZ = axispz.Status.Position.Ref;

            if (Math.Abs(offset) < 10000)
            {
                offset = 10000;
            }

            double xpos = Module.CoordinateManager().StageCoord.HandlerholdingPosX.Value;
            double ypos = Module.CoordinateManager().StageCoord.HandlerholdingPosY.Value;
            double zpos = Module.CoordinateManager().StageCoord.HandlerholdingPosZ.Value - 1000;
            double bigZPos = zpos - Math.Abs(offset);

            LoggerManager.Debug($"MoveToBernoulliHandlerPositionFunc : HandlerholdingPosition.X ({xpos}), HandlerholdingPosition.Y ({ypos}), StageCoord.HandlerholdingPosition.Z ({zpos})", isInfo: IsInfo);

            LoggerManager.Debug($"MoveToBernoulliHandlerPositionFunc : HandlerPrePositionOffset ({offset}), StageCoord.HandlerholdingPosition.Z - offset ({bigZPos})", isInfo: IsInfo);

            try
            {
                curZpos = zaxis.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(xpos, ypos, (curZpos - 35000), curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                int returnValue = StageCylinderType.BernoulliHandlerAlign.Retract();

                if (returnValue == 0)
                {
                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    ret = EventCodeEnum.BERNOULLIHANDLER_ALIGN_ON_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().AbsMove(zaxis, bigZPos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value / 3, zaxis.Param.Acceleration.Value / 3);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos, curZpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(
                    zaxis, bigZPos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(
                    zaxis, zpos, zaxis.Param.Speed.Value / 3, zaxis.Param.Acceleration.Value / 3);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                returnValue = StageCylinderType.BernoulliHandlerAlign.Extend();

                if (returnValue == 0)
                {
                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    ret = EventCodeEnum.BERNOULLIHANDLER_ALIGN_OFF_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                Thread.Sleep(500);

                zpos = Module.CoordinateManager().StageCoord.HandlerholdingPosZ.Value;

                ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value / 3, zaxis.Param.Acceleration.Value / 3);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                returnValue = StageCylinderType.BernoulliHandlerAlign.Retract();

                if (returnValue == 0)
                {
                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    ret = EventCodeEnum.BERNOULLIHANDLER_ALIGN_ON_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveWaferHoldPosFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum MoveToBernoulliPrePosition(double Zoffset = 10000, double ovrd = 1.0, double Xoffset = 0, double Yoffset = 0)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            double curZpos = 0.0;
            double curPZ = axispz.Status.Position.Ref;

            if (Math.Abs(Zoffset) < 10000)
            {
                Zoffset = 10000;
            }

            double xpos = Module.CoordinateManager().StageCoord.HandlerholdingPosX.Value;
            double ypos = Module.CoordinateManager().StageCoord.HandlerholdingPosY.Value;
            double zpos = Module.CoordinateManager().StageCoord.HandlerholdingPosZ.Value;
            double bigZPos = zpos - Math.Abs(Zoffset);

            LoggerManager.Debug($"MoveToBernoulliPrePosition : HandlerholdingPosition.X ({xpos}), HandlerholdingPosition.Y ({ypos}), StageCoord.HandlerholdingPosition.Z - offset ({bigZPos})", isInfo: IsInfo);

            LoggerManager.Debug($"MoveToBernoulliPrePosition : HandlerPrePositionOffset ({Zoffset}), StageCoord.HandlerholdingPosition.Z - offset ({bigZPos})", isInfo: IsInfo);

            xpos = xpos - Math.Abs(Xoffset);
            ypos = ypos + Math.Abs(Yoffset);

            try
            {
                if (Xoffset == 0 || Yoffset == 0)
                {
                    LoggerManager.Debug($"MoveToBernoulliPrePosition : HandlerPrePositionOffset ({Xoffset}), StageCoord.HandlerholdingPosition.Z - offset ({Yoffset})", isInfo: IsInfo);
                }

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                curZpos = zaxis.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(xpos, ypos, curZpos - 35000, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().AbsMove(zaxis, bigZPos, zaxis.Param.Speed.Value * ovrd, zaxis.Param.Acceleration.Value * ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos, curZpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, bigZPos, zaxis.Param.Speed.Value * ovrd, zaxis.Param.Acceleration.Value * ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveWaferHoldPosFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum SwitchDOBERNOULLI_ANTIPAD(EnumWaferSize device, bool val)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                bool reverseVal = !val;

                IORet retIO = IORet.ERROR;

                switch (device)
                {
                    case EnumWaferSize.INVALID:
                        break;
                    case EnumWaferSize.UNDEFINED:
                        break;
                    case EnumWaferSize.INCH6:
                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD, val);

                        Thread.Sleep((int)Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD.MaintainTime.Value);

                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD2, reverseVal);
                        break;
                    case EnumWaferSize.INCH8:
                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD, false);
                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD2, true);

                        Thread.Sleep((int)Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD.MaintainTime.Value);
                        break;
                    case EnumWaferSize.INCH12:
                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD, false);
                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD2, true);

                        Thread.Sleep((int)Module.IOManager().IO.Outputs.DOBERNOULLI_ANTIPAD.MaintainTime.Value);
                        break;
                }

                ret = EventCodeEnum.NONE;
            }
            catch (InOutException ioerr)
            {
                Trace.WriteLineIf(LoggerManager.GPTraceSwitch.TraceError, ioerr);
                ret = ConvertExceptionAndThrow(ioerr, ret);
            }
            catch (Exception err)
            {
                Trace.WriteLineIf(LoggerManager.GPTraceSwitch.TraceError, err);
                throw new ProberSystemException(ret);
            }

            return ret;
        }

        protected EventCodeEnum SwitchDOBERNOULLI_Air(EnumWaferSize device, bool val)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            try
            {
                IORet retIO = IORet.ERROR;

                switch (device)
                {
                    case EnumWaferSize.INVALID:
                    case EnumWaferSize.UNDEFINED:
                        break;
                    case EnumWaferSize.INCH6:
                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOBERNOULLI_6INCH, val);
                        break;

                    case EnumWaferSize.INCH8:
                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOBERNOULLI_8INCH, val);
                        break;

                    case EnumWaferSize.INCH12:
                        retIO = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOBERNOULLI_12INCH, val);
                        break;
                }

                ret = EventCodeEnum.NONE;
            }
            catch (InOutException ioerr)
            {
                ret = ConvertExceptionAndThrow(ioerr, ret);
            }
            catch (Exception err)
            {
                Trace.WriteLineIf(LoggerManager.GPTraceSwitch.TraceError, err);
                throw new ProberSystemException(ret);
            }

            return ret;
        }

        protected EventCodeEnum SwitchThreeLegFunc(bool val, long timeout = 60000)
        {

            EventCodeEnum ret = EventCodeEnum.UNDEFINED;
            EventCodeEnum vacRet = EventCodeEnum.UNDEFINED;

            bool runflag = true;
            bool isThreelegDown = false;
            bool isThreelegUp = false;
            Stopwatch stw = new Stopwatch();
            stw.Start();

            try
            {
                //bool extraVacReady = Module.StageSupervisor().WaferObject.WaferStatus != EnumSubsStatus.NOT_EXIST;

                var axis = Module.MotionManager().GetAxis(EnumAxisConstants.TRI);

                if (val)
                {
                    var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
                    var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
                    var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

                    double curXpos = xaxis.Status.Position.Ref;
                    double curYpos = yaxis.Status.Position.Ref;
                    double curZpos = zaxis.Status.Position.Ref;

                    double safetyZPos = Module.CoordinateManager().StageCoord.SafePosZAxis;
                    double loadingXPos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.GetX();
                    double loadingYPos = Module.CoordinateManager().StageCoord.ChuckLoadingPosition.GetY();

                    double posXMargin = 2500.0; //Wafer Loading 오차 정도 -> Chuck Size: 305mm Wafer Size: 300mm -> Margin: 5mm이므로 양쪽 2.5mm 산정
                    double posYMargin = 2500.0; //Wafer Loading 오차 정도 -> Chuck Size: 305mm Wafer Size: 300mm -> Margin: 5mm이므로 양쪽 2.5mm 산정
                    double posZMargin = 100.0; // 기존 ThreeLeg움직이기 전 체크하는 함수(CheckHardwareInterference())에서 사용된 값.

                    bool isDangerousPosition = false;// True: Dagerous Position, False: Safety Position

                    if (curZpos > (safetyZPos + posZMargin))
                    {
                        if (Math.Abs(curXpos - loadingXPos) > posXMargin || Math.Abs(curYpos - loadingYPos) > posYMargin)
                        {
                            isDangerousPosition = true;
                        }
                        else
                        {
                            isDangerousPosition = false;
                        }
                    }
                    else
                    {
                        isDangerousPosition = false;
                    }

                    if (isDangerousPosition == false)
                    {
                        LoggerManager.Debug($"Start VacuumOff Before ThreeLegUp");

                        vacRet = VacuumOnOffFunc(false, extraVacReady: true);// 아래 로직에서 베큠 접근하기 때문에 켜야함.

                        if (vacRet == EventCodeEnum.NONE)
                        {
                            LoggerManager.Debug($"Start CheckWaferStatus(false) Before ThreeLegUp");

                            vacRet = CheckWaferStatus(false);

                            if (vacRet == EventCodeEnum.NONE)
                            {
                                LoggerManager.Debug($"Before ThreeLegUp in StageMove");

                                if (val)
                                {
                                    ret = Module.MotionManager().IsThreeLegUp(EnumAxisConstants.TRI, ref isThreelegUp);
                                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                    ret = Module.MotionManager().IsThreeLegDown(EnumAxisConstants.TRI, ref isThreelegDown);
                                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                    if (Extensions_IParam.ProberRunMode == RunMode.EMUL || Module.MotionManager().IsEmulMode(axis))
                                    {
                                        isThreelegDown = true;
                                        isThreelegUp = false;
                                    }
                                }

                                if (isThreelegUp == false || isThreelegDown == true)
                                {
                                    Module.IOManager().IO.Outputs.DO_TRILEG_SUCTION.SetValue();

                                    ret = Module.MotionManager().VMove(axis, axis.Param.Speed.Value, EnumTrjType.Normal);
                                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                    int iret = Module.MotionManager().WaitForAxisMotionDone(axis, axis.Param.TimeOut.Value);

                                    if (iret != 0)
                                    {
                                        ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                                    }
                                }
                                else if (isThreelegUp == true && isThreelegDown == false)
                                {
                                    Module.IOManager().IO.Outputs.DO_TRILEG_SUCTION.SetValue();

                                    if (Module.StageSupervisor().WaferObject.WaferStatus == EnumSubsStatus.EXIST)
                                    {
                                        LoggerManager.Debug($"SwitchThreeLegFunc Check ThreeLeg Vacuum");

                                        var ioRet = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DI_ThreeLegVac, true, 100, 1000);

                                        if (ioRet != 0)
                                        {
                                            LoggerManager.Debug($"SwitchThreeLegFunc Monitor For ThreeLeg Vacuum (true) Error. retVal: {ioRet}");

                                            ret = EventCodeEnum.Three_Leg_Time_Out;
                                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                                        }
                                    }

                                    return EventCodeEnum.NONE;
                                }
                                else
                                {
                                    LoggerManager.Debug($"SwitchThreeLegFunc Error IsThreeLegUp: {isThreelegUp}, isThreeLegDown: {isThreelegDown}");

                                    Module.NotifyManager().Notify(EventCodeEnum.MONITORING_THREELEG_ERROR);

                                    return EventCodeEnum.STAGEMOVE_THREE_LEG_UP_ERROR;
                                }

                                LoggerManager.Debug($"After ThreeLegUp in StageMove");

                                while (runflag)
                                {
                                    ret = Module.MotionManager().IsThreeLegDown(EnumAxisConstants.TRI, ref isThreelegDown);
                                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                    ret = Module.MotionManager().IsThreeLegUp(EnumAxisConstants.TRI, ref isThreelegUp);
                                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                    if (Extensions_IParam.ProberRunMode == RunMode.EMUL || Module.MotionManager().IsEmulMode(axis))
                                    {
                                        Module.IOManager().IO.Outputs.DO_TRILEG_SUCTION.ResetValue();
                                        runflag = false;
                                    }

                                    int confirmcnt = 0;

                                    if (isThreelegDown == false && isThreelegUp == true)
                                    {
                                        for (int i = 0; i < 10; i++)
                                        {
                                            ret = Module.MotionManager().IsThreeLegDown(EnumAxisConstants.TRI, ref isThreelegDown);
                                            ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                            ret = Module.MotionManager().IsThreeLegUp(EnumAxisConstants.TRI, ref isThreelegUp);
                                            ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                            if (isThreelegUp == true && isThreelegDown == false)
                                            {
                                                confirmcnt++;

                                                LoggerManager.Debug($"Three leg up confirmed count :{confirmcnt}");

                                                if (confirmcnt >= 3)
                                                {
                                                    runflag = false;

                                                    LoggerManager.Debug("Three leg up confirmed");

                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                runflag = true;
                                            }

                                            Task.Delay(500).Wait();
                                        }
                                    }

                                    if (stw.ElapsedMilliseconds >= timeout && runflag == true)
                                    {
                                        ret = EventCodeEnum.Three_Leg_Time_Out;

                                        LoggerManager.Debug($"Three leg up time out. time out value:{timeout} milliseconds");

                                        stw.Stop();
                                        return ret;
                                    }
                                }

                                if (Module.StageSupervisor().WaferObject.WaferStatus == EnumSubsStatus.EXIST)
                                {
                                    LoggerManager.Debug($"SwitchThreeLegFunc Check ThreeLeg Vacuum");

                                    var ioRet = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DI_ThreeLegVac, true, 100, 1000);

                                    if (ioRet != 0)
                                    {
                                        LoggerManager.Debug($"SwitchThreeLegFunc Monitor For ThreeLeg Vacuum (true) Error. retVal: {ioRet}");

                                        ret = EventCodeEnum.Three_Leg_Time_Out;
                                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                                    }
                                }

                                Module.IOManager().IO.Outputs.DO_TRILEG_SUCTION.ResetValue();
                            }
                            else
                            {
                                LoggerManager.Debug($"Error CheckWaferStatus(false) Before ThreeLegUp. retValue:{vacRet}");
                            }
                        }
                        else
                        {
                            LoggerManager.Debug($"Error VacuumOff Before ThreeLegUp. retValue:{vacRet}");
                        }
                    }
                    else
                    {
                        //ThreeLegUp 불가.
                        ret = EventCodeEnum.MOTION_DANGEROUS_POS;
                        LoggerManager.Debug($" Chuck is in a dangerous position to perform the ThreeLegUp action. Current Chuck Position(X, Y, X) = [{curXpos:0.00},{curYpos:0.00},{curZpos:0.00}], " +
                                $"SafePosAxis Value(X, Y, Z) = [{loadingXPos:0.00}, {loadingXPos:0.00}, {safetyZPos:0.00}], Margin(X, Y, Z) = [{posXMargin:0.00}, {posYMargin:0.00}, {posZMargin:0.00}]");
                    }
                }
                else
                {
                    LoggerManager.Debug($"Before ThreeLegDown in StageMove");

                    var IORet = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOZUPLAMPON, true);

                    // TODO : 
                    if (!(IORet == IORet.NO_ERR))
                    {

                    }

                    else
                    {
                        LoggerManager.Debug($"PDS Activated - Chuck discharging...");
                    }

                    if (!val)
                    {
                        ret = Module.MotionManager().IsThreeLegUp(EnumAxisConstants.TRI, ref isThreelegUp);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().IsThreeLegDown(EnumAxisConstants.TRI, ref isThreelegDown);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        if (Extensions_IParam.ProberRunMode == RunMode.EMUL || Module.MotionManager().IsEmulMode(axis))
                        {
                            isThreelegDown = false;
                            isThreelegUp = true;
                        }
                    }

                    if (isThreelegUp == true || isThreelegDown == false)
                    {
                        LoggerManager.Debug($"Start VacuumOn Before ThreeLegDown");

                        vacRet = VacuumOnOffFunc(true, extraVacReady: true, extraVacOn: false);

                        if (vacRet == EventCodeEnum.NONE)
                        {
                            Module.IOManager().IO.Outputs.DO_TRILEG_SUCTION.SetValue();

                            ret = Module.MotionManager().VMove(axis, (axis.Param.Speed.Value * -1d), EnumTrjType.Normal);
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);

                            int iret = Module.MotionManager().WaitForAxisMotionDone(axis, axis.Param.TimeOut.Value);

                            if (iret != 0)
                            {
                                ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                            }
                        }
                        else
                        {
                            LoggerManager.Debug($"Error VacuumOn Before ThreeLegDown");

                            return EventCodeEnum.Chuck_Vacuum_Error;
                        }
                    }
                    else if (isThreelegUp == false && isThreelegDown == true)
                    {
                        Module.IOManager().IO.Outputs.DO_TRILEG_SUCTION.ResetValue();

                        return EventCodeEnum.NONE;
                    }
                    else
                    {
                        LoggerManager.Debug($"SwitchThreeLegFunc Error IsThreeLegUp: {isThreelegUp}, isThreeLegDown: {isThreelegDown}");

                        return EventCodeEnum.STAGEMOVE_THREE_LEG_DOWN_ERROR;
                    }

                    LoggerManager.Debug($"After ThreeLegDown in StageMove");

                    while (runflag)
                    {
                        ret = Module.MotionManager().IsThreeLegDown(EnumAxisConstants.TRI, ref isThreelegDown);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().IsThreeLegUp(EnumAxisConstants.TRI, ref isThreelegUp);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        if (Extensions_IParam.ProberRunMode == RunMode.EMUL || Module.MotionManager().IsEmulMode(axis))
                        {
                            Module.IOManager().IO.Outputs.DO_TRILEG_SUCTION.ResetValue();
                            runflag = false;
                        }

                        int confirmcnt = 0;

                        if (isThreelegDown == true && isThreelegUp == false)
                        {
                            for (int i = 0; i < 10; i++)
                            {
                                ret = Module.MotionManager().IsThreeLegDown(EnumAxisConstants.TRI, ref isThreelegDown);
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                ret = Module.MotionManager().IsThreeLegUp(EnumAxisConstants.TRI, ref isThreelegUp);
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                if (isThreelegDown == true && isThreelegUp == false)
                                {
                                    confirmcnt++;

                                    LoggerManager.Debug($"Three leg down confirmed count :{confirmcnt}");

                                    if (confirmcnt >= 3)
                                    {
                                        Module.IOManager().IO.Outputs.DO_TRILEG_SUCTION.ResetValue();
                                        runflag = false;

                                        LoggerManager.Debug("Three leg down confirmed");

                                        break;
                                    }
                                }
                                else
                                {
                                    runflag = true;
                                }

                                Task.Delay(500).Wait();
                            }
                        }

                        if (stw.ElapsedMilliseconds >= timeout && runflag == true)
                        {
                            ret = EventCodeEnum.Three_Leg_Time_Out;

                            LoggerManager.Debug($"Three leg down time out. time out value:{timeout} milliseconds");

                            stw.Stop();

                            vacRet = VacuumOnOffFunc(true, extraVacReady: true, extraVacOn: true);
                            if (vacRet != EventCodeEnum.NONE)
                            {
                                LoggerManager.Debug($"Error VacuumOn(extraVacOn) After ThreeLegDown");

                                return EventCodeEnum.Chuck_Vacuum_Error;
                            }

                            vacRet = CheckWaferStatus(true);

                            LoggerManager.Debug($"ThreeLeg is TimeOut Error.  CheckWaferStatus(true) . retValue:{vacRet}");

                            if (vacRet != EventCodeEnum.NONE)
                            {
                                LoggerManager.Debug($"Start VacuumOff after ThreeLegDown Error");

                                vacRet = VacuumOnOffFunc(false, extraVacReady: false);

                                if (vacRet != EventCodeEnum.NONE)
                                {
                                    LoggerManager.Debug($"Error VacuumOff after ThreeLegDown. retValue:{vacRet}");
                                }
                            }

                            return ret;
                        }
                    }

                    LoggerManager.Debug($"Start CheckWaferStatus(true) after ThreeLegDown");
                    vacRet = VacuumOnOffFunc(true, extraVacReady: true, extraVacOn: true);
                    if (vacRet != EventCodeEnum.NONE)
                    {
                        LoggerManager.Debug($"Error VacuumOn(extraVacOn) After ThreeLegDown");

                        return EventCodeEnum.Chuck_Vacuum_Error;
                    }


                    vacRet = CheckWaferStatus(true);

                    if (vacRet != EventCodeEnum.NONE)
                    {
                        LoggerManager.Debug($"Error CheckWaferStatus(true) after ThreeLegDown. retValue:{vacRet}");
                        // Three Leg Down 한 후 Vacuum Off 하는 코드는 Wafer Unload Proc 에서 한다.
                        // Load Proc 에서 웨이퍼 인식 안되는 경우는 웨이퍼 척 위에 있을 수 있으므로 켜둔다. 
                    }
                    else
                    {
                        
                        if (val == false)
                        {
                            if (Module.IOManager().IO.Outputs.DOCHUCK_EXTRA_AIRON_0.IOOveride.Value == EnumIOOverride.NONE
                             || Module.IOManager().IO.Outputs.DOCHUCK_EXTRA_AIRON_2.IOOveride.Value == EnumIOOverride.NONE)
                            {
                                ChuckMainVacOffFunc();

                                vacRet = CheckWaferStatus(true);
                                if (vacRet != EventCodeEnum.NONE)
                                {
                                    LoggerManager.Debug($"Error Re CheckWaferStatus(true) after ThreeLegDown. retValue:{vacRet}");

                                    LoggerManager.Debug($"Start VacuumOff after ThreeLegDown");

                                    vacRet = VacuumOnOffFunc(false, extraVacReady: false);

                                    if (vacRet != EventCodeEnum.NONE)
                                    {
                                        LoggerManager.Debug($"Error VacuumOff after ThreeLegDown. retValue:{vacRet}");
                                    }
                                }
                            }
                        }
                        
                    }
                }

                LoggerManager.Debug($"SwitchThreeLegFunc");
            }
            catch (Exception err)
            {
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        /// <summary>
        /// HW: 베큠 탱크와 척베큠을 동시에 사용함. 두개의 베큠라인은 분리되어있음. 
        /// 척베큠은 리크가 발생할 시 메인베큠 전체 압에 영향을 줄 수있으나 
        /// 베큠 탱크는 별도의 라인으로 되어있어 리크가 메인 베큠에 영향을 주지 않음. 
        /// 탱크 배큠으로 웨이퍼를 더 강한 힘으로 잡고 있으니 웨이퍼 인식은 가능하고 메인 베큠에 부담을 줄이기 위해서 기존 척베큠을 Off
        /// Edge가 뜨는 것을 방지하기 위해 Edge Vac은 켠상태로 유지한다. 
        /// </summary>
        /// <returns></returns>
        protected EventCodeEnum ChuckMainVacOffFunc()
        {
            EventCodeEnum retVal = EventCodeEnum.UNDEFINED;
            IORet ret = IORet.ERROR;
            try
            {
                LoggerManager.Debug($"ChuckMainVacOffFunc(): DelayTimeBeforeOnlyChuckVacOff({Module.CoordinateManager().StageCoord.DelayTimeBeforeOnlyChuckVacOff.Value}) msec Start, Wafer Exist({Module.IOManager().IO.Inputs.DIWAFERONCHUCK_6})");
                Thread.Sleep(Module.CoordinateManager().StageCoord.DelayTimeBeforeOnlyChuckVacOff.Value);
                LoggerManager.Debug($"ChuckMainVacOffFunc(): DelayTimeBeforeOnlyChuckVacOff({Module.CoordinateManager().StageCoord.DelayTimeBeforeOnlyChuckVacOff.Value}) msec End");

                if (Module.IOManager().IO.Outputs.DOCHUCK_EXTRA_AIRON_0.IOOveride.Value == EnumIOOverride.NONE)
                {
                    ret = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_0, false);
                    if (ret != IORet.NO_ERR)
                    {
                        retVal = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                        ResultValidate(MethodBase.GetCurrentMethod(), retVal);
                    }

                    ret = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_1, false);
                    if (ret != IORet.NO_ERR)
                    {
                        retVal = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                        ResultValidate(MethodBase.GetCurrentMethod(), retVal);
                    }
                }


                if (Module.IOManager().IO.Outputs.DOCHUCK_EXTRA_AIRON_2.IOOveride.Value == EnumIOOverride.NONE)
                {
                    ret = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_2, false);
                    if (ret != IORet.NO_ERR)
                    {
                        retVal = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                        ResultValidate(MethodBase.GetCurrentMethod(), retVal);
                    }
                }

                LoggerManager.Debug($"ChuckMainVacOffFunc(): DelayTimeAfterOnlyChuckVacOff({Module.CoordinateManager().StageCoord.DelayTimeAfterOnlyChuckVacOff.Value}) msec Start");
                Thread.Sleep(Module.CoordinateManager().StageCoord.DelayTimeAfterOnlyChuckVacOff.Value);
                LoggerManager.Debug($"ChuckMainVacOffFunc(): DelayTimeAfterOnlyChuckVacOff({Module.CoordinateManager().StageCoord.DelayTimeAfterOnlyChuckVacOff.Value}) msec End");

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }
            return retVal;
        }

        public EventCodeEnum CCRotLockSwitchFunc(bool val, long timeout = 60000)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            bool runflag = true;
            bool isfls = false;
            bool isrls = false;
            Stopwatch stw = new Stopwatch();
            stw.Start();

            try
            {
                var axis = Module.MotionManager().GetAxis(EnumAxisConstants.ROT);

                if (val)
                {
                    LoggerManager.Debug($"Before CCRotLockSwitchFunc Lock in StageMove");

                    if (val)
                    {
                        ret = Module.MotionManager().IsFls(EnumAxisConstants.ROT, ref isfls);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().IsRls(EnumAxisConstants.ROT, ref isrls);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        if (Extensions_IParam.ProberRunMode == RunMode.EMUL || Module.MotionManager().IsEmulMode(axis))
                        {
                            isrls = true;
                            isfls = false;
                        }
                    }

                    if (isfls == false || isrls == true)// Lock 상태일 때 -- Cam follower 위에 있음 
                    {
                        ret = Module.MotionManager().VMove(axis, axis.Param.Speed.Value, EnumTrjType.Normal);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        int iret = Module.MotionManager().WaitForAxisVMotionDone(axis, axis.Param.TimeOut.Value);

                        if (iret != 0)
                        {
                            ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }
                    }
                    else if (isfls == true && isrls == false)// UnLock상태일 때 -- Cam follower 아래에 있음 
                    {
                        return EventCodeEnum.NONE;
                    }
                    else // 에러 
                    {
                        LoggerManager.Debug($"CCRotLockSwitchFunc Error isfls: {isfls}, isrls: {isrls}");

                        Module.NotifyManager().Notify(EventCodeEnum.GP_CardChange_DOCK_FAIL);

                        return EventCodeEnum.GP_CardChange_DOCK_FAIL;
                    }

                    LoggerManager.Debug($"After CCRotLockSwitchFunc Lock in StageMove");

                    while (runflag)
                    {
                        ret = Module.MotionManager().IsRls(EnumAxisConstants.ROT, ref isrls);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().IsFls(EnumAxisConstants.ROT, ref isfls);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        if (Extensions_IParam.ProberRunMode == RunMode.EMUL || Module.MotionManager().IsEmulMode(axis))
                        {
                            runflag = false;
                        }

                        int confirmcnt = 0;

                        if (isrls == false && isfls == true)
                        {
                            for (int i = 0; i < 10; i++)
                            {
                                ret = Module.MotionManager().IsRls(EnumAxisConstants.ROT, ref isrls);
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                ret = Module.MotionManager().IsFls(EnumAxisConstants.ROT, ref isfls);
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                if (isfls == true && isrls == false)
                                {
                                    confirmcnt++;

                                    LoggerManager.Debug($"ROT isfls confirmed count :{confirmcnt}");

                                    if (confirmcnt >= 3)
                                    {
                                        runflag = false;

                                        LoggerManager.Debug("ROT isfls confirmed");

                                        break;
                                    }
                                }
                                else
                                {
                                    runflag = true;
                                }

                                Thread.Sleep(500);
                            }
                        }
                        else
                        {
                            // TOOD : 
                        }

                        if (stw.ElapsedMilliseconds >= timeout)
                        {
                            ret = EventCodeEnum.GP_CardChange_DOCK_FAIL;

                            LoggerManager.Debug($"CC Rot Lock time out. time out value:{timeout} milliseconds");

                            stw.Stop();
                            return ret;
                        }
                    }
                }
                else
                {
                    LoggerManager.Debug($"Before CCRotLockSwitchFunc UnLock in StageMove");

                    if (!val)
                    {
                        ret = Module.MotionManager().IsFls(EnumAxisConstants.ROT, ref isfls);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().IsRls(EnumAxisConstants.ROT, ref isrls);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        if (Extensions_IParam.ProberRunMode == RunMode.EMUL || Module.MotionManager().IsEmulMode(axis))
                        {
                            isrls = false;
                            isfls = true;
                        }
                    }

                    if (isfls == true || isrls == false)
                    {
                        ret = Module.MotionManager().VMove(axis, (axis.Param.Speed.Value * -1d), EnumTrjType.Normal);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        int iret = Module.MotionManager().WaitForAxisVMotionDone(axis, axis.Param.TimeOut.Value);

                        if (iret != 0)
                        {
                            ret = EventCodeEnum.IO_TIMEOUT_ERROR;
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }
                    }
                    else if (isfls == false && isrls == true)
                    {
                        return EventCodeEnum.NONE;
                    }
                    else
                    {
                        LoggerManager.Debug($"CCRotLockSwitchFunc Unlock Error IsFls: {isfls}, isRls: {isrls}");

                        return EventCodeEnum.GP_CardChange_UNDOCK_FAIL;
                    }

                    LoggerManager.Debug($"After CCRotLockSwitchFunc UnLock in StageMove");

                    while (runflag)
                    {
                        ret = Module.MotionManager().IsRls(EnumAxisConstants.ROT, ref isrls);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().IsFls(EnumAxisConstants.ROT, ref isfls);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        if (Extensions_IParam.ProberRunMode == RunMode.EMUL || Module.MotionManager().IsEmulMode(axis))
                        {
                            runflag = false;
                        }

                        int confirmcnt = 0;

                        if (isrls == true && isfls == false)
                        {
                            for (int i = 0; i < 10; i++)
                            {
                                ret = Module.MotionManager().IsRls(EnumAxisConstants.ROT, ref isrls);
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                ret = Module.MotionManager().IsFls(EnumAxisConstants.ROT, ref isfls);
                                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                                if (isrls == true && isfls == false)
                                {
                                    confirmcnt++;

                                    LoggerManager.Debug($"ROT rls confirmed count :{confirmcnt}");

                                    if (confirmcnt >= 3)
                                    {
                                        runflag = false;
                                        LoggerManager.Debug("ROT rls confirmed");

                                        break;
                                    }
                                }
                                else
                                {
                                    runflag = true;
                                }

                                Thread.Sleep(500);
                            }
                        }
                        else
                        {
                            // TODO : 
                        }

                        if (stw.ElapsedMilliseconds >= timeout)
                        {
                            ret = EventCodeEnum.GP_CardChange_UNDOCK_FAIL;

                            LoggerManager.Debug($"CC Rot UnLock time out. time out value:{timeout} milliseconds");

                            stw.Stop();
                            return ret;
                        }
                    }
                }

                LoggerManager.Debug($"CCRotLockSwitchFunc");
            }
            catch (Exception err)
            {
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum VMViewMoveFunc(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            double curZpos = 0.0;
            double curXpos = 0.0;
            double curYpos = 0.0;

            var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                curXpos = xaxis.Status.Position.Ref;
                curYpos = yaxis.Status.Position.Ref;
                curZpos = zaxis.Status.Position.Ref;

                double curPZ = 0;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(xpos, ypos, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > zpos)
                {
                    if (AbsPosAvailableCheck(new MachineCoordinate(curXpos, curYpos, zpos, tpos)))
                    {
                        ret = Module.MotionManager().StageMove(curXpos, curYpos, zpos, tpos);
                    }
                    else
                    {
                        throw new Exception("PosAvailableCheck False");
                    }
                    if (AbsPosAvailableCheck(new MachineCoordinate(xpos, ypos, zpos, tpos)))
                    {
                        ret = Module.MotionManager().StageMove(xpos, ypos, zpos, tpos);
                    }
                    else
                    {
                        throw new Exception("PosAvailableCheck False");
                    }
                }
                else
                {
                    if (AbsPosAvailableCheck(new MachineCoordinate(xpos, ypos, curZpos, tpos)))
                    {
                        ret = Module.MotionManager().StageMove(xpos, ypos, curZpos, tpos);
                    }
                    else
                    {
                        throw new Exception("PosAvailableCheck False");
                    }
                    if (AbsPosAvailableCheck(new MachineCoordinate(xpos, ypos, zpos, tpos)))
                    {
                        ret = Module.MotionManager().StageMove(xpos, ypos, zpos, tpos);
                    }
                    else
                    {
                        throw new Exception("PosAvailableCheck False");
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum VMViewMoveFunc(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            double curZpos = 0.0;
            double curXpos = 0.0;
            double curYpos = 0.0;

            var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                curXpos = xaxis.Status.Position.Ref;
                curYpos = yaxis.Status.Position.Ref;
                curZpos = zaxis.Status.Position.Ref;

                double curPZ = 0;
                curPZ = axispz.Status.Position.Ref;

                if (curZpos > zpos)
                {
                    if (AbsPosAvailableCheck(new MachineCoordinate(curXpos, curYpos, zpos)))
                    {
                        ret = Module.MotionManager().StageMove(curXpos, curYpos, zpos, trjtype, ovrd);
                    }
                    else
                    {
                        throw new Exception("PosAvailableCheck False");
                    }
                    if (AbsPosAvailableCheck(new MachineCoordinate(xpos, ypos, zpos)))
                    {
                        ret = Module.MotionManager().StageMove(xpos, ypos, zpos, trjtype, ovrd);
                    }
                    else
                    {
                        throw new Exception("PosAvailableCheck False");
                    }
                }
                else
                {
                    if (AbsPosAvailableCheck(new MachineCoordinate(xpos, ypos, curZpos)))
                    {
                        ret = Module.MotionManager().StageMove(xpos, ypos, curZpos, trjtype, ovrd);
                    }
                    else
                    {
                        throw new Exception("PosAvailableCheck False");
                    }
                    if (AbsPosAvailableCheck(new MachineCoordinate(xpos, ypos, zpos)))
                    {
                        ret = Module.MotionManager().StageMove(xpos, ypos, zpos, trjtype, ovrd);
                    }
                    else
                    {
                        throw new Exception("PosAvailableCheck False");
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum VMRelMoveFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double x = 0, y = 0, z = 0, t = 0;

                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
                var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
                var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
                var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

                curX = xaxis.Status.Position.Ref;
                curY = yaxis.Status.Position.Ref;
                curZ = zaxis.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                if (axis.AxisType.Value == EnumAxisConstants.X)
                {
                    x = pos;
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Y)
                {
                    y = pos;
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    z = pos;
                }
                else if (axis.AxisType.Value == EnumAxisConstants.C)
                {
                    t = pos;
                }

                if (pos + axis.Status.Position.Actual > axis.Param.PosSWLimit.Value ||
                    pos + axis.Status.Position.Actual < axis.Param.NegSWLimit.Value)
                {
                    LoggerManager.Debug($"{pos + axis.Status.Position.Actual} is out of available position for {axis.AxisType.Value} Axis.");
                }
                else if (AbsPosAvailableCheck(this.Module.CoordinateManager().RelPosToAbsPos(new MachineCoordinate(x, y, z, t))))
                {
                    ret = Module.MotionManager().RelMove(axis, pos, axis.Param.Speed.Value, axis.Param.Acceleration.Value);
                }
                else
                {
                    // TODO : 
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum VMAbsMoveFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double x = 0, y = 0, z = 0, t = 0;

                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
                var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
                var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
                var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
                var axist = Module.MotionManager().GetAxis(EnumAxisConstants.C);

                x = xaxis.Status.Position.Ref;
                y = yaxis.Status.Position.Ref;
                z = zaxis.Status.Position.Ref;
                t = axist.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                if (axis.AxisType.Value == EnumAxisConstants.X)
                {
                    x = pos;
                    ret = Module.CheckHardwareInterference(x, curY, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Y)
                {
                    y = pos;
                    ret = Module.CheckHardwareInterference(curX, y, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    z = pos;
                    ret = Module.CheckHardwareInterference(curX, curY, z, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.C)
                {
                    t = pos;
                }

                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (AbsPosAvailableCheck(new MachineCoordinate(x, y, z, t)))
                {
                    ret = Module.MotionManager().AbsMove(axis, pos, axis.Param.Speed.Value, axis.Param.Acceleration.Value);
                }
                else
                {
                    // TODO : 
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum VMWaferHighViewMoveFunc(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            double heightzpos = 0.0;
            double curZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axist = Module.MotionManager().GetAxis(EnumAxisConstants.C);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            wfcoord.X.Value = xpos * -1d;
            wfcoord.Y.Value = ypos * -1d;
            wfcoord.Z.Value = zpos * -1d;
            wfcoord.T.Value = tpos * 10000d;

            try
            {
                if (AbsPosAvailableCheck(mccoord))
                {
                    // TODO : 함수 사용 꼴 다름.
                    curZpos = axisz.Status.Position.Ref;
                    heightzpos = Module.WaferAligner().GetHeightValue(xpos, ypos, true);
                    wfcoord.Z.Value = 1d * heightzpos;

                    mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);

                    double curPZ = 0;
                    curPZ = axispz.Status.Position.Ref;

                    ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    if (curZpos > mccoord.Z.Value)
                    {
                        ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, wfcoord.T.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                    else
                    {
                        ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZpos, wfcoord.T.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }

                    LoggerManager.Debug($"VMWaferHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, zpos = {zpos}, tpos = {tpos}", isInfo: IsInfo);
                }
                else
                {
                    // TODO : 
                }

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum VMWaferHighViewMoveFunc(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            double curZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            wfcoord.X.Value = xpos * -1d;
            wfcoord.Y.Value = ypos * -1d;
            wfcoord.Z.Value = zpos * -1d;

            try
            {
                if (AbsPosAvailableCheck(mccoord))
                {
                    curZpos = axisz.Status.Position.Ref;

                    mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);

                    double curPZ = 0;
                    curPZ = axispz.Status.Position.Ref;

                    ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, curPZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    if (curZpos > mccoord.Z.Value)
                    {
                        ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                    else
                    {
                        ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZpos, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().AbsMove(axisz, mccoord.Z.Value, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }

                    LoggerManager.Debug($"VMWaferHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}, zpos = {zpos}", isInfo: IsInfo);
                }
                else
                {
                    // TODO : 
                }

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum VMWaferHighViewMoveFunc(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            WaferCoordinate wfcoord = new WaferCoordinate();

            double curZpos = 0.0;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            wfcoord.X.Value = xpos * -1d;
            wfcoord.Y.Value = ypos * -1d;

            try
            {
                if (AbsPosAvailableCheck(mccoord))
                {
                    curZpos = axisz.Status.Position.Ref;

                    mccoord = Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(wfcoord);

                    double curPZ = 0;
                    curPZ = axispz.Status.Position.Ref;

                    ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, curZpos, curPZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value, curZpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    LoggerManager.Debug($"VMWaferHighViewMoveFunc() : xpos = {xpos}, ypos = {ypos}", isInfo: IsInfo);
                }
                else
                {
                    // TODO : 
                }

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        private bool AbsPosAvailableCheck(MachineCoordinate coord)
        {
            bool retVal = false;

            try
            {
                MachineCoordinate machineZero = this.Module.CoordinateManager().WaferHighChuckConvert.ConvertBack(new WaferCoordinate(0, 0, 0));

                if (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.RETRACT)
                {
                    if (machineZero.Z.Value < coord.Z.Value)
                    {
                        if (coord.Y.Value > 180000) //최대 갈수 있는양
                        {
                            retVal = false;
                        }
                        else
                        {
                            retVal = true;
                        }
                    }
                    else
                    {
                        retVal = true;
                    }
                }
                else if (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.EXTEND)
                {
                    var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

                    if (axispz.Status.Position.Ref < this.Module.CoordinateManager().StageCoord.MarkEncPos.Z.Value)
                    {
                        if (machineZero.Z.Value < coord.Z.Value)
                        {
                            retVal = false;
                        }
                        else
                        {
                            retVal = true;
                        }
                    }
                    else
                    {
                        retVal = false;
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return retVal;
        }

        protected EventCodeEnum NCPadDownFunc()
        {
            NeedleCleanSystemParameter ncParam = Module.StageSupervisor().NCObject.NCSysParam_IParam as NeedleCleanSystemParameter;

            EventCodeEnum ret = EventCodeEnum.NODATA;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {

                if (ncParam.NC_TYPE.Value == NC_MachineType.AIR_NC)
                {
                    var retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCLEANUNITUP, false);

                    if (retVal != IORet.NO_ERR)
                    {
                        ret = EventCodeEnum.UNDEFINED;
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }

                    int returnvalue = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICLEANUNITUP_1, false);

                    if (ret != 0)
                    {
                        ret = EventCodeEnum.UNDEFINED;
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }

                    returnvalue = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICLEANUNITUP_0, true);

                    if (ret != 0)
                    {
                        ret = EventCodeEnum.UNDEFINED;
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }

                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    double curX = 0;
                    double curY = 0;
                    double curZ = 0;

                    curX = axisx.Status.Position.Ref;
                    curY = axisy.Status.Position.Ref;
                    curZ = axisz.Status.Position.Ref;

                    ret = Module.CheckHardwareInterference(curX, curY, curZ, Module.MotionManager().GetAxis(Module.NeedleCleaner().NCAxis.AxisType.Value).Param.HomeOffset.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(Module.NeedleCleaner().NCAxis.AxisType.Value, Module.MotionManager().GetAxis(Module.NeedleCleaner().NCAxis.AxisType.Value).Param.HomeOffset.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"NCPadDownFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum NCPadUpFunc()
        {
            NeedleCleanSystemParameter ncParam = Module.StageSupervisor().NCObject.NCSysParam_IParam as NeedleCleanSystemParameter;

            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                if (ncParam.NC_TYPE.Value == NC_MachineType.AIR_NC)
                {
                    var retVal = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCLEANUNITUP, true);
                    if (retVal != IORet.NO_ERR)
                    {
                        ret = EventCodeEnum.UNDEFINED;
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }

                    int returnvalue = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICLEANUNITUP_0, false);

                    if (ret != 0)
                    {
                        ret = EventCodeEnum.UNDEFINED;
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }

                    returnvalue = Module.IOManager().IOServ.WaitForIO(Module.IOManager().IO.Inputs.DICLEANUNITUP_1, true);

                    if (ret != 0)
                    {
                        ret = EventCodeEnum.UNDEFINED;
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }

                    LoggerManager.Debug($"NCPadUpFunc");

                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    // Error
                    ret = EventCodeEnum.NEEDLE_CLEANING_TYPE_MISMATCH;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum WaferHighCamCoordMoveNCpadFunc(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            NeedleCleanSystemParameter needlesysparam = Module.StageSupervisor().NCObject.NCSysParam_IParam as NeedleCleanSystemParameter;

            double curPZ = 0;

            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                mccoord = this.Module.CoordinateManager().WaferHighNCPadConvert.ConvertBack(nccoord);

                double curZ = 0;

                curZ = axisz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, curZ, mccoord.Z.Value + offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                curPZ = axispz.Status.Position.Ref;

                if (curPZ > mccoord.Z.Value)
                {
                    // Z down first
                    ret = Module.MotionManager().AbsMove(Module.NeedleCleaner().NCAxis.AxisType.Value, mccoord.Z.Value + offsetZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(Module.NeedleCleaner().NCAxis.AxisType.Value, mccoord.Z.Value + offsetZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"WaferHighCamCoordMoveNCpadFunc(Nc: ({nccoord.X.Value:0.00}, {nccoord.Y.Value:0.00}, {nccoord.Z.Value:0.00}), Offset = {offsetZ:0.00})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum WaferLowCamCoordMoveNCpadFunc(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            NeedleCleanSystemParameter needlesysparam = Module.StageSupervisor().NCObject.NCSysParam_IParam as NeedleCleanSystemParameter;

            double curPZ = 0;

            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(Module.NeedleCleaner().NCAxis.AxisType.Value);

            try
            {
                mccoord = this.Module.CoordinateManager().WaferLowNCPadConvert.ConvertBack(nccoord);

                double curZ = 0;
                curZ = axisz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, curZ, mccoord.Z.Value + offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                curPZ = axispz.Status.Position.Ref;

                if (curPZ > mccoord.Z.Value)
                {
                    // Z down first
                    ret = Module.MotionManager().AbsMove(Module.NeedleCleaner().NCAxis.AxisType.Value, mccoord.Z.Value + offsetZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(Module.NeedleCleaner().NCAxis.AxisType.Value, mccoord.Z.Value + offsetZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"WaferLowCamCoordMoveNCpadFunc(Nc: ({nccoord.X.Value:0.00}, {nccoord.Y.Value:0.00}, {nccoord.Z.Value:0.00}), Offset = {offsetZ:0.00})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum ProbingCoordMoveNCPadFunc(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            NeedleCleanSystemParameter needlesysparam = Module.StageSupervisor().NCObject.NCSysParam_IParam as NeedleCleanSystemParameter;

            double curPZ = 0;

            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(Module.NeedleCleaner().NCAxis.AxisType.Value);

            try
            {
                mccoord = Module.CoordinateManager().WaferHighNCPadConvert.GetNCPadPinAlignedPosition(nccoord, pincoord);

                double curZ = 0;
                curZ = axisz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, curZ, mccoord.Z.Value + offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                curPZ = axispz.Status.Position.Ref;

                if (curPZ > mccoord.Z.Value + offsetZ)
                {
                    // Z down first
                    ret = Module.MotionManager().AbsMove(Module.NeedleCleaner().NCAxis.AxisType.Value, mccoord.Z.Value + offsetZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(Module.NeedleCleaner().NCAxis.AxisType.Value, mccoord.Z.Value + offsetZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"ProbingCoordMoveNCPadFunc(Nc: ({nccoord.X.Value:0.00}, {nccoord.Y.Value:0.00}, {nccoord.Z.Value:0.00}), Pin: ({pincoord.X.Value:0.00}, {pincoord.Y.Value:0.00}, {pincoord.Z.Value:0.00}), Offset = {offsetZ:0.00})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum ProbingCoordMoveNCPadFunc(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            MachineCoordinate mccoord = new MachineCoordinate();
            NeedleCleanSystemParameter needlesysparam = Module.StageSupervisor().NCObject.NCSysParam_IParam as NeedleCleanSystemParameter;

            double curPZ = 0;

            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(Module.NeedleCleaner().NCAxis.AxisType.Value);

            try
            {
                mccoord = Module.CoordinateManager().WaferHighNCPadConvert.GetNCPadPinAlignedPosition(nccoord, pincoord);

                curPZ = axispz.Status.Position.Ref;

                double curZ = 0;
                curZ = axisz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(mccoord.X.Value, mccoord.Y.Value, curZ, mccoord.Z.Value + offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var axis = Module.MotionManager().GetAxis(Module.NeedleCleaner().NCAxis.AxisType.Value);

                if (curPZ > mccoord.Z.Value)
                {
                    // Z down first
                    ret = Module.MotionManager().AbsMove(axis, mccoord.Z.Value + offsetZ, zspeed, zacc);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(mccoord.X.Value, mccoord.Y.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axis, mccoord.Z.Value + offsetZ, zspeed, zacc);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"ProbingCoordMoveNCPadFunc(Nc: ({nccoord.X.Value:0.00}, {nccoord.Y.Value:0.00}, {nccoord.Z.Value:0.00}), Pin: ({pincoord.X.Value:0.00}, {pincoord.Y.Value:0.00}, {pincoord.Z.Value:0.00}), Offset = {offsetZ:0.00}, zspeed = {zspeed}, zacc = {zacc})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveToCardHolderPositionAndCheckFunc()
        {
            EventCodeEnum retVal = EventCodeEnum.UNDEFINED;

            try
            {
                bool MoveToCardHolderPosEnable = (Module.CardChangeModule().CcSysParams_IParam as ICardChangeSysParam).MoveToCardHolderPosEnable;

                LoggerManager.Debug($"MoveToCardHolderPositionAndCheckFunc(): MoveToCardHolderPosEnable:{MoveToCardHolderPosEnable}");

                retVal = Module.CCZCLEARED(); // 센서 체크 및 움직이기전 z 내려주기 

                if (MoveToCardHolderPosEnable == true)
                {
                    LoggerManager.Debug($"MoveToCardHolderPositionAndCheckFunc(): check upmodule state - start");

                    #region ==> check upmodule down state : 하나라도 none이 아니면 IsCardExist true
                    //===> Check Carrier down
                    var rintret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIUPMODULE_LEFT_SENSOR, false, 100, 1000);

                    if (rintret != 0)
                    {
                        LoggerManager.Error($"[FAIL] {this.GetType().Name} : Error occured while monitor for io of DIUPMODULE_LEFT_SENSOR in {this.GetType()}");

                        retVal = EventCodeEnum.GP_CardChange_CARD_POD_IS_UP_STATUS;
                        Module.CardChangeModule().SetIsCardExist(true);

                        return retVal;
                    }

                    //===> Check Carrier down
                    var lintret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIUPMODULE_RIGHT_SENSOR, false, 100, 1000);

                    if (lintret != 0)
                    {
                        LoggerManager.Error($"[FAIL] {this.GetType().Name} : Error occured while monitor for io of DIUPMODULE_RIGHT_SENSOR in {this.GetType()}");

                        retVal = EventCodeEnum.GP_CardChange_CARD_POD_IS_UP_STATUS;
                        Module.CardChangeModule().SetIsCardExist(true);

                        return retVal;
                    }

                    //===> Check Carrier Not On Pod
                    var vintret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIUPMODULE_VACU_SENSOR, false, 100, 1000);

                    if (vintret != 0)
                    {
                        LoggerManager.Error($"[FAIL] {this.GetType().Name} : Error occured while monitor for io of DIUPMODULE_VACU_SENSOR in  {this.GetType()}");

                        retVal = EventCodeEnum.GP_CardChange_CARRIER_ON_POD;
                        Module.CardChangeModule().SetIsCardExist(true);

                        return retVal;
                    }

                    //===> Check Carrier Not On Pod
                    var ltintret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIUPMODULE_TOUCH_SENSOR_L, false, 100, 1000);

                    if (ltintret != 0)
                    {
                        LoggerManager.Error($"[FAIL] {this.GetType().Name} : Error occured while monitor for io of DIUPMODULE_TOUCH_SENSOR_L in  {this.GetType()}");

                        retVal = EventCodeEnum.GP_CardChange_CARRIER_ON_POD;
                        Module.CardChangeModule().SetIsCardExist(true);

                        return retVal;
                    }

                    var rtintret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIUPMODULE_TOUCH_SENSOR_R, false, 100, 1000);

                    if (rtintret != 0)
                    {
                        LoggerManager.Error($"[FAIL] {this.GetType().Name} : Error occured while monitor for io of DIUPMODULE_TOUCH_SENSOR_R in  {this.GetType()}");

                        retVal = EventCodeEnum.GP_CardChange_CARRIER_ON_POD;
                        Module.CardChangeModule().SetIsCardExist(true);

                        return retVal;
                    }

                    //===> Check Card Not On Pod
                    var entret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIUPMODULE_CARDEXIST_SENSOR, false, 100, 1000);

                    if (entret != 0)
                    {
                        LoggerManager.Error($"[FAIL] {this.GetType().Name} : Error occured while monitor for io of DIUPMODULE_CARDEXIST_SENSOR in  {this.GetType()}");

                        retVal = EventCodeEnum.GP_CardChange_EXIST_CARD_IN_STAGE;
                        Module.CardChangeModule().SetIsCardExist(true);

                        return retVal;
                    }

                    if ((rintret == 0) && (lintret == 0) && (vintret == 0) && (ltintret == 0) && (rtintret == 0) && (entret == 0))
                    {
                        retVal = EventCodeEnum.NONE;

                        LoggerManager.Debug($"[GOP CC]=> {this.GetType().Name} : Card Exist Not On Pod");
                    }

                    #endregion
                    LoggerManager.Debug($"MoveToCardHolderPositionAndCheckFunc(): check upmodule state - end");

                    LoggerManager.Debug($"MoveToCardHolderPositionAndCheckFunc(): check raise chuck - start");
                    #region ==> raise chuck
                    // 카드팟에 카드가 없을시 아래 동작

                    ICardChangeSysParam cardChangeSysParam = Module.CardChangeModule().CcSysParams_IParam as ICardChangeSysParam;

                    ProbeAxisObject xAxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
                    ProbeAxisObject yAxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
                    ProbeAxisObject tAxis = Module.MotionManager().GetAxis(EnumAxisConstants.C);
                    ProbeAxisObject zAxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

                    double zAbsPos = cardChangeSysParam.CardHolderCheckPosZ.Value;

                    //==> SW Limit Check
                    if (zAbsPos > cardChangeSysParam.CardDockPosZ.Value)
                    {
                        LoggerManager.Error($"[FAIL] {this.GetType().Name} : Z Pos SW Limit(CardDockPosZ) : {cardChangeSysParam.CardDockPosZ.Value}, Target : {zAbsPos}");

                        retVal = EventCodeEnum.MOTION_POS_SW_LIMIT_ERROR;
                        return retVal;
                    }

                    if (zAbsPos > zAxis.Param.PosSWLimit.Value)
                    {
                        LoggerManager.Error($"[FAIL] {this.GetType().Name} : Z Pos SW Limit : {zAxis.Param.PosSWLimit.Value}, Target : {zAbsPos}");

                        retVal = EventCodeEnum.MOTION_POS_SW_LIMIT_ERROR;
                        return retVal;
                    }


                    retVal = Module.CC_AxisMoveToPos(xAxis, cardChangeSysParam.CardHolderCheckPosX.Value, xAxis.Param.Speed.Value, xAxis.Param.Acceleration.Value);

                    if (retVal != EventCodeEnum.NONE)
                    {
                        return retVal;
                    }

                    retVal = Module.CC_AxisMoveToPos(yAxis, cardChangeSysParam.CardHolderCheckPosY.Value, yAxis.Param.Speed.Value, yAxis.Param.Acceleration.Value);

                    if (retVal != EventCodeEnum.NONE)
                    {
                        return retVal;
                    }

                    retVal = Module.CC_AxisMoveToPos(tAxis, cardChangeSysParam.CardHolderCheckPosT.Value, tAxis.Param.Speed.Value, tAxis.Param.Acceleration.Value);

                    if (retVal != EventCodeEnum.NONE)
                    {
                        return retVal;
                    }

                    retVal = Module.CC_AxisMoveToPos(zAxis, cardChangeSysParam.CardHolderCheckPosZ.Value, zAxis.Param.Speed.Value, zAxis.Param.Acceleration.Value);

                    if (retVal != EventCodeEnum.NONE)
                    {
                        return retVal;
                    }

                    #endregion
                    LoggerManager.Debug($"MoveToCardHolderPositionAndCheckFunc(): check raise chuck - end");

                    LoggerManager.Debug($"MoveToCardHolderPositionAndCheckFunc(): check holder exist - start");
                    #region ==> check card exist sensor & holder on topplate 에 따라서 IsCardExist true/false

                    entret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIUPMODULE_CARDEXIST_SENSOR, true, 100, 1000);

                    if (entret != 0)
                    {
                        // card not on toppate
                        entret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIUPMODULE_CARDEXIST_SENSOR, false, 100, 1000);

                        if (entret != 0)//error 
                        {
                            LoggerManager.Error($"[FAIL] {this.GetType().Name} : Error occured while monitor for io of DIUPMODULE_CARDEXIST_SENSOR in  {this.GetType()}");

                            retVal = EventCodeEnum.GP_CardChage_EXIST_CARD_ON_CARD_POD;

                            return retVal;
                        }

                        var hntret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIHOLDER_ON_TOPPLATE, false, 100, 1000);

                        if (hntret != 0)
                        {
                            LoggerManager.Error($"[FAIL] {this.GetType().Name} : Error occured while monitor for io of DIHOLDER_ON_TOPPLATE in  {this.GetType()}");

                            return retVal;
                        }

                        retVal = EventCodeEnum.GP_CardChange_NOT_EXIST_CARD_IN_STAGE;
                        Module.CardChangeModule().SetIsCardExist(false);
                    }
                    else
                    {
                        //card on topplate 
                        var hntret = Module.IOManager().IOServ.MonitorForIO(Module.IOManager().IO.Inputs.DIHOLDER_ON_TOPPLATE, true, 100, 1000);

                        if (hntret != 0)
                        {
                            LoggerManager.Error($"[FAIL] {this.GetType().Name} : Error occured while monitor for io of DIHOLDER_ON_TOPPLATE in  {this.GetType()}");

                            retVal = EventCodeEnum.GP_CardChange_NOT_EXIST_CARD_IN_STAGE;

                            if (hntret == -1)
                            {
                                retVal = EventCodeEnum.IO_PARAM_ERROR;
                            }

                            return retVal;
                        }

                        Module.CardChangeModule().SetIsCardExist(true);
                    }

                    #endregion
                    LoggerManager.Debug($"MoveToCardHolderPositionAndCheckFunc(): check holder exist - start");
                }

                retVal = Module.ZCLEARED();// CC State -> ZCleared State 
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return retVal;
        }

        protected EventCodeEnum CC_AxisMoveToPosFunc(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            double x = 0, y = 0, z = 0, t = 0;

            double curX = 0;
            double curY = 0;
            double curZ = 0;
            double curPZ = 0;

            var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
            var axist = Module.MotionManager().GetAxis(EnumAxisConstants.C);

            x = xaxis.Status.Position.Ref;
            y = yaxis.Status.Position.Ref;
            z = zaxis.Status.Position.Ref;
            t = axist.Status.Position.Ref;

            curX = xaxis.Status.Position.Ref;
            curY = yaxis.Status.Position.Ref;
            curZ = zaxis.Status.Position.Ref;
            curPZ = axispz.Status.Position.Ref;

            try
            {
                if (axis.AxisType.Value == EnumAxisConstants.X)
                {
                    x = pos;
                    ret = Module.CheckHardwareInterference_GPCC(x, curY, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Y)
                {
                    y = pos;
                    ret = Module.CheckHardwareInterference_GPCC(curX, y, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    z = pos;
                    ret = Module.CheckHardwareInterference_GPCC(curX, curY, z, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.C)
                {
                    t = pos;
                    ret = EventCodeEnum.NONE;
                }

                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (AbsPosAvailableCheck(new MachineCoordinate(x, y, z, t)))
                {
                    ret = Module.MotionManager().AbsMove(axis, pos, velScale, accScale);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    // TODO : 
                }

                LoggerManager.Debug($"CC_AxisMoveToPosFunc(): Axis = {axis.AxisType}, Pos = {pos:0.00}", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveToZClearance()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {

                var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
                double pos = axisz.Param.HomeOffset.Value;

                if (axisz != null)
                {

                    var z0Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z0);
                    var z1Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z1);
                    var z2Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z2);

                    if (Module.StageSupervisor().ProbeCardInfo.AlignState.Value == AlignStateEnum.DONE)
                    {
                        if (Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Count != 3)
                        {
                            Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                            Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                            Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                        }
                        z0Axis.Status.CompValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[0];
                        z1Axis.Status.CompValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[1];
                        z2Axis.Status.CompValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[2];
                    }
                    else
                    {
                        z0Axis.Status.CompValue = 0;
                        z1Axis.Status.CompValue = 0;
                        z2Axis.Status.CompValue = 0;
                    }

                    LoggerManager.Debug($"MoveToZClearance(): Tilt values: Z0 = {z0Axis.Status.CompValue}, Z1 = {z1Axis.Status.CompValue}, Z2 = {z2Axis.Status.CompValue}", isInfo: IsInfo);

                    ret = Module.MotionManager().AbsMove(axisz, axisz.Param.ClearedPosition.Value, axisz.Param.Speed.Value, axisz.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveToZClearance");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum MoveToZNegSWLimit()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
                double pos = axisz.Param.HomeOffset.Value;

                if (axisz != null)
                {
                    var z0Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z0);
                    var z1Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z1);
                    var z2Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z2);

                    if (Module.StageSupervisor().ProbeCardInfo.AlignState.Value == AlignStateEnum.DONE)
                    {
                        if (Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Count != 3)
                        {
                            Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                            Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                            Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset.Add(0);
                        }

                        z0Axis.Status.CompValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[0];
                        z1Axis.Status.CompValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[1];
                        z2Axis.Status.CompValue = Module.PinAligner().PinAlignInfo.AlignResult.PlaneOffset[2];
                    }
                    else
                    {
                        z0Axis.Status.CompValue = 0;
                        z1Axis.Status.CompValue = 0;
                        z2Axis.Status.CompValue = 0;
                    }

                    ret = Module.MotionManager().AbsMove(axisz, axisz.Param.NegSWLimit.Value + 500, axisz.Param.Speed.Value, axisz.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveToZClearance");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum MoveToBackPositionFunc()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
                var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

                if (yaxis != null && zaxis != null)
                {
                    ret = Module.MotionManager().StageMove(0, yaxis.Param.PosSWLimit.Value - 1000, zaxis.Param.HomeOffset.Value);
                }

                LoggerManager.Debug($"MoveToBackPositionFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveToFrontPositionFunc()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
                var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

                if (yaxis != null && zaxis != null)
                {
                    ret = Module.MotionManager().StageMove(0, yaxis.Param.NegSWLimit.Value + 1000, zaxis.Param.HomeOffset.Value);
                }

                LoggerManager.Debug($"MoveToFrontPositionFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveToCenterPositionFunc()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ProbeAxisObject zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
                ret = Module.MotionManager().StageMove(0, 0, zaxis.Param.ClearedPosition.Value, 0);

                LoggerManager.Debug($"MoveToCenterPositionFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveToNcPadChangePositionFunc()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                NeedleCleanSystemParameter needleSysParam = Module.GetParam_NcObject().NCSysParam_IParam as NeedleCleanSystemParameter;

                var xAxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
                var yAxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);

                if (needleSysParam != null &&
                    xAxis != null &&
                    yAxis != null)
                {
                    double ncPadChangeXPos = needleSysParam.CleanPadChangePosX.Value;
                    double ncPadChangeYPos = needleSysParam.CleanPadChangePosY.Value;

                    bool isXPosInRange = false;
                    bool isYPosInRange = false;

                    isXPosInRange = (xAxis.Param.NegSWLimit.Value < ncPadChangeXPos) && (ncPadChangeXPos < xAxis.Param.PosSWLimit.Value);
                    isYPosInRange = (yAxis.Param.NegSWLimit.Value < ncPadChangeYPos) && (ncPadChangeYPos < yAxis.Param.PosSWLimit.Value);

                    if (isXPosInRange && isYPosInRange)
                    {
                        Module.MotionManager().StageMove(ncPadChangeXPos, ncPadChangeYPos);
                        ret = EventCodeEnum.NONE;
                    }
                    else
                    {
                        ret = EventCodeEnum.UNDEFINED;
                    }
                }
                else
                {
                    ret = EventCodeEnum.UNDEFINED;
                }

                LoggerManager.Debug($"MoveToBackPositionFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveToPZClearance()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

                if (axispz != null)
                {
                    ret = Module.MotionManager().AbsMove(axispz, axispz.Param.HomeOffset.Value, axispz.Param.Speed.Value, axispz.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveToPZClearance");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum SetMoveWaferCam(bool value)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int retVal = -1;

            try
            {
                if (value == true)
                {
                    retVal = StageCylinderType.MoveWaferCam.Extend();
                    CylResultValidate(MethodBase.GetCurrentMethod(), retVal);

                    ret = EventCodeEnum.NONE;

                    Module.WaferCamCylinderExtended = true;

                    if (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.EXTEND)
                    {
                        Module.StageSupervisor().MarkObject.SetAlignState(AlignStateEnum.IDLE);
                    }
                }
                else
                {
                    retVal = StageCylinderType.MoveWaferCam.Retract();
                    CylResultValidate(MethodBase.GetCurrentMethod(), retVal);

                    ret = EventCodeEnum.NONE;

                    Module.WaferCamCylinderExtended = false;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected bool IsWaferCamBaseExtended()
        {
            try
            {
                if (Extensions_IParam.ProberRunMode == RunMode.EMUL)
                {
                    if (Module.WaferCamCylinderExtended == false)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                else
                {
                    if (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.RETRACT)
                    {
                        // 접혀 있음
                        return false;
                    }
                    else if (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.EXTEND)
                    {
                        // 펴져 있음
                        return true;
                    }
                    else
                    {
                        // 무빙 중... 잘 모르겠으니 일단 안전을 위해 펴져 있는 것으로 간주한다.
                        return true;
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                return true;
            }
        }

        protected EventCodeEnum MoveStageSafePos(bool zval, bool pzval, bool wafercamval, bool isDoMark = true)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int retVal = -1;

            bool isthreelegDown = false;
            var BernoulliTopHandlerAttached = Module.CoordinateManager().StageCoord.BernoulliTopHandlerAttached.Value;

            try
            {
                if (Module.WaferTransferModule().ModuleState.GetState() != ModuleStateEnum.RUNNING)
                {
                    Module.MotionManager().IsThreeLegDown(EnumAxisConstants.TRI, ref isthreelegDown);

                    if (isthreelegDown != true)
                    {
                        ret = SwitchThreeLegFunc(false, 10000);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                }
                if (zval == true)
                {
                    ret = MoveToZClearance();
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = EventCodeEnum.NONE;
                }

                if (pzval == true)
                {
                    ret = MoveToPZClearance();
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = EventCodeEnum.NONE;
                }

                if (BernoulliTopHandlerAttached == true)
                {
                    retVal = StageCylinderType.BernoulliHandlerAlign.Retract();
                    CylResultValidate(MethodBase.GetCurrentMethod(), retVal);

                    retVal = StageCylinderType.BernoulliHandlerUpDown.Retract();
                    CylResultValidate(MethodBase.GetCurrentMethod(), retVal);
                }

                if (wafercamval == true)
                {
                    if (IsWaferCamBaseExtended() == false)
                    {
                        // 이미 접혀 있음
                        Module.WaferCamCylinderExtended = false;
                    }
                    else
                    {
                        // [ComponentVerification] WaferCamBridge를 접지 않는 옵션이 켜져있는 경우 접지 않는다
                        if (Module.NoRetractWaferCamBridgeWhenMarkAlignFlag)
                        {
                            LoggerManager.Debug($"WaferCamBridge Retract is skipped");
                        }
                        else
                        {
                            retVal = StageCylinderType.MoveWaferCam.Retract();
                            CylResultValidate(MethodBase.GetCurrentMethod(), retVal);
                            Module.WaferCamCylinderExtended = false;
                        }

                        ret = EventCodeEnum.NONE;
                    }
                }
                else
                {
                    if (IsWaferCamBaseExtended() == true)
                    {
                        // 이미 펴져 있음
                        Module.WaferCamCylinderExtended = true;
                    }
                    else
                    {
                        EventCodeEnum markRetVal = EventCodeEnum.NONE;

                        double axisZsafeOffset = 15000; //마크를 봤을때 핀하이, 웨이퍼하이의 거리는 35.5mm이다 마크 보는 포지션에서 척은 pz보다 20mm높다. 
                        double axisPZsafeOffset = Module.CoordinateManager().StageCoord.MarkPosInChuckCoord.Z.Value - 5000.0;       // 35000

                        var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
                        var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
                        var markRefposZ = Module.CoordinateManager().StageCoord.RefMarkPos.Z.Value;

                        if (axisz.Status.RawPosition.Actual > markRefposZ + axisZsafeOffset)
                        {
                            LoggerManager.Debug($"MoveStageSafePos({zval}, {pzval}, {wafercamval}, {isDoMark}): Z position({axisz.Status.RawPosition.Actual:0.00}) is too high!");

                            MoveToZClearance();
                        }

                        if (axispz.Status.RawPosition.Actual > markRefposZ + axisPZsafeOffset)
                        {
                            LoggerManager.Debug($"MoveStageSafePos({zval}, {pzval}, {wafercamval}, {isDoMark}): PZ position({axispz.Status.RawPosition.Actual:0.00}) is too high!");

                            ret = MoveToPZClearance();
                            ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        }

                        retVal = StageCylinderType.MoveWaferCam.Extend();
                        CylResultValidate(MethodBase.GetCurrentMethod(), retVal);

                        Module.MarkAligner().ForceWaferCamCylinderExtended = true;

                        LoggerManager.Debug($"MarkAligner ForceWaferCamCylinderExtended set to {Module.MarkAligner().ForceWaferCamCylinderExtended}");

                        ret = EventCodeEnum.NONE;
                        Module.WaferCamCylinderExtended = true;

                        if (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.EXTEND)
                        {
                            Module.StageSupervisor().MarkObject.SetAlignState(AlignStateEnum.IDLE);
                        }

                        if (isDoMark)
                        {
                            markRetVal = Module.MarkAligner().DoMarkAlign();
                        }

                        // TODO : 이 순서가 맞나?
                        ret = MoveToPZClearance();
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                        ResultValidate(MethodBase.GetCurrentMethod(), markRetVal);
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum SetWaferCamBasePos_Mark(bool value)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int retVal = -1;

            try
            {
                if (value == true)
                {
                    Action DoSetWaferCamBasePosMark = () =>
                    {
                        double axisZsafeOffset = 15000; //마크를 봤을때 핀하이, 웨이퍼하이의 거리는 35.5mm이다 마크 보는 포지션에서 척은 pz보다 20mm높다. 
                        double axisPZsafeOffset = 35000;

                        var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
                        var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
                        var markRefposZ = Module.CoordinateManager().StageCoord.RefMarkPos.Z.Value;

                        if (axisz.Status.RawPosition.Actual > markRefposZ + axisZsafeOffset)
                        {
                            MoveToZClearance();
                        }

                        if (axispz.Status.RawPosition.Actual > markRefposZ + axisPZsafeOffset)
                        {
                            MoveToPZClearance();
                        }

                        retVal = StageCylinderType.MoveWaferCam.Extend();
                        CylResultValidate(MethodBase.GetCurrentMethod(), retVal);

                        Module.MarkAligner().ForceWaferCamCylinderExtended = true;

                        LoggerManager.Debug($"MarkAligner ForceWaferCamCylinderExtended set to {Module.MarkAligner().ForceWaferCamCylinderExtended}");

                        ret = EventCodeEnum.NONE;

                        Module.WaferCamCylinderExtended = true;

                        if (StageCylinderType.MoveWaferCam.State == CylinderStateEnum.EXTEND)
                        {
                            Module.StageSupervisor().MarkObject.SetAlignState(AlignStateEnum.IDLE);
                        }

                        // TODO : 리턴값 체크 안하는게 맞나?
                        Module.MarkAligner().DoMarkAlign();

                        ret = MoveToPZClearance();
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    };

                    if (IsWaferCamBaseExtended() == true)
                    {
                        // 이미 펴져 있고 No Retract 옵션이 켜져있음
                        if (Module.NoRetractWaferCamBridgeWhenMarkAlignFlag)
                        {
                            DoSetWaferCamBasePosMark();
                        }
                    }
                    else
                    {
                        DoSetWaferCamBasePosMark();
                    }
                }
                else
                {
                    if (IsWaferCamBaseExtended() == false)
                    {
                        // 이미 접혀 있음
                        ret = EventCodeEnum.NONE;
                    }
                    else
                    {
                        // [ComponentVerification] WaferCamBridge를 접지 않는 옵션이 켜져있는 경우 접지 않는다
                        if (Module.NoRetractWaferCamBridgeWhenMarkAlignFlag)
                        {
                            LoggerManager.Debug($"WaferCamBridge Retract is skipped");
                        }
                        else
                        {
                            retVal = StageCylinderType.MoveWaferCam.Retract();
                            CylResultValidate(MethodBase.GetCurrentMethod(), retVal);

                            Module.WaferCamCylinderExtended = false;
                        }

                        ret = EventCodeEnum.NONE;
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveStageRepeatRelMoveFunc(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int retVal = -1;
            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                int reverseXDir = 1;
                int reverseYDir = 1;

                if (this.Module.CoordinateManager().GetReverseManualMoveX() == true)
                {
                    reverseXDir = -1;
                }

                if (this.Module.CoordinateManager().GetReverseManualMoveY() == true)
                {
                    reverseYDir = -1;
                }

                ret = Module.CheckHardwareInterference(curX + xpos * reverseXDir, curY + ypos * reverseYDir, curZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                retVal = Module.MotionManager().RelMoveAsync(xpos * reverseXDir, ypos * reverseYDir, xvel, xacc, yvel, yacc);

                if (retVal != 0)
                {
                    ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveStageRepeatRelMove");

                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum MoveStageRepeatRelMoveFunc_GPCC(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int retVal = -1;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {

                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference_GPCC(curX + xpos, curY + ypos, curZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                retVal = Module.MotionManager().RelMoveAsync(xpos, ypos, xvel, xacc, yvel, yacc);

                if (retVal != 0)
                {
                    ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveStageRepeatRelMoveFunc_GPCC");

                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum WaferStageRelMoveFunc(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int retVal = -1;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(curX - xpos, curY - ypos, curZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                retVal = Module.MotionManager().StageRelMove(xpos, ypos, trjtype, ovrd);

                if (retVal != 0)
                {
                    ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = EventCodeEnum.NONE;

                LoggerManager.Debug($"WaferStageRelMoveFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum WaferStageRelMoveFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                double x = 0, y = 0, z = 0, pz = 0;

                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                if (axis.AxisType.Value == EnumAxisConstants.X)
                {
                    x = pos;
                    ret = Module.CheckHardwareInterference(curX + x, curY, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Y)
                {
                    y = pos;
                    ret = Module.CheckHardwareInterference(curX, curY + y, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    z = pos;
                    ret = Module.CheckHardwareInterference(curX, curY, curZ + z, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.PZ)
                {
                    pz = pos;
                    ret = Module.CheckHardwareInterference(curX, curY, curZ, curPZ + pz);
                }
                else
                {
                    ret = EventCodeEnum.NONE;
                }

                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().RelMove(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = EventCodeEnum.NONE;

                LoggerManager.Debug($"WaferStageRelMoveFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum PinStageRelMoveFunc(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int retVal = -1;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(curX + xpos, curY + ypos, curZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                retVal = Module.MotionManager().StageRelMove(xpos, ypos);

                if (retVal != 0)
                {
                    ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = EventCodeEnum.NONE;

                LoggerManager.Debug($"PinStageRelMoveFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum PinStageRelMoveFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);
            try
            {
                double x = 0, y = 0, z = 0, pz = 0;

                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                if (axis.AxisType.Value == EnumAxisConstants.X)
                {
                    x = pos;
                    ret = Module.CheckHardwareInterference(curX + x, curY, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Y)
                {
                    y = pos;
                    ret = Module.CheckHardwareInterference(curX, curY + y, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    z = pos;
                    ret = Module.CheckHardwareInterference(curX, curY, curZ + z, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.PZ)
                {
                    pz = pos;
                    ret = Module.CheckHardwareInterference(curX, curY, curZ, curPZ + pz);
                }

                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().RelMove(axis, pos, trjtype, ovrd);

                if (ret != EventCodeEnum.NONE)
                {
                    ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = EventCodeEnum.NONE;

                LoggerManager.Debug($"PinStageRelMoveFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum PinStageRelMoveForMappingFunc(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                double x = 0, y = 0, z = 0, pz = 0;

                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                if (axis.AxisType.Value == EnumAxisConstants.X)
                {
                    x = pos;
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Y)
                {
                    y = pos;
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    z = pos;
                }
                else if (axis.AxisType.Value == EnumAxisConstants.PZ)
                {
                    pz = pos;
                }

                ret = Module.MotionManager().RelMove(axis, pos, trjtype, ovrd);

                if (ret != EventCodeEnum.NONE)
                {
                    ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = EventCodeEnum.NONE;

                LoggerManager.Debug($"PinStageRelMoveFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum VMoveFunc(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = Module.MotionManager().VMove(axis, vel, trjtype);

                if (ret != EventCodeEnum.NONE)
                {
                    ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"VMoveFunc");

                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum MoveStopFunc(ProbeAxisObject axis)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            int retVal = -1;
            try
            {
                retVal = Module.MotionManager().Stop(axis);

                if (retVal != 0)
                {
                    ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                retVal = Module.MotionManager().AmpFaultClear(axis.AxisType.Value);

                if (retVal != 0)
                {
                    ret = EventCodeEnum.MOTION_MOVING_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = EventCodeEnum.NONE;

                LoggerManager.Debug($"MoveStopFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum AirBlowMoveFunc(double xpos, double ypos, double zpos)
        {
            double curZpos = 0.0;
            double curXpos = 0.0;
            double curYpos = 0.0;
            double curPZ = 0;

            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {

                curXpos = axisx.Status.Position.Ref;
                curYpos = axisy.Status.Position.Ref;
                curZpos = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(xpos, ypos, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().StageMove(curXpos, curYpos, zpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"AirBlowMoveFunc");

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        protected EventCodeEnum AirBlowMoveFunc(EnumAxisConstants axis, double pos, double speed, double acc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                ProbeAxisObject axismove = Module.MotionManager().GetAxis(axis);

                double x = 0, y = 0, z = 0, pz = 0;

                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                if (axismove.AxisType.Value == EnumAxisConstants.X)
                {
                    x = pos;
                    ret = Module.CheckHardwareInterference(curX + x, curY, curZ, curPZ);
                }
                else if (axismove.AxisType.Value == EnumAxisConstants.Y)
                {
                    y = pos;
                    ret = Module.CheckHardwareInterference(curX, curY + y, curZ, curPZ);
                }
                else if (axismove.AxisType.Value == EnumAxisConstants.Z)
                {
                    z = pos;
                    ret = Module.CheckHardwareInterference(curX, curY, curZ + z, curPZ);
                }
                else if (axismove.AxisType.Value == EnumAxisConstants.PZ)
                {
                    pz = pos;
                    ret = Module.CheckHardwareInterference(curX, curY, curZ, curPZ + pz);
                }
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().AbsMove(axismove, pos, speed, acc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                LoggerManager.Debug($"AirBlowMoveFunc() : axis = {axis}, pos = {pos}, speed = {speed}, acc = {acc})", isInfo: IsInfo);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum AirBlowAirOnOffFunc(bool val)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                IORet retval = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCLEAN_AIR_ON, val);

                if (retval == IORet.NO_ERR)
                {
                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    ret = EventCodeEnum.IO_DEV_CONN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum ChuckTiltMoveFunc(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = Module.MotionManager().ChuckTiltMove(rpos, ttpos);

                if (ret != EventCodeEnum.NONE)
                {
                    Module.NotifyManager().Notify(EventCodeEnum.MOTION_CHUCKTILT_ERROR);
                }

                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            LoggerManager.Debug($"ChuckTiltMoveFunc");

            return ret;
        }
        protected EventCodeEnum MoveToMarkFunc()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {

                double xpos = Module.CoordinateManager().StageCoord.RefMarkPos.X.Value;
                double ypos = Module.CoordinateManager().StageCoord.RefMarkPos.Y.Value;
                double zpos = axisz.Param.HomeOffset.Value;

                double curZpos = 0.0;
                double curXpos = 0.0;
                double curYpos = 0.0;
                double curPZ = 0;

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                curXpos = axisx.Status.Position.Ref;
                curYpos = axisy.Status.Position.Ref;
                curZpos = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(xpos, ypos, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double refPz = Module.CoordinateManager().StageCoord.RefMarkPos.Z.Value;

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().StageMove(curXpos, curYpos, zpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(EnumAxisConstants.PZ, refPz);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos, curZpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    VirtualStageConnector.VirtualStageConnector.Instance.SetPZHome((int)refPz);

                    ret = Module.MotionManager().AbsMove(EnumAxisConstants.PZ, refPz);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    LoggerManager.Debug($"MoveToMarkFunc() : xpos = {xpos}, ypos = {ypos}, refPz = {refPz}", isInfo: IsInfo);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum MoveToMarkFuncForCC()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {

                double xpos = Module.CoordinateManager().StageCoord.RefMarkPos.X.Value;
                double ypos = Module.CoordinateManager().StageCoord.RefMarkPos.Y.Value;
                double zpos = axisz.Param.HomeOffset.Value;

                double curZpos = 0.0;
                double curXpos = 0.0;
                double curYpos = 0.0;
                double curPZ = 0;

                curXpos = axisx.Status.Position.Ref;
                curYpos = axisy.Status.Position.Ref;
                curZpos = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference_GPCC(xpos, ypos, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double refPz = Module.CoordinateManager().StageCoord.RefMarkPos.Z.Value;

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().StageMove(curXpos, curYpos, zpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(EnumAxisConstants.PZ, refPz);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos, curZpos);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(EnumAxisConstants.PZ, refPz);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum StageSystemInitFunc()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            LoggerManager.Debug("[StageSystemInitFunc] Start");

            int retVal = -1;

            try
            {
                if (SystemManager.SysteMode == SystemModeEnum.Multiple)
                {
                    ret = Module.CardChangeModule().GPCardChangeInit();
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.CardChangeModule().CardChangeInit(); //현재는 CT,CCS,CCM,ROT 축 Enable만함 추후 카드체인져 상태 체크를 해야함
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug("[StageSystemInitFunc] CardChangeInit done");

                var ioret = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOTHREEPOD_COOLING_ON, true);

                if (ioret != IORet.NO_ERR)
                {
                    return EventCodeEnum.MONITORING_NEEDLE_AIR_ERROR;
                }

                for (int lightIndex = 0; lightIndex < Module.LightAdmin().GetLightChannelCount(); lightIndex++)
                {
                    Module.LightAdmin().SetLight(lightIndex, 0);
                }

                LoggerManager.Debug("[StageSystemInitFunc] LightSet Done");

                ioret = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DONEEDLECLEANAIRON, true);

                if (ioret != IORet.NO_ERR)
                {
                    return EventCodeEnum.MONITORING_THREEPOD_COOLING_ERROR;
                }

                if (ioret == IORet.NO_ERR)
                {
                    ret = Module.MotionManager().HomingTaskRun(EnumAxisConstants.PZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    LoggerManager.Debug("[StageSystemInitFunc] Axis PZ Done");

                    var axistri = Module.MotionManager().GetAxis(EnumAxisConstants.TRI);

                    ioret = Module.IOManager().IOServ.WriteBit(Module.IOManager().IO.Outputs.DOCHUCKAIRON_0, true);

                    if (ioret != IORet.NO_ERR)
                    {
                        ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }

                    LoggerManager.Debug("[StageSystemInitFunc] DOChuckAirOn_0 Done");

                    ret = Module.MotionManager().HomingTaskRun(EnumAxisConstants.TRI);

                    Module.StageSupervisor().SetWaferObjectStatus();    //TRI축 Homing 후 웨이퍼 없을 경우 척 베큠 Off
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    LoggerManager.Debug("[StageSystemInitFunc] Axis Tri Done");

                    retVal = StageCylinderType.MoveWaferCam.Retract();

                    LoggerManager.Debug("[StageSystemInitFunc] WaferCam Retract Done");

                    var z0Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z0);
                    var z1Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z1);
                    var z2Axis = Module.MotionManager().GetAxis(EnumAxisConstants.Z2);

                    z0Axis.Status.CompValue = 0;
                    z1Axis.Status.CompValue = 0;
                    z2Axis.Status.CompValue = 0;

                    if (retVal == 0)
                    {
                        ret = Module.MotionManager().HomingTaskRun(EnumAxisConstants.Z);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        LoggerManager.Debug("[StageSystemInitFunc] Axis Z Done");

                        Module.StageSupervisor().IOManager().IO.Outputs.DO_X_BRAKERELEASE.SetValue();
                        Module.StageSupervisor().IOManager().IO.Outputs.DO_Y_BRAKERELEASE.SetValue();
                        Module.StageSupervisor().IOManager().IO.Outputs.DO_STAGE_BRAKER_RELEASE.SetValue();

                        ret = Module.MotionManager().HomingTaskRun(EnumAxisConstants.Y, EnumAxisConstants.C);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        LoggerManager.Debug("[StageSystemInitFunc] Axis Y,C Done");

                        ret = Module.MotionManager().HomingTaskRun(EnumAxisConstants.X);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        LoggerManager.Debug("[StageSystemInitFunc] Axis X Done");

                        ret = EventCodeEnum.NONE;
                    }
                    else
                    {
                        ret = EventCodeEnum.STAGEMOVE_SET_WAFER_CAM_BASE_POS_ERROR;

                        return ret;
                    }

                    // Moved to after system init
                    bool isthreelelegrls = false;

                    ret = Module.MotionManager().IsRls(EnumAxisConstants.TRI, ref isthreelelegrls);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    if (isthreelelegrls == true)
                    {
                        //이미 RLS가 들어와있기때문에 
                    }
                    else
                    {
                        ret = Module.MotionManager().VMove(axistri, axistri.Param.Speed.Value * -1d, EnumTrjType.Normal);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                }
                else
                {
                    ret = EventCodeEnum.STAGEMOVE_VAC_ON_OFF_ERROR;
                }

            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }


        protected EventCodeEnum CCMoveToINFunc()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            var axisccg = Module.MotionManager().GetAxis(EnumAxisConstants.CCG);
            var axisccm = Module.MotionManager().GetAxis(EnumAxisConstants.CCM);
            var axisccs = Module.MotionManager().GetAxis(EnumAxisConstants.CCS);

            int retVal = -1;

            try
            {
                retVal = Module.MotionManager().EnableAxis(axisccm);

                if (retVal != 0)
                {
                    LoggerManager.Error($"Enable Axis CCM EEROR");
                }

                retVal = Module.MotionManager().EnableAxis(axisccs);

                if (retVal != 0)
                {
                    LoggerManager.Error($"Enable Axis CCS EEROR");
                }

                retVal = Module.MotionManager().EnableAxis(axisccg);

                if (retVal != 0)
                {
                    LoggerManager.Error($"Enable Axis CCG EEROR");
                }

                if (Module.IOManager().IO.Inputs.DICARDCHANGE_IN.Value == true)
                {
                    ret = EventCodeEnum.NONE;
                }
                else
                {
                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[3]", EnumMotorDedicatedIn.MotorDedicatedIn_FLS_RISING);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[4]", 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", (EnumMotorDedicatedIn)1);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().VMove(axisccg, 10000, EnumTrjType.Normal);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum CCMoveToIDLEFunc()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            var axisccg = Module.MotionManager().GetAxis(EnumAxisConstants.CCG);
            var axisccm = Module.MotionManager().GetAxis(EnumAxisConstants.CCM);
            var axisccs = Module.MotionManager().GetAxis(EnumAxisConstants.CCS);

            int retVal = -1;

            try
            {
                retVal = Module.MotionManager().EnableAxis(axisccm);

                if (retVal != 0)
                {
                    LoggerManager.Error($"Enable Axis CCM EEROR");
                }

                retVal = Module.MotionManager().EnableAxis(axisccs);

                if (retVal != 0)
                {
                    LoggerManager.Error($"Enable Axis CCS EEROR");
                }

                retVal = Module.MotionManager().EnableAxis(axisccg);

                if (retVal != 0)
                {
                    LoggerManager.Error($"Enable Axis CCG EEROR");
                }

                if (Module.IOManager().IO.Inputs.DICARDCHANGE_IN.Value == true)
                {
                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[3]", EnumMotorDedicatedIn.MotorDedicatedIn_HOMERISING);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[4]", 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", (EnumMotorDedicatedIn)1);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().VMove(axisccg, -10000, EnumTrjType.Normal);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else if (Module.IOManager().IO.Inputs.DICARDCHANGE_OUT.Value == true)
                {
                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[3]", EnumMotorDedicatedIn.MotorDedicatedIn_HOMERISING);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", (EnumMotorDedicatedIn)1);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[4]", 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().VMove(axisccg, 10000, EnumTrjType.Normal);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[3]", EnumMotorDedicatedIn.MotorDedicatedIn_HOMERISING);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[4]", 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", (EnumMotorDedicatedIn)1);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().VMove(axisccg, -10000, EnumTrjType.Normal);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    retVal = Module.MotionManager().WaitForAxisMotionDone(axisccm, 30000);

                    if (retVal == 0)
                    {
                        ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", 0);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[3]", EnumMotorDedicatedIn.MotorDedicatedIn_HOMERISING);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[4]", 0);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", (EnumMotorDedicatedIn)1);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);

                        ret = Module.MotionManager().VMove(axisccg, 10000, EnumTrjType.Normal);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum CCMoveToOUTFunc()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            var axisccg = Module.MotionManager().GetAxis(EnumAxisConstants.CCG);
            var axisccm = Module.MotionManager().GetAxis(EnumAxisConstants.CCM);
            var axisccs = Module.MotionManager().GetAxis(EnumAxisConstants.CCS);

            int retVal = -1;

            try
            {
                retVal = Module.MotionManager().EnableAxis(axisccm);

                if (retVal != 0)
                {
                    LoggerManager.Error($"Enable Axis CCM EEROR");
                }

                retVal = Module.MotionManager().EnableAxis(axisccs);

                if (retVal != 0)
                {
                    LoggerManager.Error($"Enable Axis CCS EEROR");
                }

                retVal = Module.MotionManager().EnableAxis(axisccg);

                if (retVal != 0)
                {
                    LoggerManager.Error($"Enable Axis CCG EEROR");
                }

                if (Module.IOManager().IO.Inputs.DICARDCHANGE_OUT.Value == true)
                {
                    // TODO : 
                }
                else
                {
                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[3]", EnumMotorDedicatedIn.MotorDedicatedIn_RLS_RISING);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[4]", 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().SetMotorStopCommand(EnumAxisConstants.CCM, "HM[1]", (EnumMotorDedicatedIn)1);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().VMove(axisccg, -10000, EnumTrjType.Normal);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        protected EventCodeEnum MoveTCW_PositionFunc()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                var xaxis = Module.MotionManager().GetAxis(EnumAxisConstants.X);
                var yaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
                var zaxis = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
                var taxis = Module.MotionManager().GetAxis(EnumAxisConstants.C);
                var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

                double curZpos = 0.0;
                double curPZ = 0;
                double offset = 10000;

                if (Module.CoordinateManager().StageCoord.TCW_Position == null)
                {
                    Module.CoordinateManager().StageCoord.TCW_Position = new CatCoordinates(xaxis.Param.PosSWLimit.Value - offset, yaxis.Param.NegSWLimit.Value + offset, zaxis.Param.ClearedPosition.Value);
                }

                if (Module.CoordinateManager().StageCoord.TCW_Position.Z.Value > -30000)
                {
                    Module.CoordinateManager().StageCoord.TCW_Position.Z.Value = zaxis.Param.ClearedPosition.Value;
                }

                double xpos = Module.CoordinateManager().StageCoord.TCW_Position.X.Value;
                double ypos = Module.CoordinateManager().StageCoord.TCW_Position.Y.Value;
                double zpos = Module.CoordinateManager().StageCoord.TCW_Position.Z.Value;

                curZpos = zaxis.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(xpos, ypos, zpos, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > zpos)
                {
                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(xpos, ypos, zpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(xpos, ypos, curZpos, 0);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(zaxis, zpos, zaxis.Param.Speed.Value, zaxis.Param.Acceleration.Value);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                LoggerManager.Debug($"MoveTCW_PositionFunc");
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        #endregion

        #region ConvertException
        protected EventCodeEnum ExceptionHandler(Exception err)
        {
            EventCodeEnum returnCode = EventCodeEnum.UNDEFINED;

            try
            {
                if (err is MotionException)
                {
                    var motEx = (MotionException)err;
                    returnCode = motEx.ErrorCode;
                }
                else if (err is InOutException)
                {
                    var ioEx = (InOutException)err;
                    returnCode = ioEx.ErrorCode;
                }
                else if (err is VisionException)
                {
                    var visionEx = (VisionException)err;
                    returnCode = visionEx.ErrorCode;
                }
                else
                {
                    LoggerManager.Debug($"ExceptionHandler(): Unspecified Exception. Ex = {err}, Message = {err.Message}");
                }
            }
            catch (Exception ex)
            {
                LoggerManager.Exception(ex);
                returnCode = EventCodeEnum.EXCEPTION;
            }

            LoggerManager.Debug($"ExceptionHandler(): Return Code = {returnCode}, Inner Exception = {err.GetType()}, Message = {err.Message}");

            return returnCode;
        }
        protected EventCodeEnum ConvertExceptionAndThrow(Exception err, EventCodeEnum retval)
        {
            try
            {
                throw err;
            }
            catch (MotionException motionexception)
            {
                retval = motionexception.ErrorCode;
                throw new MotionException($"{motionexception.Message}", motionexception.InnerException, motionexception.ErrorCode, motionexception.ReturnValue, MethodBase.GetCurrentMethod());

            }
            catch (InOutException ioexception)
            {
                retval = ioexception.ErrorCode;
                throw new InOutException($"{ioexception.Message}", ioexception.InnerException, ioexception.ErrorCode, ioexception.ReturnValue, MethodBase.GetCurrentMethod());

            }
            catch (VisionException visionexception)
            {
                retval = visionexception.ErrorCode;
                throw new VisionException($"{visionexception.Message}", visionexception.InnerException, visionexception.ErrorCode, visionexception.ReturnValue, MethodBase.GetCurrentMethod());

            }
            catch (Exception exception)
            {
                throw new Exception($"{exception.Message}", exception.InnerException);
            }
            finally
            {
                LoggerManager.Error($"[{this.GetType().Name}] ConvertException() : Return Code = {retval}");
            }
        }

        #endregion
        #region ResultValidate
        protected EventCodeEnum ResultValidate(object funcname, EventCodeEnum retcode)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            ret = retcode;

            if (retcode != EventCodeEnum.NONE)
            {
                LoggerManager.Debug($"ResultValidate Fail :  Error code = {retcode.ToString()}, fucntion name = {funcname.ToString()}");

                throw new Exception($"FunctionName: {funcname.ToString()} Returncode: {retcode.ToString()} Error occurred");
            }

            return ret;
        }
        protected EventCodeEnum CylResultValidate(object funcname, int retcode)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            if (retcode != 0)
            {
                throw new Exception($"FunctionName: {funcname.ToString()} Returncode: {retcode.ToString()} Error occurred");
            }

            return ret;
        }
        protected EventCodeEnum CheckCardChange()
        {
            //==> Card가 존재하면 Motion이 움직이면 안된다, Card Change 상태를 제외 하고는...

            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            //==> Card Change 상태이기 때문에 동작 가능.
            if (GetState() == StageStateEnum.CARDCHANGE)
            {
                ret = EventCodeEnum.NONE;
                return ret;
            }

            //==> Card Change 상태가 아니기 때문에 카드가 존재하면 움직이면 안된다.
            if (Module.IsCardExist())
            {
                ret = EventCodeEnum.GP_CardChange_CARD_POD_IS_UP_STATUS;
            }
            else
            {
                ret = EventCodeEnum.NONE;
            }

            return ret;
        }

        protected EventCodeEnum CheckTriLeg()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            bool isthreelegup = false;
            bool isthreelgdown = false;

            try
            {
                var axis = Module.MotionManager().GetAxis(EnumAxisConstants.TRI);

                ret = Module.MotionManager().IsThreeLegUp(EnumAxisConstants.TRI, ref isthreelegup);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().IsThreeLegDown(EnumAxisConstants.TRI, ref isthreelgdown);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (Module.WaferTransferModule().ModuleState.GetState() != ModuleStateEnum.RUNNING)
                {
                    if (Extensions_IParam.ProberRunMode == RunMode.EMUL || Module.MotionManager().IsEmulMode(axis))
                    {
                        ret = EventCodeEnum.NONE;
                    }
                    else if (isthreelegup == true || isthreelgdown != true)
                    {
                        ret = SwitchThreeLegFunc(false, 20000);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum CheckRotateAxis()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            ret = EventCodeEnum.NONE;

            return ret;
        }
        protected EventCodeEnum CheckStage()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckCardChange();

                if (ret == EventCodeEnum.NONE)
                {
                    ret = CheckTriLeg();

                    if (ret == EventCodeEnum.NONE)
                    {
                        ret = CheckRotateAxis();

                        if (ret != EventCodeEnum.NONE)
                        {
                            // RotateAxisError
                            ret = EventCodeEnum.STAGEMOVE_CC_AXIS_MOVE_TO_POS_ERROR;
                        }
                        else
                        {
                            // Success
                        }
                    }
                    else
                    {
                        // triLegError
                        ret = EventCodeEnum.STAGEMOVE_THREE_LEG_DOWN_ERROR;
                    }
                }
                else
                {
                    // TODO : 

                    // CC Error
                    //ret = EventCodeEnum.STAGEMOVE_CARDCHANGE_ERROR;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        protected EventCodeEnum CheckStageTrilegRotate()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckTriLeg();

                if (ret == EventCodeEnum.NONE)
                {
                    ret = CheckRotateAxis();

                    if (ret != EventCodeEnum.NONE)
                    {
                        // RotateAxisError
                        ret = EventCodeEnum.STAGEMOVE_CC_AXIS_MOVE_TO_POS_ERROR;
                    }
                    else
                    {
                        // Success
                    }
                }
                else
                {
                    // triLegError
                    ret = EventCodeEnum.STAGEMOVE_THREE_LEG_DOWN_ERROR;
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        #endregion

    }
    public class StageIDLEState : StageState
    {
        public StageIDLEState(OPUSVStageMove module) : base(module)
        {

        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.IDLE;
        }

        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CC_AxisMoveToPosFunc(axis, pos, velScale, accScale);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();
                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false);   //Z축 내리고, PZ축 내리고 , 웨이퍼카메라 접고 ,마크얼라인 안하고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PogoViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);   //Z축 내리고, PZ축 내리고 , 웨이퍼카메라 접고 ,마크얼라인 안하고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PogoViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardChageMoveToIN()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CCMoveToINFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardChageMoveToOUT()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CCMoveToOUTFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardChageMoveToIDLE()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CCMoveToIDLEFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ThreeLegUp(long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = SwitchThreeLegFunc(true, timeout);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum BernoulliHandlerhold()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                //wafer in
                ret = BernoulliHandlerholdFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함. 
                    Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함. 
                    Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CCZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new AirBlowState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.IDLE;
        }

        public override EventCodeEnum ChuckTiltMove(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ChuckTiltMoveFunc(rpos, ttpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ChuckTiltState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                try
                {
                    LoggerManager.Exception(err);
                    ret = ConvertExceptionAndThrow(err, ret);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Trace.WriteLineIf(LoggerManager.GPTraceSwitch.TraceError, ex);
                }
            }

            return ret;

        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함. 
                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));

                    ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함. 
                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));

                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }
            return ret;
        }
    }
    public class StageZClearedState : StageState
    {
        public StageZClearedState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.Z_CLEARED;
        }

        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            return SetWaferCamBasePos_Mark(value);
        }

        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CC_AxisMoveToPosFunc(axis, pos, velScale, accScale);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();
                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum CardViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false);   //Z축 내리고, PZ축 내리고 , 웨이퍼카메라 접고 ,마크얼라인 안하고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PogoViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);   //Z축 내리고, PZ축 내리고 , 웨이퍼카메라 접고 ,마크얼라인 안하고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PogoViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고

                ResultValidate(MethodBase.GetCurrentMethod(), ret);
                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함. 
                    Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함. 
                    Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum WaferLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum ThreeLegUp(long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = SwitchThreeLegFunc(true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }

        public override EventCodeEnum BernoulliHandlerhold()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                //wafer in
                ret = BernoulliHandlerholdFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return ret;
        }

        public override EventCodeEnum BernoulliHandlerrelease()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = BernoulliHandlerreleaseFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum NCPadDown()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = NCPadDownFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum NCPadUp()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = NCPadUpFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }


                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CCZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToBackPosition()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToBackPositionFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveToFrontPosition()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToFrontPositionFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveToCenterPosition()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToCenterPositionFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveToNcPadChangePosition()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToNcPadChangePositionFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new AirBlowState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
        public override EventCodeEnum ChuckTiltMove(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ChuckTiltMoveFunc(rpos, ttpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ChuckTiltState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum VMRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMRelMoveFunc(axis, pos, trjtype, ovrd);

                if (ret == EventCodeEnum.NONE)
                {
                    Module.StageSupervisorStateTransition(new VisionMappingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMAbsMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMAbsMoveFunc(axis, pos, trjtype, ovrd);

                if (ret == EventCodeEnum.NONE)
                {
                    Module.StageSupervisorStateTransition(new VisionMappingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);

                if (ret == EventCodeEnum.NONE)
                {
                    Module.StageSupervisorStateTransition(new VisionMappingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);

                if (ret == EventCodeEnum.NONE)
                {
                    Module.StageSupervisorStateTransition(new VisionMappingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMWaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);

                if (ret == EventCodeEnum.NONE)
                {
                    Module.StageSupervisorStateTransition(new VisionMappingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMWaferHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);

                if (ret == EventCodeEnum.NONE)
                {
                    Module.StageSupervisorStateTransition(new VisionMappingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMWaferHighViewMoveFunc(xpos, ypos, trjtype, ovrd);

                if (ret == EventCodeEnum.NONE)
                {
                    Module.StageSupervisorStateTransition(new VisionMappingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함. 
                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));

                    ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ExceptionHandler(err);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함. 
                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));

                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함.
                    Module.StageSupervisorStateTransition(new NC_PadViewState(Module));

                    ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingZDOWN(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZDOWNFunc(wafercoord, pincoord, overdrive, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZDownState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class StageErrorState : StageState
    {
        public StageErrorState(OPUSVStageMove module) : base(module)
        {

        }

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.ERROR;
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.ERROR;
        }

    }
    public class StageZUpState : StageState
    {
        public StageZUpState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.Z_UP;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingZDOWN(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZDOWNFunc(wafercoord, pincoord, overdrive, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZDownState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class StageZDownState : StageState
    {
        public StageZDownState(OPUSVStageMove module) : base(module)
        {
        }
        public override StageStateEnum GetState()
        {
            return StageStateEnum.Z_DOWN;
        }

        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingZUP(double overdrive)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZUPFunc(overdrive);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZUpState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingZUP(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, ProbingSpeedRateList SpeedRateList = null)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZUPFunc(wafercoord, pincoord, overdrive, SpeedRateList);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZUpState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos , NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));

                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }

        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class StageMoveToLoadPosition : StageState
    {
        public StageMoveToLoadPosition(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.MOVETOLOADPOS;
        }
        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CC_AxisMoveToPosFunc(axis, pos, velScale, accScale);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();
                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false);   //Z축 내리고, PZ축 내리고 , 웨이퍼카메라 접고 ,마크얼라인 안하고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(axis, pos, trjtype, ovrd);

                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PogoViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);   //Z축 내리고, PZ축 내리고 , 웨이퍼카메라 접고 ,마크얼라인 안하고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PogoViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum ThreeLegUp(long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                //ThreeLeg Up
                ret = SwitchThreeLegFunc(true, timeout);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }


        public override EventCodeEnum BernoulliHandlerhold()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                //wafer in
                ret = BernoulliHandlerholdFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
            }

            return ret;
        }
        public override EventCodeEnum BernoulliHandlerrelease()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = BernoulliHandlerreleaseFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();
                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);

                if (ret != EventCodeEnum.NONE)
                {
                    LoggerManager.Error($"StageMoveToLoadPosition.WaferLowViewMove: Error occurred while Move to WaferLowViewMove.");

                    return EventCodeEnum.MOTION_MOVING_ERROR;
                }

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CCZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ReadVacuum(out bool val)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = ReadVacuumFunc(out val);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                val = false;
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VacuumOnOff(bool val, bool extraVacReady, bool extraVacOn = true, long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = VacuumOnOffFunc(val, extraVacReady, extraVacOn, timeout);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum WaitForVacuum(bool val, long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = WaitForVacuumFunc(val, timeout);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MonitorForVacuum(bool val, long sustain = 0, long timeout = 0)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MonitorForVacuumFunc(val, sustain, timeout);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }


        public override EventCodeEnum ChuckMainVacOff()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = ChuckMainVacOffFunc();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new AirBlowState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ChuckTiltMove(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ChuckTiltMoveFunc(rpos, ttpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ChuckTiltState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    // TODO : 예외적으로 State를 먼저 변경 함.
                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));

                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class WaferHighViewState : StageState
    {
        public WaferHighViewState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.WAFERHIGHVIEW;
        }
        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            return SetWaferCamBasePos_Mark(value);
        }
        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (GetState() != StageStateEnum.WAFERHIGHVIEW && GetState() != StageStateEnum.WAFERLOWVIEW && GetState() != StageStateEnum.MARK)
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (GetState() != StageStateEnum.WAFERHIGHVIEW && GetState() != StageStateEnum.WAFERLOWVIEW && GetState() != StageStateEnum.MARK)
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = stagesupervisor.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum WaferHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferHighViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate whcoord = new WaferCoordinate();
                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (whcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate whcoord = new WaferCoordinate();
                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (whcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageVMove(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate whcoord = new WaferCoordinate();

                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (whcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = VMoveFunc(axis, vel, trjtype);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageMoveStop(ProbeAxisObject axis)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveStopFunc(axis);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new AirBlowState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
        public override EventCodeEnum ChuckTiltMove(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ChuckTiltMoveFunc(rpos, ttpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ChuckTiltState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class WaferLowViewState : StageState
    {
        public WaferLowViewState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.WAFERLOWVIEW;
        }
        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            return SetWaferCamBasePos_Mark(value);
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (GetState() != StageStateEnum.WAFERHIGHVIEW && GetState() != StageStateEnum.WAFERLOWVIEW && GetState() != StageStateEnum.MARK)
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (GetState() != StageStateEnum.WAFERHIGHVIEW && GetState() != StageStateEnum.WAFERLOWVIEW && GetState() != StageStateEnum.MARK)
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum WaferLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();
                WaferCoordinate wlcoord = new WaferCoordinate();
                wlcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (wlcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate wlcoord = new WaferCoordinate();
                wlcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (wlcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageVMove(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate whcoord = new WaferCoordinate();
                WaferCoordinate wlcoord = new WaferCoordinate();

                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();
                wlcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (whcoord.Z.Value < stagesupervisor.WaferRegRange && wlcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = VMoveFunc(axis, vel, trjtype);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageMoveStop(ProbeAxisObject axis)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveStopFunc(axis);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new AirBlowState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ChuckTiltMove(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ChuckTiltMoveFunc(rpos, ttpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ChuckTiltState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override ModuleStateEnum GetModuleState()
        {
            LoggerManager.Error($"WaferLowViewState.MoveToSoaking: Error occurred while Move to MoveToSoaking.");

            return ModuleStateEnum.RUNNING;
        }
    }
    public class StageTCWState : StageState
    {
        public StageTCWState(OPUSVStageMove module) : base(module)
        {
        }

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.PAUSED;
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.TCW;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class PinHighViewState : StageState
    {
        public PinHighViewState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.PINHIGHVIEW;

        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > Module.StageSupervisor().PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > Module.StageSupervisor().PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinHighViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();
                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }


        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate phcoord = new PinCoordinate();
                phcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (phcoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                PinCoordinate pcoord = new PinCoordinate();

                bool Flag = false;

                if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    pcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();
                    Flag = true;
                }

                if (Flag == true)
                {
                    if ((pcoord.Z.Value > Module.StageSupervisor().PinMaxRegRange) ||
                         (pcoord.Z.Value + pos > Module.StageSupervisor().PinMaxRegRange))
                    {
                        ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                    else
                    {
                        ret = PinStageRelMoveFunc(axis, pos, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                }
                else
                {
                    ret = PinStageRelMoveFunc(axis, pos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageVMove(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate phcoord = new PinCoordinate();
                PinCoordinate plcoord = new PinCoordinate();

                phcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();
                plcoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (phcoord.Z.Value > stagesupervisor.PinMaxRegRange && plcoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = VMoveFunc(axis, vel, trjtype);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageMoveStop(ProbeAxisObject axis)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveStopFunc(axis);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new AirBlowState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ChuckTiltMove(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ChuckTiltMoveFunc(rpos, ttpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ChuckTiltState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
    }
    public class PinLowViewState : StageState
    {
        public PinLowViewState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.PINLOWVIEW;

        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;

                    LoggerManager.Error($"PinLowViewState.WaferHighViewMove: Error occurred while Move to WaferHighViewMove.");

                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret != EventCodeEnum.NONE)
                {
                    return EventCodeEnum.MOTION_MOVING_ERROR;
                }

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > Module.StageSupervisor().PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > Module.StageSupervisor().PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret != EventCodeEnum.NONE)
                {
                    return EventCodeEnum.MOTION_MOVING_ERROR;
                }

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate plcoord = new PinCoordinate();
                plcoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (plcoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = PinStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                PinCoordinate pcoord = new PinCoordinate();

                bool Flag = false;

                if (axis.AxisType.Value == EnumAxisConstants.PZ)
                {
                    pcoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();
                    Flag = true;
                }

                if (Flag == true)
                {
                    if ((pcoord.Z.Value > Module.StageSupervisor().PinMaxRegRange) ||
                         (pcoord.Z.Value + pos > Module.StageSupervisor().PinMaxRegRange)
                        )
                    {
                        ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                    else
                    {
                        ret = PinStageRelMoveFunc(axis, pos, trjtype, ovrd);
                        ResultValidate(MethodBase.GetCurrentMethod(), ret);
                    }
                }
                else
                {
                    ret = PinStageRelMoveFunc(axis, pos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageVMove(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate phcoord = new PinCoordinate();
                PinCoordinate plcoord = new PinCoordinate();

                phcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();
                plcoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (phcoord.Z.Value > stagesupervisor.PinMaxRegRange && plcoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = VMoveFunc(axis, vel, trjtype);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageMoveStop(ProbeAxisObject axis)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveStopFunc(axis);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new AirBlowState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ChuckTiltMove(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ChuckTiltMoveFunc(rpos, ttpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ChuckTiltState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
    }
    public class ProbingState : StageState
    {
        public ProbingState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.PROBING;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearacne)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

                MachineCoordinate mccoord = new MachineCoordinate();
                double azpos = 0.0;
                azpos = axisz.Status.Position.Ref;

                mccoord = Module.CoordinateManager().WaferHighChuckConvert.GetWaferPinAlignedPosition(waferoffset, pinoffset);

                if (azpos > mccoord.Z.Value)
                {
                    ret = MoveToZClearance();
                    ret = MoveToPZClearance();
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearacne);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingZDOWN(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZDOWNFunc(wafercoord, pincoord, overdrive, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZDownState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingZUP(double overdrive)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZUPFunc(overdrive);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZUpState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingZUP(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, ProbingSpeedRateList SpeedRateList = null)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZUPFunc(wafercoord, pincoord, overdrive, SpeedRateList);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZUpState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }

        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new AirBlowState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ChuckTiltMove(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ChuckTiltMoveFunc(rpos, ttpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ChuckTiltState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
    }
    public class NC_CleaningState : StageState
    {
        public NC_CleaningState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.NC_CLEANING;
        }

        #region NC_CleaningStateMethod
        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            return SetWaferCamBasePos_Mark(value);
        }

        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum NCPadDown()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = NCPadDownFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum NCPadUp()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = NCPadUpFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingZDOWN(NCCoordinate nccoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZDOWNFunc(nccoord, pincoord, overdrive, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZDownState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                var stagesupervisor = Module.StageSupervisor();

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();
                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CC_AxisMoveToPosFunc(axis, pos, velScale, accScale);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferStageRelMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        #endregion

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
    }
    public class NC_PadViewState : StageState
    {
        public NC_PadViewState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.NC_PADVIEW;
        }

        #region NC_PadViewStateMethod

        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            return SetWaferCamBasePos_Mark(value);
        }

        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum NCPadDown()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = NCPadDownFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum NCPadUp()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = NCPadUpFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingZDOWN(NCCoordinate nccoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZDOWNFunc(nccoord, pincoord, overdrive, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZDownState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();
                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CC_AxisMoveToPosFunc(axis, pos, velScale, accScale);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate phcoord = new PinCoordinate();
                PinCoordinate plcoord = new PinCoordinate();

                phcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();
                plcoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (phcoord.Z.Value > stagesupervisor.PinMaxRegRange && plcoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (axis.AxisType.Value == EnumAxisConstants.Z || axis.AxisType.Value == EnumAxisConstants.PZ)
                {
                    axis.AxisType.Value = Module.NeedleCleaner().NCAxis.AxisType.Value;
                }

                ret = WaferStageRelMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        #endregion

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
    }
    public class NC_TouchSensorViewState : StageState
    {
        public NC_TouchSensorViewState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.NC_SENSORVIEW;
        }

        #region NC_CleaningStateMethod

        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            return SetWaferCamBasePos_Mark(value);
        }

        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                var touchsensorparam = Module.StageSupervisor().TouchSensorObject.TouchSensorParam_IParam as TouchSensorSysParameter;

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (zpos > touchsensorparam.TouchSensorRegMax.Value || zpos < touchsensorparam.TouchSensorRegMin.Value)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_TOUCHSENSOR_ERROR;

                    LoggerManager.Error($"{ret} ,target z = {zpos}, sensor Limit = {touchsensorparam.TouchSensorRegMin.Value} ~ {touchsensorparam.TouchSensorRegMax.Value}");
                }
                else
                {
                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var touchsensorparam = Module.StageSupervisor().TouchSensorObject.TouchSensorParam_IParam as TouchSensorSysParameter;

                if (zpos > touchsensorparam.TouchSensorRegMax.Value || zpos < touchsensorparam.TouchSensorRegMin.Value)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_TOUCHSENSOR_ERROR;

                    LoggerManager.Error($"{ret} ,target z = {zpos}, sensor Limit = {touchsensorparam.TouchSensorRegMin.Value} ~ {touchsensorparam.TouchSensorRegMax.Value}");
                }
                else
                {
                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }

            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate phcoord = new PinCoordinate();
                phcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (phcoord.Z.Value > stagesupervisor.PinMaxRegRange || phcoord.Z.Value < stagesupervisor.PinMinRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;

                    LoggerManager.Error($"{ret}, target z = {phcoord.Z.Value}, pin Limit = {stagesupervisor.PinMinRegRange} ~ {stagesupervisor.PinMaxRegRange}");

                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                var touchsensorparam = Module.StageSupervisor().TouchSensorObject.TouchSensorParam_IParam as TouchSensorSysParameter;

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                PinCoordinate phcoord = new PinCoordinate();
                phcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (phcoord.Z.Value > touchsensorparam.TouchSensorRegMax.Value)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_TOUCHSENSOR_ERROR;

                    LoggerManager.Error($"{ret}, target z = {phcoord.Z.Value}, sensor Limit = {touchsensorparam.TouchSensorRegMin.Value} ~ {touchsensorparam.TouchSensorRegMax.Value}");

                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                var touchsensorparam = Module.StageSupervisor().TouchSensorObject.TouchSensorParam_IParam as TouchSensorSysParameter;

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate phcoord = new PinCoordinate();
                phcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                bool IsError = false;

                if (axis.AxisType.Value == EnumAxisConstants.PZ)
                {
                    if (phcoord.Z.Value + pos > touchsensorparam.TouchSensorRegMax.Value || phcoord.Z.Value + pos < touchsensorparam.TouchSensorRegMin.Value)
                    {
                        ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_TOUCHSENSOR_ERROR;

                        LoggerManager.Error($"{ret}, target z = {phcoord.Z.Value}, sensor Limit = {touchsensorparam.TouchSensorRegMin.Value} ~ {touchsensorparam.TouchSensorRegMax.Value}");

                        IsError = true;
                    }
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    // Wrong axis
                    ret = EventCodeEnum.MOTION_INVALID_AXIS_OBJECT_ERROR;

                    LoggerManager.Error($"{ret}, command axis = {axis.AxisType.Value}");

                    IsError = true;
                }

                if (IsError == false)
                {
                    ret = WaferStageRelMoveFunc(axis, pos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        #endregion

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
    }
    public class NC_SensingState : StageState
    {
        public NC_SensingState(OPUSVStageMove module) : base(module)
        {
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.NC_SENSING;
        }

        #region NC_CleaningStateMethod

        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            return SetWaferCamBasePos_Mark(value);
        }

        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum NCPadDown()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = NCPadDownFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum NCPadUp()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = NCPadUpFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingZDOWN(NCCoordinate nccoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZDOWNFunc(nccoord, pincoord, overdrive, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZDownState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();
                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CC_AxisMoveToPosFunc(axis, pos, velScale, accScale);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate phcoord = new PinCoordinate();
                PinCoordinate plcoord = new PinCoordinate();

                phcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();
                plcoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (phcoord.Z.Value > stagesupervisor.PinMaxRegRange && plcoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate whcoord = new WaferCoordinate();
                WaferCoordinate wlcoord = new WaferCoordinate();

                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();
                wlcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (whcoord.Z.Value < stagesupervisor.WaferRegRange || wlcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        #endregion

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
    }
    public class SoakingState : StageState
    {
        public SoakingState(OPUSVStageMove module) : base(module)
        {
        }

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.SOAKING;

        }

        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new AirBlowState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);


                    Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }


        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

    }
    public class CardChangeNoWaferCamBaseState : StageState
    {
        public CardChangeNoWaferCamBaseState(OPUSVStageMove module) : base(module)
        {
        }
        #region ==> GPCC Method

        public override EventCodeEnum MoveToCardHolderPositionAndCheck()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToCardHolderPositionAndCheckFunc();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CC_AxisMoveToPosFunc(axis, pos, velScale, accScale);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CardViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false);   //Z축 내리고, PZ축 내리고 , 웨이퍼카메라 접고 ,마크얼라인 안하고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PogoViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PogoViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc_GPCC(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CCZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc_GPCC(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingOffsetPosition(double x, double y, double z, double t)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadPosFunc_GPCC(x, y, z, t);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFuncForCC();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        #endregion



        public override EventCodeEnum BernoulliHandlerrelease()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckBernoulliHandlerFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CCRotLock(long timeout)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CCRotLockSwitchFunc(true, timeout);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CCRotUnLock(long timeout)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CCRotLockSwitchFunc(false, timeout);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
        public override StageStateEnum GetState()
        {
            return StageStateEnum.CARDCHANGE;
        }
    }
    public class CardChangeState : StageState
    {
        public CardChangeState(OPUSVStageMove module) : base(module)
        {
        }

        #region ==> GPCC Method
        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;
                    return ret;
                }

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);   //Z축 내리고, PZ축 내리고 , 웨이퍼카메라 접고 ,마크얼라인 안하고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CC_AxisMoveToPosFunc(axis, pos, velScale, accScale);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveToCardHolderPositionAndCheck()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;
                    return ret;
                }

                ret = MoveToCardHolderPositionAndCheckFunc();
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum CardViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;
                    return ret;
                }

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum CardViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;
                    return ret;
                }

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = CardViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PogoViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;
                    return ret;
                }

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);   //Z축 내리고, PZ축 내리고 , 웨이퍼카메라 접고 ,마크얼라인 안하고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PogoViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;

                    return ret;
                }

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc_GPCC(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;

                    return ret;
                }

                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CCZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;

                    return ret;
                }

                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;

                    return ret;
                }

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc_GPCC(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;

                    return ret;
                }

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFuncForCC();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        #endregion
        public override EventCodeEnum ThreeLegDown(long timeout = 15000)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;

                    return ret;
                }

                //threeleg down
                ret = SwitchThreeLegFunc(false, timeout);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum BernoulliHandlerrelease()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCardPodState() == false)
                {
                    ret = EventCodeEnum.GP_CardCahnge_NOT_EXIST_CARD_ON_CARD_POD;

                    return ret;
                }

                ret = CheckBernoulliHandlerFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CCRotLock(long timeout)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CCRotLockSwitchFunc(true, timeout);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum CCRotUnLock(long timeout)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                if (Module.CardChangeModule().IsCheckCarrierIsOnPCardPod() == false)
                {
                    ret = EventCodeEnum.GP_CardChange_CARRIER_NOT_ON_POD;
                    return ret;
                }

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CCRotLockSwitchFunc(false, timeout);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
        public override StageStateEnum GetState()
        {
            return StageStateEnum.CARDCHANGE;
        }
    }
    public class TiltState : StageState
    {
        public TiltState(OPUSVStageMove module) : base(module)
        {
        }
        public override StageStateEnum GetState()
        {
            return StageStateEnum.TILT;
        }
        #region TiltMethod

        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                var stagesupervisor = Module.StageSupervisor();

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                PinCoordinate curpincoord = new PinCoordinate();

                curpincoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > Module.StageSupervisor().PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > Module.StageSupervisor().PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                PinCoordinate curpincoord = new PinCoordinate();
                curpincoord = Module.CoordinateManager().PinLowPinConvert.CurrentPosConvert();

                if (curpincoord.Z.Value > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new PinLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        #endregion

        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }
    }
    public class AirBlowState : StageState
    {
        public AirBlowState(OPUSVStageMove module) : base(module)
        {
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.AIRBLOW;
        }

        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double actualzpos = 0;
                var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);

                actualzpos = axisz.Status.Position.Ref;

                PinCoordinate pinlowcoord = new PinCoordinate();
                MachineCoordinate mccoord = new MachineCoordinate();

                pinlowcoord.Z.Value = Module.StageSupervisor().PinMinRegRange;
                mccoord = Module.CoordinateManager().PinLowPinConvert.ConvertBack(pinlowcoord);

                if (actualzpos > mccoord.Z.Value)
                {
                    ret = MoveToZClearance();
                    ret = MoveToPZClearance();

                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = AirBlowMoveFunc(xpos, ypos, zpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum AirBlowAirOnOff(bool val)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = AirBlowAirOnOffFunc(val);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum AirBlowMove(EnumAxisConstants axis, double pos, double speed, double acc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = AirBlowMoveFunc(axis, pos, speed, acc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class ChuckTiltState : StageState
    {
        public ChuckTiltState(OPUSVStageMove module) : base(module)
        {
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.CHUCKTILT;
        }

        public override EventCodeEnum ChuckTiltMove(double rpos, double ttpos)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ChuckTiltMoveFunc(rpos, ttpos);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }


        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new MarkState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class MarkState : StageState
    {
        public MarkState(OPUSVStageMove module) : base(module)
        {
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.MARK;
        }

        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (GetState() != StageStateEnum.WAFERHIGHVIEW && GetState() != StageStateEnum.WAFERLOWVIEW && GetState() != StageStateEnum.MARK)
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferHighIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            return SetWaferCamBasePos_Mark(value);
        }

        public override EventCodeEnum CCZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStageTrilegRotate();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true, false);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new CardChangeNoWaferCamBaseState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (GetState() != StageStateEnum.WAFERHIGHVIEW && GetState() != StageStateEnum.WAFERLOWVIEW && GetState() != StageStateEnum.MARK)
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowIndexMoveFunc(mach_x, mach_y, zpos, NotUseHeightProfile);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_TouchSensorViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate curwafcoord = new WaferCoordinate();
                curwafcoord = Module.CoordinateManager().WaferLowChuckConvert.CurrentPosConvert();

                if (curwafcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferLowViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }


        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinHighViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = PinLowViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new PinLowViewState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new ProbingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveLoadingPositionFunc(offsetvalue);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageMoveToLoadPosition(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new SoakingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum MoveToMark()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveToMarkFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ, zspeed, zacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_CleaningState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingCoordMoveNCPadFunc(nccoord, pincoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_SensingState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (ret == EventCodeEnum.NONE)
                {
                    ret = MovePadToPinFunc(wcoord, pincoord, zclearance);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    Module.StageSupervisorStateTransition(new NC_SensingState(Module));
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowCamCoordMoveNCpadFunc(nccoord, offsetZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new NC_PadViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate whcoord = new WaferCoordinate();
                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (whcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate whcoord = new WaferCoordinate();
                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (whcoord.Z.Value < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                if (axis.AxisType.Value == EnumAxisConstants.Z && pos < Module.StageSupervisor().WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = WaferStageRelMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageVMove(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate whcoord = new WaferCoordinate();
                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                if (whcoord.Z.Value < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = VMoveFunc(axis, vel, trjtype);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageMoveStop(ProbeAxisObject axis)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = MoveStopFunc(axis);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class VisionMappingState : StageState
    {
        public VisionMappingState(OPUSVStageMove module) : base(module)
        {
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.VISIONMAPPING;
        }

        public override EventCodeEnum StageSystemInit()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                // TODO : Return
                ZCLEARED();

                ret = StageSystemInitFunc();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageIDLEState(Module));
            }
            catch (Exception err)
            {
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos > stagesupervisor.PinMaxRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_PIN_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = PinHighViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferHighViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                if (zpos < stagesupervisor.WaferRegRange)
                {
                    ret = EventCodeEnum.MOTION_REGISTRATION_RANGE_WAFER_ERROR;
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }

                ret = MoveStageSafePos(true, true, false); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 펴고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferLowViewMoveFunc(xpos, ypos, zpos, NotUseHeightProfile, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new WaferLowViewState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MovePadToPinFunc(waferoffset, pinoffset, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingZDOWN(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true); // 안전한위치로 가고, 안전한 위치로 가고, 웨이퍼캠 접고
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZDOWNFunc(wafercoord, pincoord, overdrive, zclearance);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingZUP(double overdrive)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZUPFunc(overdrive);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ProbingZUP(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, ProbingSpeedRateList SpeedRateList = null)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = ProbingZUPFunc(wafercoord, pincoord, overdrive, SpeedRateList);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageRepeatRelMoveFunc(xpos, ypos, xvel, xacc, yvel, yacc);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0, bool NotUseHeightProfile = false)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = WaferHighIndexMoveForMappingFunc(mach_x, mach_y);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum VMRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMRelMoveFunc(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMViewMoveFunc(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMViewMoveFunc(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMWaferHighViewMove(xpos, ypos, zpos, tpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMWaferHighViewMove(xpos, ypos, zpos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = VMWaferHighViewMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                WaferCoordinate whcoord = new WaferCoordinate();
                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                ret = WaferStageRelMoveFunc(xpos, ypos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            WaferCoordinate whcoord = new WaferCoordinate();
            PinCoordinate phcoord = new PinCoordinate();

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();
                phcoord = Module.CoordinateManager().PinHighPinConvert.CurrentPosConvert();

                if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    ret = WaferStageRelMoveFunc(axis, pos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.PZ)
                {
                    ret = PinStageRelMoveForMappingFunc(axis, pos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = WaferStageRelMoveFunc(axis, pos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
        public override EventCodeEnum StageVMove(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                var stagesupervisor = Module.StageSupervisor();

                WaferCoordinate whcoord = new WaferCoordinate();
                whcoord = Module.CoordinateManager().WaferHighChuckConvert.CurrentPosConvert();

                ret = VMoveFunc(axis, vel, trjtype);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }
    }
    public class StageManualState : StageState
    {
        public StageManualState(OPUSVStageMove module) : base(module)
        {
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.RUNNING;
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.MANUAL;
        }

        public override EventCodeEnum ZCLEARED()
        {
            EventCodeEnum ret = EventCodeEnum.NODATA;

            try
            {
                ret = MoveToPZClearance();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = MoveStageSafePos(true, true, true);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                Module.StageSupervisorStateTransition(new StageZClearedState(Module));
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        public override EventCodeEnum ManualRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double x = 0, y = 0, z = 0, pz = 0;
                double curX = 0;
                double curY = 0;
                double curZ = 0;
                double curPZ = 0;

                curX = axisx.Status.Position.Ref;
                curY = axisy.Status.Position.Ref;
                curZ = axisz.Status.Position.Ref;
                curPZ = axispz.Status.Position.Ref;

                if (axis.AxisType.Value == EnumAxisConstants.X)
                {
                    x = pos;
                    ret = Module.CheckHardwareInterference(curX + x, curY, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Y)
                {
                    y = pos;
                    ret = Module.CheckHardwareInterference(curX, curY + y, curZ, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.Z)
                {
                    z = pos;
                    ret = Module.CheckHardwareInterference(curX, curY, curZ + z, curPZ);
                }
                else if (axis.AxisType.Value == EnumAxisConstants.PZ)
                {
                    pz = pos;
                    ret = Module.CheckHardwareInterference(curX, curY, curZ, curPZ + pz);
                }
                else
                {
                    ret = EventCodeEnum.NONE;
                }

                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = Module.MotionManager().RelMove(axis, pos, trjtype, ovrd);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
        public override EventCodeEnum ManualAbsMove(double posX, double posY, double posZ, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            var axisx = Module.MotionManager().GetAxis(EnumAxisConstants.X);
            var axisy = Module.MotionManager().GetAxis(EnumAxisConstants.Y);
            var axisz = Module.MotionManager().GetAxis(EnumAxisConstants.Z);
            var axist = Module.MotionManager().GetAxis(EnumAxisConstants.C);
            var axispz = Module.MotionManager().GetAxis(EnumAxisConstants.PZ);

            try
            {
                ret = CheckStage();
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                double curZpos = 0.0;
                curZpos = axisz.Status.Position.Ref;

                double curPZ = axispz.Status.Position.Ref;

                ret = Module.CheckHardwareInterference(posX, posY, posZ, curPZ);
                ResultValidate(MethodBase.GetCurrentMethod(), ret);

                if (curZpos > posZ)
                {
                    ret = Module.MotionManager().AbsMove(axisz, posZ, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().StageMove(posX, posY, posZ, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
                else
                {
                    ret = Module.MotionManager().StageMove(posX, posY, curZpos, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);

                    ret = Module.MotionManager().AbsMove(axisz, posZ, trjtype, ovrd);
                    ResultValidate(MethodBase.GetCurrentMethod(), ret);
                }
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;

        }
    }
    public class StageLockState : StageState
    {
        public StageLockState(OPUSVStageMove module) : base(module)
        {
        }
        public override ModuleStateEnum GetModuleState()
        {
            return ModuleStateEnum.PAUSED;
        }

        public override StageStateEnum GetState()
        {
            return StageStateEnum.LOCK;
        }

        public override EventCodeEnum StageUnlock()
        {
            EventCodeEnum ret = EventCodeEnum.UNDEFINED;

            try
            {
                Module.LoaderController().SetStageLock(StageLockMode.UNLOCK);

                Module.StageSupervisorStateTransition(new StageIDLEState(Module));

                ret = EventCodeEnum.NONE;
            }
            catch (Exception err)
            {
                LoggerManager.Exception(err);
                ret = ConvertExceptionAndThrow(err, ret);
            }

            return ret;
        }

        #region baseMove
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, double zpos, bool NotUseHeightProfile = false, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum TouchSensorLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum TouchSensorHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferHighViewIndexMove(long mach_x, long mach_y, double zpos = 0.0, bool NotUseHeightProfile = false)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferLowViewIndexMove(long mach_x, long mach_y, double zpos = 0.0, bool NotUseHeightProfile = false)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum PinHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum PinLowViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum PinHighViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum PinLowViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ZCLEARED()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CCZCLEARED()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MoveToBackPosition()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MoveToFrontPosition()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MoveToCenterPosition()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MoveToNcPadChangePosition()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MovePadToPin(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ProbingZDOWN(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ProbingZDOWN(double overdrive, double zclearance)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ProbingZDOWN(NCCoordinate wafercoord, PinCoordinate pincoord, double overdrive, double zclearance)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ProbingZUP(double overdrive)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ProbingZUP(WaferCoordinate wafercoord, PinCoordinate pincoord, double overdrive, ProbingSpeedRateList SpeedRateList = null)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ProbingZUP(NCCoordinate nccoord, PinCoordinate pincoord, double overdrive)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }

        public override EventCodeEnum MoveToSoaking(WaferCoordinate waferoffset, PinCoordinate pinoffset, double zclearance)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }

        public override EventCodeEnum CardViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CardViewMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum PogoViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MoveLoadingPosition(double offsetvalue)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MoveLoadingOffsetPosition(double x, double y, double z, double t)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ThreeLegDown(long timeout = 0)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ThreeLegUp(long timeout = 0)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum BernoulliHandlerrelease()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum BernoulliHandlerhold()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CCRotLock(long timeout)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CCRotUnLock(long timeout)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MOVETONEXTDIE()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum NCPadDown()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum NCPadUp()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferHighCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum WaferLowCamCoordMoveNCpad(NCCoordinate nccoord, double offsetZ)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum SetWaferCamBasePos(bool value)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum TouchSensorSensingMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum TouchSensorSensingMoveStage(WaferCoordinate wcoord, PinCoordinate pincoord, double zclearance)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
    
        public override EventCodeEnum MoveToCardHolderPositionAndCheck()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CC_AxisMoveToPos(ProbeAxisObject axis, double pos, double velScale, double accScale)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }

        public override EventCodeEnum LockCCState()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum UnLockCCState()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ReadVacuum(out bool val)
        {
            val = false;

            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum VacuumOnOff(bool val, bool extraVacReady, bool extraVacOn = true, long timeout = 0)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MoveTCW_Position()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CheckWaferStatus(bool isExist)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }

        public override EventCodeEnum WaitForVacuum(bool val, long timeout = 0)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MonitorForVacuum(bool val, long sustain = 0, long timeout = 0)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MoveStageRepeatRelMove(double xpos, double ypos, double xvel, double xacc, double yvel, double yacc)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum StageRelMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum StageRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum StageVMove(ProbeAxisObject axis, double vel, EnumTrjType trjtype)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum StageMoveStop(ProbeAxisObject axis)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum NCPadMove(NCCoordinate nccoord, PinCoordinate pincoord)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum TiltMove(ProbeAxisObject axis, double pos)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum TiltingMove(double tz1offset, double tz2offset, double tz3offset)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum AirBlowMove(double xpos, double ypos, double zpos)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum AirBlowAirOnOff(bool val)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum AirBlowMove(EnumAxisConstants axis, double pos, double speed, double acc)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ChuckTiltMove(double RPos, double TTPos)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum MoveToMark()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum StageSystemInit()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CardChageMoveToIN()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CardChageMoveToIDLE()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CardChageMoveToOUT()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum VMViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, double tpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, double zpos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum VMWaferHighViewMove(double xpos, double ypos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum VMRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum VMAbsMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ProbingCoordMoveNCPad(NCCoordinate nccoord, PinCoordinate pincoord, double offsetZ, double zspeed, double zacc)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum LoaderDoorOpen()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CardDoorOpen()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum LoaderDoorCloseRecovery()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum LoaderDoorClose()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum CardDoorClose()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum IsLoaderDoorOpen(ref bool isloaderdooropen)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum IsLoaderDoorClose(ref bool isloaderdoorclose)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum FrontDoorLock()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum FrontDoorUnLock()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum IsFrontDoorLock(ref bool isfrontdoorlock)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum IsFrontDoorUnLock(ref bool isfrontdoorunlock)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum IsFrontDoorOpen(ref bool isfrontdooropen)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum IsFrontDoorClose(ref bool isfrontdoorclose)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override bool IsHandlerholdWafer()
        {
            return false;
        }
        public override EventCodeEnum ManualZDownMove()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ManualRelMove(ProbeAxisObject axis, double pos, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override EventCodeEnum ManualAbsMove(double posX, double posY, double posZ, EnumTrjType trjtype = EnumTrjType.Normal, double ovrd = 1)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override Task<EventCodeEnum> StageHomeOffsetMove()
        {
            return Task.FromResult<EventCodeEnum>(EventCodeEnum.STAGEMOVE_LOCK);
        }
        public override EventCodeEnum StageLock()
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        // Component Verification 기능을 통한 Wafer Align 수행시 WaferCamBrige를 접지 않는 옵션에 대한 Flag를 설정하는 함수
        public override EventCodeEnum SetNoRetractWaferCamBridgeWhenMarkAlignFlag(bool isFlagOn)
        {
            return EventCodeEnum.STAGEMOVE_LOCK;
        }
        public override Task<EventCodeEnum> LoaderHomeOffsetMove()
        {
            return Task.FromResult<EventCodeEnum>(EventCodeEnum.STAGEMOVE_LOCK);
        }
        #endregion
    }
}
