//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceLibrary.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientInfo", Namespace="http://schemas.datacontract.org/2004/07/WCFRemoteService.Data")]
    [System.SerializableAttribute()]
    public partial class ClientInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SelectedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Selected {
            get {
                return this.SelectedField;
            }
            set {
                if ((this.SelectedField.Equals(value) != true)) {
                    this.SelectedField = value;
                    this.RaisePropertyChanged("Selected");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteFileInfo", Namespace="http://schemas.datacontract.org/2004/07/WCFRemoteService.Data")]
    [System.SerializableAttribute()]
    public partial class RemoteFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] FileBufferField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] FileLengthsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] FileNamesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] FileBuffer {
            get {
                return this.FileBufferField;
            }
            set {
                if ((object.ReferenceEquals(this.FileBufferField, value) != true)) {
                    this.FileBufferField = value;
                    this.RaisePropertyChanged("FileBuffer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] FileLengths {
            get {
                return this.FileLengthsField;
            }
            set {
                if ((object.ReferenceEquals(this.FileLengthsField, value) != true)) {
                    this.FileLengthsField = value;
                    this.RaisePropertyChanged("FileLengths");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] FileNames {
            get {
                return this.FileNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNamesField, value) != true)) {
                    this.FileNamesField = value;
                    this.RaisePropertyChanged("FileNames");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IClient")]
    public interface IClient {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClient/EmptyFunc", ReplyAction="http://tempuri.org/IClient/EmptyFuncResponse")]
        int EmptyFunc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClient/EmptyFunc", ReplyAction="http://tempuri.org/IClient/EmptyFuncResponse")]
        System.Threading.Tasks.Task<int> EmptyFuncAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientChannel : ServiceLibrary.Service.IClient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientClient : System.ServiceModel.ClientBase<ServiceLibrary.Service.IClient>, ServiceLibrary.Service.IClient {
        
        public ClientClient() {
        }
        
        public ClientClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int EmptyFunc() {
            return base.Channel.EmptyFunc();
        }
        
        public System.Threading.Tasks.Task<int> EmptyFuncAsync() {
            return base.Channel.EmptyFuncAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IServer")]
    public interface IServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetConnectedClients", ReplyAction="http://tempuri.org/IServer/GetConnectedClientsResponse")]
        ServiceLibrary.Service.ClientInfo[] GetConnectedClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetConnectedClients", ReplyAction="http://tempuri.org/IServer/GetConnectedClientsResponse")]
        System.Threading.Tasks.Task<ServiceLibrary.Service.ClientInfo[]> GetConnectedClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/SendData", ReplyAction="http://tempuri.org/IServer/SendDataResponse")]
        void SendData(string[] clients, ServiceLibrary.Service.RemoteFileInfo remote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/SendData", ReplyAction="http://tempuri.org/IServer/SendDataResponse")]
        System.Threading.Tasks.Task SendDataAsync(string[] clients, ServiceLibrary.Service.RemoteFileInfo remote);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerChannel : ServiceLibrary.Service.IServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerClient : System.ServiceModel.ClientBase<ServiceLibrary.Service.IServer>, ServiceLibrary.Service.IServer {
        
        public ServerClient() {
        }
        
        public ServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceLibrary.Service.ClientInfo[] GetConnectedClients() {
            return base.Channel.GetConnectedClients();
        }
        
        public System.Threading.Tasks.Task<ServiceLibrary.Service.ClientInfo[]> GetConnectedClientsAsync() {
            return base.Channel.GetConnectedClientsAsync();
        }
        
        public void SendData(string[] clients, ServiceLibrary.Service.RemoteFileInfo remote) {
            base.Channel.SendData(clients, remote);
        }
        
        public System.Threading.Tasks.Task SendDataAsync(string[] clients, ServiceLibrary.Service.RemoteFileInfo remote) {
            return base.Channel.SendDataAsync(clients, remote);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IServerDuplex", CallbackContract=typeof(ServiceLibrary.Service.IServerDuplexCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IServerDuplex {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerDuplex/RegisterServerCallback", ReplyAction="http://tempuri.org/IServerDuplex/RegisterServerCallbackResponse")]
        bool RegisterServerCallback();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerDuplex/RegisterServerCallback", ReplyAction="http://tempuri.org/IServerDuplex/RegisterServerCallbackResponse")]
        System.Threading.Tasks.Task<bool> RegisterServerCallbackAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerDuplexCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerDuplex/CheckServerConnect")]
        void CheckServerConnect();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerDuplex/OnClientAddEvent")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ServiceLibrary.Service.ClientInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ServiceLibrary.Service.ClientInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ServiceLibrary.Service.RemoteFileInfo))]
        void OnClientAddEvent(ServiceLibrary.Service.ClientInfo clientInfo, object param);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerDuplexChannel : ServiceLibrary.Service.IServerDuplex, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerDuplexClient : System.ServiceModel.DuplexClientBase<ServiceLibrary.Service.IServerDuplex>, ServiceLibrary.Service.IServerDuplex {
        
        public ServerDuplexClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServerDuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServerDuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerDuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerDuplexClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool RegisterServerCallback() {
            return base.Channel.RegisterServerCallback();
        }
        
        public System.Threading.Tasks.Task<bool> RegisterServerCallbackAsync() {
            return base.Channel.RegisterServerCallbackAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IClientDuplex", CallbackContract=typeof(ServiceLibrary.Service.IClientDuplexCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IClientDuplex {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDuplex/RegisterClientCallback", ReplyAction="http://tempuri.org/IClientDuplex/RegisterClientCallbackResponse")]
        bool RegisterClientCallback();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDuplex/RegisterClientCallback", ReplyAction="http://tempuri.org/IClientDuplex/RegisterClientCallbackResponse")]
        System.Threading.Tasks.Task<bool> RegisterClientCallbackAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientDuplexCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientDuplex/CheckClientConnect")]
        void CheckClientConnect();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientDuplex/OnGetDataEvent")]
        void OnGetDataEvent(ServiceLibrary.Service.RemoteFileInfo input);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientDuplexChannel : ServiceLibrary.Service.IClientDuplex, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientDuplexClient : System.ServiceModel.DuplexClientBase<ServiceLibrary.Service.IClientDuplex>, ServiceLibrary.Service.IClientDuplex {
        
        public ClientDuplexClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ClientDuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ClientDuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientDuplexClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientDuplexClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool RegisterClientCallback() {
            return base.Channel.RegisterClientCallback();
        }
        
        public System.Threading.Tasks.Task<bool> RegisterClientCallbackAsync() {
            return base.Channel.RegisterClientCallbackAsync();
        }
    }
}
