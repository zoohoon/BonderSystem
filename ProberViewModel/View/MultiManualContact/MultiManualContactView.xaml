<UserControl x:Class="MultiManualContact.MultiManualContactView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:LoaderStageSummaryViewModule"
             xmlns:vc="clr-namespace:ValueConverters;assembly=ValueConverters"             
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:MahAppsControls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             xmlns:cui="clr-namespace:CUI;assembly=CUI"
             xmlns:pi="clr-namespace:ProberInterfaces;assembly=ProberInterfaces"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"   
             xmlns:settingview ="clr-namespace:MultiManualContactSettingDialog;assembly=MultiManualContactSettingDialog"
             mc:Ignorable="d" x:Name="window"
            MaxHeight="1080" MaxWidth="1920">

    <UserControl.Resources>
        <local:NullToStringConverter x:Key="NullToStringConv"/>
        <local:WaferExistToBrushConverter x:Key="WaferExistToBrushConv"/>
        <local:TabSizeConverter x:Key="tabSizeConverter" />
        <local:DataSourceToLastItemConverter x:Key="DataSourceToLastItemConv"/>
        <local:AlignStateToForegroundConverter x:Key="AlignStateToForegroundConv"/>
        <local:PadCountToForegroundConverter x:Key="PadCountToForegroundConv"/>
        <local:PadCountToTextConverter x:Key="PadCountToTextConv"/>

        <!--<local:CellSelectedToBrushConverter x:Key="CellSelectedToBrushConv"/>-->
        <!--<local:CellSelectedToBorderThicknessConverter x:Key="CellSelectedToBorderThicknessConv"/>-->

        <vc:StageStateToValueTextConverter x:Key="StageStateToValueTextConverter" />
        <vc:StageStateToValueConverter x:Key="StageStateToValueConverter" />
        <vc:FoupLotStateValueConverter x:Key="FoupLotStateValueConverter" />
        <vc:StageErrorStateToVisibilityConvertet x:Key="StageErrorStateToVisibilityConvertet"/>
        <vc:AlignStateToPathFillConverter x:Key="AlignStateToPathFillConv"/>
        <vc:AlignStateToPathDataConverter x:Key="AlignStateToPathDataConv"/>
        <vc:WaferOntheChuckToColorConverter x:Key="WaferOntheChuckToColorConv"/>
        <vc:CellObjectForeGroundConverter x:Key="CellObjectForeGroundConv"/>

        <vc:ScanStateValueConverter x:Key="ScanStateValueConverter" />
        <vc:EnumGPLoaderWaferStatusTextColorConverter x:Key="EnumGPLoaderWaferStatusTextColorConverter" />

        <vc:EnumSlotTextConverter x:Key="EnumSlotTextConverter" />
        <vc:EnumSlotTextConverter1 x:Key="EnumSlotTextConverter1" />

        <vc:TimeVisibiltyConvert x:Key="TimeVisibiltyConvert" />

        <vc:GPLotStateToStringConverter1 x:Key="BtoVConv1" />
        <vc:GPLotStateToStringConverter2 x:Key="BtoVConv2" />
        <vc:GPLotStateToStringConverter3 x:Key="BtoVConv3" />
        <vc:GPLotStateToStringConverter4 x:Key="BtoVConv4" />
        <vc:StageLoaderErrorStateCon x:Key="StageLoaderErrorStateConv"/>
        <vc:ViewTargetConverter x:Key="ViewTargetConverter"/>

        <vc:SubsStatusToValueConverter x:Key="StatusToColorConv" />

        <vc:AlignStateStrToValueConverter x:Key="AlignStateStrToValueConverter" />
        
        <vc:CardStatusToValueConverter x:Key="CardStatusToColorConv" />
        <vc:ManualZUPEnableValueConverter x:Key="ManualContactEnableToColorConv" />
        <vc:ManualZUPStateValueConverter x:Key="ManualZUPStateValueConverter" />
        <vc:EnumStageWaferStatusTextConverter x:Key="WaferStatusToTextConv" />
        <vc:Stage_OD_TextConverter x:Key="Stage_OD_TextConverter" />
        <vc:EnumStageCardStatusTextConverter x:Key="CardStatusToTextConv" />

        <vc:EventBadgeBackGroundBrushConverter x:Key="EventBadgeBackGroundBrushConv"/>
        <vc:EventBadgeForeGroundBrushConverter x:Key="EventBadgeForeGroundBrushConv"/>

        <vc:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="DefaultBtn" TargetType="Button">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border" BorderThickness="0" BorderBrush="Black" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Opacity" Value="0.8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="StatusLabelStyle" TargetType="Label">
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Foreground" Value="DimGray"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="DimGray"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Height" Value="36"/>
            <Setter Property="Width" Value="120"/>
        </Style>

        <Style x:Key="GroupBoxForegroundStyle" TargetType="GroupBox">
            <Setter Property="Foreground" Value="White"/>
        </Style>

        <Style x:Key="FoupModuleNameLabelStyle" TargetType="Label">
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style>

        <Style TargetType="{x:Type TabItem}">
            <Setter Property="Width">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource tabSizeConverter}">
                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,
            AncestorType={x:Type TabControl}}" />
                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor,
            AncestorType={x:Type TabControl}}" Path="ActualWidth" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="myListViewStyle">
            <Style.Resources>
                <!-- Background of selected item when focussed -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LimeGreen" />
                <!-- Background of selected item when not focussed -->
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Green" />
            </Style.Resources>
        </Style>

        <Style x:Key="ON_OFF_ToggleBtn" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <ControlTemplate.Resources>
                            <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut"/>
                            <Storyboard x:Key="ShowRipple">
                                <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             To="0.26" Duration="0"/>
                                <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             From="1" To="2.5" Duration="0:0:0.2"/>
                                <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             From="1" To="2.5" Duration="0:0:0.2"/>
                            </Storyboard>
                            <Storyboard x:Key="HideRipple">
                                <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             To="0.26" Duration="0:0:0.3"/>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Viewbox Width="80" Margin="0,5,0,5">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition From="*" To="Checked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="-10"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="50">
                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                            <QuadraticEase EasingMode="EaseOut"/>
                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                    </EasingDoubleKeyFrame>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                        <VisualTransition From="Checked" To="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="50"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-10">
                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                            <QuadraticEase EasingMode="EaseOut"/>
                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                    </EasingDoubleKeyFrame>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"
                                                         Duration="0" To="50" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"
                                                         Duration="0" To="-10" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid>
                                <Rectangle x:Name="Track"
                                                    HorizontalAlignment="Left" Height="25"
                                                    Stroke="{x:Null}" 
                                                   VerticalAlignment="Top" Width="65" 
                                                   RadiusY="7.5" RadiusX="7.5"
                                                   Opacity="0.56"/>
                                <TextBlock  x:Name="TrackText"
                                                    VerticalAlignment="Center"
                                                    Foreground="Black"
                                                    FontSize="18"/>

                                <Grid x:Name="ThumbHolder"
                                  HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Ellipse x:Name="RippleThumb"
                                         Fill="{DynamicResource PrimaryHueLightBrush}"
                                         Height="15" Width="15"
                                         IsHitTestVisible="False"
                                         Opacity="0.26"
                                         Margin="0"
                                         HorizontalAlignment="Center" VerticalAlignment="Center"
                                         RenderTransformOrigin="0.5,0.5">
                                        <Ellipse.RenderTransform>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:ShadowAssist.CacheMode)}">
                                        <Ellipse x:Name="Thumb"
                                             Fill="#FFFAFAFA" Stroke="Gray" 
                                             HorizontalAlignment="Center" VerticalAlignment="Center"
                                             Width="25" Height="25"
                                             Margin="0,0,0,0"
                                             RenderTransformOrigin="0.5,0.5"
                                             Effect="{DynamicResource MaterialDesignShadowDepth1}">
                                        </Ellipse>
                                    </AdornerDecorator>
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                                  Margin="{TemplateBinding Padding}"
                                                  x:Name="ContentPresenter"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                  FlowDirection="LeftToRight"/>
                                    <Grid.RenderTransform>
                                        <TranslateTransform X="0" Y="0"/>
                                    </Grid.RenderTransform>
                                </Grid>
                            </Grid>
                        </Viewbox>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <!--<Setter TargetName="Thumb" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />-->
                                <Setter TargetName="Track" Property="Fill" Value="White" />
                                <Setter TargetName="Track" Property="Opacity" Value="0.80" />
                                <Setter TargetName="TrackText" Property="Text" Value="On" />
                                <Setter TargetName="TrackText" Property="HorizontalAlignment" Value="Left" />
                                <Setter TargetName="TrackText" Property="Margin" Value="10 0 0 0" />
                                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="True" />
                                    <Condition Property="materialDesign:ToggleButtonAssist.HasOnContent" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ToggleButtonAssist.OnContent)}" />
                                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ToggleButtonAssist.OnContentTemplate)}" />
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                <Setter TargetName="Track" Property="Fill" Value="{DynamicResource PrimaryHueLightBrush}" />
                                <Setter TargetName="Track" Property="Opacity" Value="0.50" />
                                <Setter TargetName="TrackText" Property="Text" Value="Off" />
                                <Setter TargetName="TrackText" Property="HorizontalAlignment" Value="Right" />
                                <Setter TargetName="TrackText" Property="Margin" Value="0 0 10 0" />
                                <!-- Need to set Foreground to Background here instead of hardcoded PrimaryHueMidBrush -->
                            </Trigger>
                            <Trigger Property="Button.IsDefaulted" Value="true"/>
                            <Trigger Property="IsMouseOver" Value="true"/>
                            <Trigger Property="IsPressed" Value="true">
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource ShowRipple}"/>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource HideRipple}"/>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Thumb" Property="Fill" Value="#BDBDBD" />
                                <Setter TargetName="Track" Property="Fill">
                                    <Setter.Value>
                                        <SolidColorBrush Color="White" Opacity=".12" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <LinearGradientBrush x:Key="ListItemHoverFill" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFF1FBFF" Offset="0"/>
            <GradientStop Color="#FFD5F1FE" Offset="1"/>
        </LinearGradientBrush>

        <SolidColorBrush x:Key="MahApps.Metro.Brushes.Badged.DisabledBackgroundBrush" Color="Transparent"/>

        <SolidColorBrush x:Key="Item.MouseOver.Background" Color="Gold"/>
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>

        <!--<Style x:Key="MyContainer" TargetType="{x:Type ListViewItem}">

            <Style.Triggers>
                
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Foreground" Value="Blue" />
                    <Setter Property="Cursor" Value="Hand"/>
                </Trigger>

                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{StaticResource ListItemHoverFill}" />
                    <Setter Property="BorderBrush" Value="#FF98DDFB" />
                    -->
        <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="#80FFFFFF" />
                    <Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />
                    <Setter TargetName="UpperHighlight" Property="Fill" Value="#40FFFFFF" />-->
        <!--
                </Trigger>
                
            </Style.Triggers>
        </Style>-->

        <ControlTemplate x:Key="ExampleButton" TargetType="{x:Type Button}">
            <Grid>
                <Border Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                        BorderBrush="Transparent" 
                        BorderThickness="1" x:Name="Border" Margin="26,-15">
                    <ContentPresenter />
                </Border>
                <Viewbox Margin="5">
                    <Path Name="SearchIcon" Data="M21,19V20H3V19L5,17V11C5,7.9 7.03,5.17 10,4.29C10,4.19 10,4.1 10,4A2,2 0 0,1 12,2A2,2 0 0,1 14,4C14,4.1 14,4.19 14,4.29C16.97,5.17 19,7.9 19,11V17L21,19M14,21A2,2 0 0,1 12,23A2,2 0 0,1 10,21" 
                              Fill="White"
                              Stretch="Fill"/>
                </Viewbox>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                    <Setter TargetName="SearchIcon" Property="Data" Value="M20.12 14.46L18 16.59L15.88 14.46L14.46 15.88L16.59 18L14.46 20.12L15.88 21.54L18 19.41L20.12 21.54L21.54 20.12L19.41 18L21.54 15.88M12 2C10.9 2 10 2.9 10 4C10 4.1 10 4.19 10 4.29C7.12 5.14 5 7.82 5 11V17L3 19V20H12.35C12.12 19.36 12 18.68 12 18C12 14.69 14.69 12 18 12C18.34 12 18.67 12.03 19 12.09V11C19 7.82 16.88 5.14 14 4.29C14 4.19 14 4.1 14 4C14 2.9 13.11 2 12 2M10 21C10 22.11 10.9 23 12 23C12.66 23 13.28 22.67 13.65 22.13C13.33 21.79 13.05 21.41 12.81 21Z"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

    </UserControl.Resources>

    <Grid VerticalAlignment="Stretch">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- Information Tap Control -->


        <!-- CELLS -->
        <Grid Grid.Column="0" MinWidth="200">

            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!--<Border Grid.Row="0" BorderThickness="2" BorderBrush="WhiteSmoke">-->

            <ListView x:Name="CellListView" ItemsSource="{Binding Stages}" 
                      Focusable="False"
                          Grid.Row="0" BorderThickness="2" 
                          ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                          ScrollViewer.VerticalScrollBarVisibility="Disabled" 
                          HorizontalContentAlignment="Stretch" 
                          VerticalContentAlignment="Stretch" >
                <!--PreviewMouseDown="CellListView_PreviewMouseDown">-->

                <!--<ListView.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Red" />
                    <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Red" />
                </ListView.Resources>-->

                <!--<ListView.Style>
                        <Style TargetType="{x:Type ListView}">
                            <Setter Property="BorderBrush" Value="White"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Margin" Value="0"/>
                            -->
                <!-- here we go -->
                <!--
                            <Style.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Red"/>
                                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Red"/>
                            </Style.Resources>
                        </Style>
                    </ListView.Style>-->

                <i:Interaction.Triggers>

                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding SelectedItemChangedCommand}"  
                                                   CommandParameter="{Binding ElementName=CellListView, Path=SelectedItems}"/>
                    </i:EventTrigger>

                    <!--<i:EventTrigger EventName="PreviewMouseDown">
                        <i:InvokeCommandAction Command="{Binding CellListViewPreviewMouseDown}"  
                                                   CommandParameter="{Binding ElementName=CellListView, Path=SelectedItems}"/>
                    </i:EventTrigger>-->

                    <!--<i:EventTrigger EventName="MouseDown">
                        <i:InvokeCommandAction Command="{Binding CellListViewPreviewMouseDown}"  
                                                   CommandParameter="{Binding ElementName=CellListView, Path=SelectedItems}"/>
                    </i:EventTrigger>-->

                </i:Interaction.Triggers>


                <ListView.ItemContainerStyle>



                    <Style TargetType="{x:Type ListViewItem}">

                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                        <Setter Property="Padding" Value="4,1"/>
                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Focusable" Value="False"/>
                            <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>-->
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>

                                        <MultiTrigger>

                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>

                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>

                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="IsSelected" Value="{Binding StageInfo.IsChecked}" />
                        <Setter Property="IsEnabled" Value="{Binding IsEnableTransfer, Mode=TwoWay}"/>

                        <!--<Style.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                    <Condition Property="Selector.IsSelectionActive" Value="true" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="Green" />
                                -->
                        <!--<Setter Property="Template" Value="{StaticResource SelectedTemplate}" />-->
                        <!--
                            </MultiTrigger>
                        </Style.Triggers>-->

                    </Style>
                </ListView.ItemContainerStyle>

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <UniformGrid Columns="{Binding CellColumn}" Rows="{Binding CellRow}" Background="Black"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Border>

                            <!--<Border.BorderBrush>
                                <MultiBinding Converter="{StaticResource CellSelectedToBrushConv}">
                                    <Binding Path="SelectedItems" ElementName="CellListView" />
                                    <Binding Path="." />
                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}" Path="DataContext.ChangedSelectedItemsCount" />
                                </MultiBinding>
                            </Border.BorderBrush>-->

                            <!--<Border.BorderThickness>
                                <MultiBinding Converter="{StaticResource CellSelectedToBorderThicknessConv}">
                                    <Binding Path="SelectedItems" ElementName="CellListView" />
                                    <Binding Path="." />
                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}" Path="DataContext.ChangedSelectedItemsCount" />
                                </MultiBinding>
                            </Border.BorderThickness>-->

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="2*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid Grid.Column="0">

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <Border Grid.Row="0" Grid.RowSpan="8"  Grid.Column="0" BorderBrush="White" BorderThickness="3"/>

                                    <Grid Grid.Row="0">

                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="5*"/>
                                        </Grid.ColumnDefinitions>


                                        <Border Grid.Column="0" BorderThickness="1" BorderBrush="White">
                                            <Grid>
                                                <Border Grid.Column="0" BorderThickness="3" Margin="2"
                                                BorderBrush="{Binding StageInfo.IsExcuteProgram, Mode=OneWay, Converter={StaticResource CellObjectForeGroundConv}}" ></Border>

                                                <Label x:Name="lb_CellIndex" Grid.Column="0" Content="{Binding Index}" Padding="0,0,0,0"
                                                   Foreground="WhiteSmoke" FontSize="16"  
                                                   FontWeight="Bold"
                                               VerticalContentAlignment="Center"
                                               HorizontalContentAlignment="Center" >
                                                </Label>
                                            </Grid>
                                        </Border>


                                        <Grid Grid.Column="1" Margin="0">
                                            <Border Grid.Column="1"  BorderBrush="White" BorderThickness="1"></Border>
                                            <StackPanel Orientation="Vertical">
                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Bottom"  Margin="0,2,0,0">
                                                    <Label Content="PV : " Margin="0,0,5,0" Padding="0" FontSize="11" FontWeight="Bold"
                                                           VerticalContentAlignment="Center" HorizontalContentAlignment="Left" Foreground="MediumPurple"/>
                                                    <Label Content="{Binding StageInfo.PV}" ContentStringFormat="{}{0:0.0}" Margin="4" Padding="0" FontSize="11" FontWeight="Bold"
                                                           VerticalContentAlignment="Center"  HorizontalContentAlignment="Left" Foreground="LightGray"/>
                                                </StackPanel>

                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,-5,0,0">
                                                    <Label Content="DP : " Margin="0,0,5,0" Padding="0" FontSize="11" FontWeight="Bold"
                                                           VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="MediumPurple"/>
                                                    <Label Content="{Binding StageInfo.DewPoint}" ContentStringFormat="{}{0:0.0}" Margin="4" Padding="0" FontSize="11" FontWeight="Bold"
                                                           VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="LightGray" />
                                                </StackPanel>
                                            </StackPanel>

                                            <Label Grid.Column="1" Margin="0,0,30,0"
                                                   Content="{Binding ManualZUPEnable}" Padding="0" 
                                                   HorizontalContentAlignment="Center"
                                                   VerticalContentAlignment="Center"
                                                   FontSize="20" 
                                                   Foreground="{Binding ManualZUPEnable,Converter={StaticResource ManualContactEnableToColorConv}}" 
                                                   FontWeight="Bold">
                                                <AutomationProperties.AutomationId>
                                                    <MultiBinding StringFormat="lblManualZUPEnable_{0}">
                                                        <Binding Path="Index"/>
                                                    </MultiBinding >
                                                </AutomationProperties.AutomationId>
                                            </Label>
                                        </Grid>




                                        <!--<Button Grid.Column="2" Command="{Binding Path=DataContext.ConnectCommand, ElementName=window}" CommandParameter="{Binding Index}" Height="30" Width="40">

                                        <materialDesign:PackIcon Kind="LanConnect" MinWidth="40"   
                                                                     HorizontalAlignment="Stretch" 
                                                                     VerticalAlignment="Stretch"
                                                                     Foreground="{Binding StageInfo.IsConnected, Mode=OneWay, Converter={StaticResource CellObjectForeGroundConv}}"/>
                                    </Button>-->

                                        <!--<Button Grid.Column="2" HorizontalAlignment="Center" HorizontalContentAlignment="Center" Margin="18,0,0,0"
                                                Height="35" 
                                                Width="35" 
                                                Command="{Binding Path=DataContext.ConnectCommand, ElementName=window}" CommandParameter="{Binding Index}" >

                                        <Button.Content>
                                            <Label Content="{Binding Index}"
                                                   Foreground="{Binding StageInfo.IsConnected, Mode=OneWay, Converter={StaticResource CellObjectForeGroundConv}}"
                                                   HorizontalAlignment="Center"
                                                   VerticalAlignment="Center"
                                                   Margin="-18,0,0,0"
                                                   FontSize="16"
                                                   FontWeight="Bold"/>
                                        </Button.Content>
                                        -->
                                        <!--<materialDesign:PackIcon Kind="LanConnect"  
                                                                     HorizontalAlignment="Stretch" 
                                                                     VerticalAlignment="Stretch"
                                                                     Foreground="{Binding StageInfo.IsConnected, Mode=OneWay, Converter={StaticResource CellObjectForeGroundConv}}"/>-->
                                        <!--
                                    </Button>-->

                                    </Grid>

                                    <Grid Grid.Row="1" Margin="5" Visibility="{Binding InfoVisibility}" >

                                    <Grid >
                                        <Rectangle Fill="{Binding ManualZUPState, Converter={StaticResource ManualZUPStateValueConverter}}" Height="34" Width="Auto"/>
                                        <Rectangle  Fill="{Binding ManualZUPState,Converter={StaticResource ManualZUPStateValueConverter}}" Opacity="0" Height="34" Width="Auto" />
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <TextBlock Text="{Binding ManualZUPState}" FontSize="15"  Foreground="Black" FontWeight="Regular"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center">
                                                <AutomationProperties.AutomationId>
                                                    <MultiBinding StringFormat="tbManualZUPState_{0}">
                                                        <Binding Path="Index"/>
                                                    </MultiBinding >
                                                </AutomationProperties.AutomationId>
                                            </TextBlock>
                                            <TextBlock Text="{Binding ManualProbingTimeStr}" FontSize="15"  Foreground="Black" FontWeight="Bold"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center">
                                                <AutomationProperties.AutomationId>
                                                    <MultiBinding StringFormat="tbManualProbingTimeStr_{0}">
                                                        <Binding Path="Index"/>
                                                    </MultiBinding >
                                                </AutomationProperties.AutomationId>                                                    
                                            </TextBlock>
                                        </StackPanel>
                                    </Grid>
                                </Grid>

                                <!-- Card -->
                                        <Grid Grid.Row="2" Margin="0,-10,0,0" Visibility="{Binding InfoVisibility}">

                                        <Label     FontSize="15" 
                                                   MinHeight="32"
                                                   FontWeight="Bold"                                      
                                                   BorderThickness="1.5" 
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center">
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="lblCardStatus_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        <MultiBinding Converter="{StaticResource CardStatusToTextConv}">
                                            <Binding Path="CardStatus" />
                                            <Binding Path="Progress"/>
                                            <Binding Path="CardObj"/>
                                        </MultiBinding>
                                        <Label.Foreground>
                                            <MultiBinding Converter="{StaticResource CardStatusToColorConv}">
                                                <Binding Path="CardStatus" />
                                                <Binding Path="CardObj.WaferState"/>
                                                <Binding Path="StageInfo.IsConnected" />
                                            </MultiBinding>
                                        </Label.Foreground>
                                        <Label.BorderBrush>
                                            <MultiBinding Converter="{StaticResource CardStatusToColorConv}">
                                                <Binding Path="CardStatus" />
                                                <Binding Path="CardObj.WaferState"/>
                                                <Binding Path="StageInfo.IsConnected" />
                                            </MultiBinding>
                                        </Label.BorderBrush>
                                    </Label>

                                </Grid>

                                <!-- Wafer -->
                                        <Grid Grid.Row="3" Margin="0,-10,0,0" Visibility="{Binding InfoVisibility}">

                                        <Label     FontSize="15" 
                                                   MinHeight="32"
                                                   Foreground="{Binding WaferStatus, Converter={StaticResource StatusToColorConv}}"
                                                   FontWeight="Bold" 
                                                   BorderBrush="{Binding WaferStatus, Converter={StaticResource StatusToColorConv}}"
                                                   BorderThickness="1.5" 
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center">
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="lblWaferStatus_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        <MultiBinding Converter="{StaticResource WaferStatusToTextConv}">
                                            <Binding Path="WaferStatus" />
                                            <Binding Path="Progress"/>
                                            <Binding Path="WaferObj"/>
                                        </MultiBinding>
                                    </Label>

                                </Grid>

                                        <Grid Grid.Row="4" Margin="0,-10,0,0" Visibility="{Binding InfoVisibility}" >

                                            <Label 
                                                   MinHeight="32"
                                                   FontSize="15" 
                                                   Foreground="White" 
                                                   FontWeight="Bold" 
                                                       BorderBrush="White"
                                                       BorderThickness="1.5"
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center"
                                                   VerticalContentAlignment="Top">
                                            <TextBlock Text="{Binding  StageInfo.LotData.DeviceName}">
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="tbDeviceName_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                            </TextBlock>
                                            </Label>
                                    </Grid>

                                        <Grid Grid.Row="6" Margin="0,-10,0,0" Visibility="{Binding InfoVisibility}">
                                        <Label Content="{Binding  StageInfo.LotData.WaferAlignState}" ContentStringFormat="Wafer Align State: {0}"
                                               MinHeight="32"
                                               FontSize="15" 
                                               Foreground="{Binding StageInfo.LotData.WaferAlignState, Converter={StaticResource AlignStateStrToValueConverter}}" 
                                               FontWeight="Bold" 
                                               BorderBrush="{Binding StageInfo.LotData.WaferAlignState, Converter={StaticResource AlignStateStrToValueConverter}}" 
                                               BorderThickness="1.5" 
                                               HorizontalAlignment="Stretch" 
                                               VerticalAlignment="Stretch" 
                                               HorizontalContentAlignment="Center"
                                               VerticalContentAlignment="Top">
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="lblWaferAlignState_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Label>
                                    </Grid>
                                        <Grid Grid.Row="5" Margin="0,-10,0,0" Visibility="{Binding InfoVisibility}">
                                        <Label Content="{Binding  StageInfo.LotData.PinAlignState}" ContentStringFormat="Pin Align State: {0}" 
                                               MinHeight="32"
                                               FontSize="15" 
                                               Foreground="{Binding StageInfo.LotData.PinAlignState, Converter={StaticResource AlignStateStrToValueConverter}}" 
                                               FontWeight="Bold" 
                                               BorderBrush="{Binding StageInfo.LotData.PinAlignState, Converter={StaticResource AlignStateStrToValueConverter}}" 
                                               BorderThickness="1.5"
                                               HorizontalAlignment="Stretch" 
                                               VerticalAlignment="Stretch" 
                                               HorizontalContentAlignment="Center"
                                               VerticalContentAlignment="Top">
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="lblPinAlignState_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Label>
                                    </Grid>


                                    <Grid Grid.Row="7" Margin="0,-12,0,0"  Visibility="{Binding InfoVisibility}">

                                        <Label MinHeight="32"
                                                   FontSize="15" 
                                                   Foreground="BlueViolet" 
                                                   FontWeight="Bold" 
                                                   BorderBrush="BlueViolet" 
                                                   BorderThickness="1.5" 
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center">
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="lblStageOD_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                            <MultiBinding Converter="{StaticResource Stage_OD_TextConverter}">
                                                <Binding Path="StageInfo.LotData.ProbingOD" />
                                                <Binding Path="StageInfo.LotData.Clearance"/>
                                            </MultiBinding>
                                        </Label>
                                    </Grid>
                                </Grid>
                                <Grid Grid.Column="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Border Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Grid.RowSpan="8"   BorderBrush="White" BorderThickness="2"/>
                                    <Grid Grid.Row="0" Grid.Column="0" Grid.RowSpan="2">
                                        <Button Background="LimeGreen" Foreground="White" IsEnabled="{Binding CellZUPBtnEnable}" Command="{Binding ElementName=CellListView, Path=DataContext.CellZUPCommand}"  CommandParameter="{Binding Index}" >Z UP
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="Stage_Zup_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Button>
                                    </Grid>
                                    <Grid Grid.Row="0" Grid.Column="1" Grid.RowSpan="2">
                                        <Button Background="LimeGreen" Foreground="White" IsEnabled="{Binding CellZDownBtnEnable}" Command="{Binding ElementName=CellListView, Path=DataContext.CellDownCommand}"  CommandParameter="{Binding Index}">Z DOWN
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="Stage_Zdown_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Button>
                                    </Grid>
                                    <Grid Grid.Row="4"  Grid.ColumnSpan="2">
                                        <Button Background="BlueViolet"  Foreground="White" IsEnabled="false" Command="{Binding ElementName=CellListView, Path=DataContext.CellManualSoakCommand}"  CommandParameter="{Binding Index}">Manual Soaking
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="Stage_ManualSoaking_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Button>
                                    </Grid>
                                    <Grid Grid.Row="5"  Grid.ColumnSpan="2">
                                        <Button Background="BlueViolet"  Foreground="White" IsEnabled="{Binding CellInspectionBtnEnable}" Command="{Binding ElementName=CellListView, Path=DataContext.CellGotoInspectionCommand}"  CommandParameter="{Binding Index}" >Inspection
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="Stage_Inspection_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Button>
                                    </Grid>
                                    <Grid Grid.Row="2" Grid.Column="0" Grid.RowSpan="2" >
                                        <Button Background="Orange"  Foreground="White" IsEnabled="{Binding CellPinAlignBtnEnable}" Command="{Binding ElementName=CellListView, Path=DataContext.CellPinAlignCommand}"  CommandParameter="{Binding Index}" Content=" Pin &#xa;align">
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="Stage_PinAlign_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Button>
                                    </Grid>
                                    <Grid Grid.Row="2" Grid.Column="1" Grid.RowSpan="2" >
                                        <Button Background="Orange"  Foreground="White" IsEnabled="{Binding CellWaferAlignBtnEnable}" Command="{Binding ElementName=CellListView, Path=DataContext.CellWaferAlignCommand}"  CommandParameter="{Binding Index}" Content="Wafer&#xa; align">
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="Stage_WaferAlign_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Button>
                                    </Grid>
                                    <Grid Grid.Row="6"  Grid.ColumnSpan="2">
                                        <Button Background="DarkBlue"  Foreground="White" IsEnabled="{Binding CellTransferBtnEnable}" Command="{Binding ElementName=CellListView, Path=DataContext.CellTransferCommand}"  CommandParameter="{Binding Index}">Transfer
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="Stage_Transfer_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Button>
                                    </Grid>
                                    <Grid Grid.Row="7"  Grid.ColumnSpan="2">
                                        <Button Background="DarkBlue"  Foreground="White" IsEnabled="{Binding CellParamSettingBtnEnable}" Command="{Binding ElementName=CellListView, Path=DataContext.CellParamSettingCommand}"  CommandParameter="{Binding Index}" >Param Setting
                                            <AutomationProperties.AutomationId>
                                                <MultiBinding StringFormat="Stage_ParamSetting_{0}">
                                                    <Binding Path="Index"/>
                                                </MultiBinding >
                                            </AutomationProperties.AutomationId>
                                        </Button>
                                    </Grid>
                                  
                                </Grid>
                                <Grid>
                                    
                                </Grid>
                                <Grid Grid.Row="1" Grid.RowSpan="7" Width="460" Height="285" Visibility="{Binding ParamVisibility}"
                                      VerticalAlignment="Bottom" Margin="2">

                                    <settingview:MainWindow 
                                                CellIndex="{Binding Path=Content, ElementName=lb_CellIndex}">
                                    </settingview:MainWindow>
                                </Grid>
                            </Grid>

                        </Border>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
            <!--</Border>-->




        </Grid>

    </Grid>
</UserControl>

