<UserControl x:Class="OperatorControl.OperatorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:OperatorControl"
             xmlns:conv="clr-namespace:ValueConverters;assembly=ValueConverters"
             xmlns:cui="clr-namespace:CUI;assembly=CUI"
             xmlns:prvm="clr-namespace:ProberViewModel"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:resources="clr-namespace:ProberViewModel.Properties"
             xmlns:pi="clr-namespace:ProberInterfaces;assembly=ProberInterfaces"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" >

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedTabControl.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <conv:LotSetupAutoFocusToStringConverter x:Key="BtoVConv" />
            <conv:LotStateToNameEditConvert x:Key="LotNameEnableConv" />
            <!--<conv:EnumBooleanConverter x:Key="EnumBooleanConv"/>-->
            <conv:EnumToBooleanConverter x:Key="EnumToBooleanConv"/>
            
            <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
            <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
            <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
            <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
            <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
            <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
            <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
            <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
            <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
            <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
            <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
            <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="-90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="180"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                        <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                    <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderStyleNoHeader" TargetType="{x:Type Expander}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                                <DockPanel>
                                    <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                                  Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" 
                                                  FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
                                                  FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" 
                                                  Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Hidden"/>
                                    <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                                      Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="6*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="0.7*"/>
            </Grid.ColumnDefinitions>

            <TextBlock Text="Lot Name : " Grid.Row="0" Foreground="White" FontSize="16"/>
            <TextBox AutomationProperties.AutomationId="EditLotNametxt" 
                     Text="{Binding LotModule.LotInfo.LotName.Value}" 
                     IsEnabled="{Binding LotOPModule.CurrentModuleState, Converter={StaticResource LotNameEnableConv}}"  
                     Grid.Row="1" FontSize="16" Style="{x:Null}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseDown" >
                        <i:InvokeCommandAction Command="{Binding EditLotNameCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
               
            </TextBox>
            <TextBlock Text="Operator Name : " Grid.Row="2" Foreground="White" FontSize="16"/>
            <TextBox AutomationProperties.AutomationId="EditOPNametxt"
                     Text="{Binding LotModule.LotInfo.OperatorID.Value}"
                     IsEnabled="{Binding LotOPModule.CurrentModuleState, Converter={StaticResource LotNameEnableConv}}" 
                     Grid.Row="3" FontSize="16" Style="{x:Null}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseDown" >
                        <i:InvokeCommandAction Command="{Binding EditOPNameCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <Separator Height="4" Background="White" Grid.Row="4"/>
        </Grid>

        <ScrollViewer VerticalScrollBarVisibility="Auto" Grid.Row="1" >
            <ScrollViewer.Resources>
                <sys:Double x:Key="{x:Static SystemParameters.VerticalScrollBarWidthKey}">25</sys:Double>
            </ScrollViewer.Resources>
            <Border BorderBrush="DarkGray" BorderThickness="0.5" CornerRadius="4">
                <Grid >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.65*"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition Height="3*"/>
                    </Grid.RowDefinitions>
                    
                    <!-- Lot Mode -->
                    <GroupBox Style="{x:Null}" Grid.Column="0" BorderBrush="#FFd6d9f4" BorderThickness="0.5" Visibility="{Binding GroupboxVisibility ,Mode=TwoWay}" Margin="4,0,0,4" FontSize="16" Foreground="LightGray">
                        <GroupBox.Header>
                            <Label FontWeight="Bold" FontSize="18" Foreground="White" Content="Lot Mode"/>
                        </GroupBox.Header>
                        <StackPanel>
                            <!--<CheckBox Margin="4" Foreground="LightGray" Content="Standard" IsChecked="{Binding StopAfterScanCST}" VerticalContentAlignment="Center"/>
                            <CheckBox Margin="4" Foreground="LightGray" Content="CP2 Process" IsChecked="{Binding StopAfterWaferLoad}"/>-->
                            <!--<CheckBox Grid.Row="4" Grid.Column="0" Margin="4" MinHeight="24" Content="Continue Lot" IsChecked="{Binding ContinueLotFlag}"/>-->
                            <cui:CheckBox AutomationProperties.AutomationId="ContinuousLotchk"
                                          Grid.Row="5" Grid.Column="0" 
                                          Margin="4" 
                                          MinHeight="24" 
                                          Foreground="LightGray" 
                                          GUID="293BDA62-28D5-4468-B02D-667EF60D898C"
                                          Content="{x:Static resources:Resources.ContinuousLot}" 
                                          IsChecked="{Binding ContinueLotFlag}"
                                          />

                            <RadioButton AutomationProperties.AutomationId="NormalProbingrdo"
                                         Foreground="White" Margin="4"
                                         Content="Normal Probing(CP1)"
                                         GroupName="LotMode"
                                         IsChecked="{Binding LotModule.LotInfo.LotMode.Value, Converter={StaticResource EnumToBooleanConv}, ConverterParameter={x:Static pi:LotModeEnum.CP1}}" VerticalContentAlignment="Center">
                            </RadioButton>

                            <RadioButton AutomationProperties.AutomationId="MultiPassProbingrdo"
                                         Foreground="White" Margin="4"
                                         Content="Multi-Pass Probing(CP2)"
                                         GroupName="LotMode"
                                         IsChecked="{Binding LotModule.LotInfo.LotMode.Value, Converter={StaticResource EnumToBooleanConv}, ConverterParameter={x:Static pi:LotModeEnum.MPP}}" VerticalContentAlignment="Center">
                            </RadioButton>

                            <RadioButton AutomationProperties.AutomationId="ContinueProbingrdo"
                                         Foreground="White" Margin="4"
                                         Content="Continue Probing"
                                         GroupName="LotMode"
                                         IsChecked="{Binding LotModule.LotInfo.LotMode.Value, Converter={StaticResource EnumToBooleanConv}, ConverterParameter={x:Static pi:LotModeEnum.CONTINUEPROBING}}" VerticalContentAlignment="Center">
                            </RadioButton>
                            
                        </StackPanel>
                    </GroupBox>
                    <!-- Stop Option -->
                    <GroupBox Style="{x:Null}" Grid.Column="1" BorderBrush="#FFd6d9f4" BorderThickness="0.5" Visibility="{Binding GroupboxVisibility ,Mode=TwoWay}" Margin="4,0,0,4"  FontSize="16" Foreground="LightGray">
                        <GroupBox.Header>
                            <Label FontWeight="Bold" FontSize="18" Foreground="White" Content="Stop Option"/>
                        </GroupBox.Header>
                        <StackPanel>
                            
                            <cui:CheckBox AutomationProperties.AutomationId="StopAfterLoadCSTchk"
                                          Margin="4" 
                                          Foreground="LightGray" 
                                          GUID="244E364B-9CF8-407E-BD85-13C34AB9EF20"
                                          Content="{x:Static resources:Resources.StopAfterLoadCST}" 
                                          IsChecked="{Binding LotModule.LotDeviceParam.OperatorStopOption.StopAfterScanCassette.Value,Mode=TwoWay}" 
                                          VerticalContentAlignment="Center"/>
                            
                            <cui:CheckBox AutomationProperties.AutomationId="StopAfterWaferLoadchk"
                                          Margin="4" 
                                          Foreground="LightGray" 
                                          GUID="F0C7CE52-FB6F-473B-B9D9-7D587A87861E"
                                          Content="{x:Static resources:Resources.StopAfterWaferLoad}"
                                          IsChecked="{Binding LotModule.LotDeviceParam.OperatorStopOption.StopAfterWaferLoad.Value,Mode=TwoWay}"/>

                            <cui:CheckBox AutomationProperties.AutomationId="EveryStopBeforeProbechk"
                                          Margin="4" 
                                          Foreground="LightGray" 
                                          Content="Every Stop Before Probe" 
                                          GUID="55DA3EE4-3FE3-41B6-94CA-2C01C0D34D18"
                                          IsChecked="{Binding LotModule.LotDeviceParam.OperatorStopOption.EveryStopBeforeProbing.Value,Mode=TwoWay}" 
                                          VerticalContentAlignment="Center"/>

                            <cui:CheckBox AutomationProperties.AutomationId="EveryStopAfterProbechk"
                                          Margin="4"
                                          Foreground="LightGray"
                                          Content="Every Stop After Probe" 
                                          GUID="86205474-2993-423D-9664-EFEE68702D7D"
                                          IsChecked="{Binding LotModule.LotDeviceParam.OperatorStopOption.EveryStopAfterProbing.Value,Mode=TwoWay}"
                                          VerticalContentAlignment="Center"/>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="51*"/>
                                    <ColumnDefinition Width="50"/>
                                    <ColumnDefinition Width="50*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <cui:CheckBox AutomationProperties.AutomationId="StopBeforeProbechk"
                                              Grid.Row="0" Grid.Column="0" 
                                              Margin="4" MinHeight="24" 
                                              Foreground="LightGray" 
                                              GUID="15A50273-0224-487C-91F1-3CC48CA243DE"
                                              Content="{x:Static resources:Resources.StopBeforeProbe}" 
                                              IsChecked="{Binding LotModule.LotDeviceParam.OperatorStopOption.StopBeforeProbing.Value,Mode=TwoWay}" 
                                              Grid.ColumnSpan="3"/>

                                <cui:CheckBox AutomationProperties.AutomationId="StopAfterProbechk"
                                              Grid.Row="1" Grid.Column="0" 
                                              Margin="4" MinHeight="24" 
                                              Foreground="LightGray"
                                              GUID="07093718-7CEB-43A7-B9CE-865FF7D76E00"
                                              Content="{x:Static resources:Resources.StopAfterProbe}"
                                              IsChecked="{Binding LotModule.LotDeviceParam.OperatorStopOption.StopAfterProbing.Value,Mode=TwoWay}" 
                                              Grid.ColumnSpan="3"/>

                                <cui:Button AutomationProperties.AutomationId="StopBeforeProbebtn"
                                            Grid.Row="0" Grid.Column="3" Margin="2" MinHeight="32" MinWidth="76" 
                                            GUID="2C64274F-AB85-4410-8942-A00FFF86C92E"
                                            Content="{x:Static resources:Resources.Set}" 
                                            Command="{Binding cmdOpenStopWaferSet}" 
                                            CommandParameter="1"/>
                                <!--Style="{DynamicResource ControlButtonStyle}"-->
                                <cui:Button AutomationProperties.AutomationId="StopAfterProbebtn"
                                            Grid.Row="1" Grid.Column="3" Margin="2" MinHeight="32" MinWidth="48" 
                                            GUID="8B99441C-C4FA-4B16-B2A3-3618806F44BD"
                                            Content="{x:Static resources:Resources.Set}" 
                                            Command="{Binding cmdOpenStopWaferSet}" 
                                            CommandParameter="2"/>
                                <!--Style="{DynamicResource ControlButtonStyle}"-->

                            </Grid>

                            <!--<CheckBox Grid.Row="4" Grid.Column="0" Margin="4" MinHeight="24" Content="{x:Static resources:Resources.StopBeforeRetest}" IsChecked="{Binding StopBeforeRetest}"/>-->
                            <!--<CheckBox Grid.Row="5" Grid.Column="0" Margin="4" MinHeight="24" Content="{x:Static resources:Resources.ContinuousLot}" IsChecked="{Binding ContinueLotFlag}"/>-->
                        </StackPanel>
                    </GroupBox>

                    <Expander Margin="4,0,0,4" Grid.Row="1" Grid.ColumnSpan="2" IsExpanded="{Binding OpenStopWaferSet ,Mode=TwoWay}" Visibility="{Binding ExpanderVisibility ,Mode=TwoWay}" Header="{Binding StopWaferSetHeader}">
                        <Border BorderBrush="LightGray" BorderThickness="0.5">
                            <StackPanel>
                                <!--<Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Label  Grid.Column="0" FontSize="16" FontWeight="Bold" HorizontalContentAlignment="CenteEveryStopAfterProbingr" VerticalContentAlignment="Center" Content="{Binding StopWaferSetHeader}" />
                                    <Button Grid.Column="1" HorizontalAlignment="Right" MinHeight="32" MinWidth="48" FontWeight="Bold" Content="{x:Static resources:Resources.Close}" Command="{Binding cmdCloseStopWaferSet}" />
                                </Grid>-->
                                <StackPanel Orientation="Horizontal" >
                                    <Button AutomationProperties.AutomationId="WaferSelectAllbtn" 
                                            Margin="12, 12, 5, 12" MinHeight="52" Background="YellowGreen" Width="200" FontSize="20" Content="Select All" >
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Click">
                                                <i:InvokeCommandAction Command="{Binding SelectAllBtn.Command}"
                                                   CommandParameter="{Binding SelectAllBtn.CommandParameter}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </Button>

                                    <Button AutomationProperties.AutomationId="WaferClearAllbtn" 
                                             Margin="0, 12, 12, 12" MinHeight="52" Background="Silver" Width="200"  Content="Clear All"  FontSize="20">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Click">
                                                <i:InvokeCommandAction Command="{Binding ClearAllBtn.Command}"
                                                   CommandParameter="{Binding ClearAllBtn.CommandParameter}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </Button>

                                </StackPanel>
                                <Border BorderBrush="LightGray" BorderThickness="1" Margin="2">
                                    <StackPanel>
                                        <prvm:UcWaferSelectionView Height="800"  Width="auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                    </StackPanel>
                                </Border>
                               
                                <!--<Grid Margin="4">
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>

                                    <ToggleButton Grid.Row="0"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="1st Wafer"  Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[0]}"/>
                                    <ToggleButton Grid.Row="1"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="2nd Wafer"  Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[1]}"/>
                                    <ToggleButton Grid.Row="2"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="3th Wafer"  Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[2]}"/>
                                    <ToggleButton Grid.Row="3"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="4th Wafer"  Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[3]}"/>
                                    <ToggleButton Grid.Row="4"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="5th Wafer"  Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[4]}"/>
                                    <ToggleButton Grid.Row="5"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="6th Wafer"  Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[5]}"/>
                                    <ToggleButton Grid.Row="6"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="7th Wafer"  Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[6]}"/>
                                    <ToggleButton Grid.Row="7"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="8th Wafer"  Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[7]}"/>
                                    <ToggleButton Grid.Row="8"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="9th Wafer"  Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[8]}"/>
                                    <ToggleButton Grid.Row="9"  FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="10th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[9]}"/>
                                    <ToggleButton Grid.Row="10" FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="11th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[10]}"/>
                                    <ToggleButton Grid.Row="11" FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="12th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[11]}"/>
                                    <ToggleButton Grid.Row="12" FontWeight="Bold" Grid.Column="0" Margin="2" MinHeight="32" Content="13th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[12]}"/>

                                    <ToggleButton Grid.Row="0"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="14th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[13]}"/>
                                    <ToggleButton Grid.Row="1"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="15th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[14]}"/>
                                    <ToggleButton Grid.Row="2"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="16th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[15]}"/>
                                    <ToggleButton Grid.Row="3"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="17th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[16]}"/>
                                    <ToggleButton Grid.Row="4"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="18th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[17]}"/>
                                    <ToggleButton Grid.Row="5"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="19th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[18]}"/>
                                    <ToggleButton Grid.Row="6"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="20th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[19]}"/>
                                    <ToggleButton Grid.Row="7"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="21th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[20]}"/>
                                    <ToggleButton Grid.Row="8"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="22th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[21]}"/>
                                    <ToggleButton Grid.Row="9"  FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="23th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[22]}"/>
                                    <ToggleButton Grid.Row="10" FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="24th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[23]}"/>
                                    <ToggleButton Grid.Row="11" FontWeight="Bold" Grid.Column="1" Margin="2" MinHeight="32" Content="25th Wafer" Style="{x:Null}" Command="{Binding SetStopSetting}" IsChecked="{Binding tmpStopWaferSet[24]}"/>

                                    <Button Grid.Row="13" Grid.Column="0" Margin="2, 12, 2, 2" MinHeight="32" Content="Select All" 
                                            Command="{Binding SelectAllStopWaferSet}"
                                            Style="{DynamicResource ControlButtonStyle}"/>
                                    <Button Grid.Row="13" Grid.Column="1" Margin="2, 12, 2, 2" MinHeight="32" Content="Clear All"  
                                            Command="{Binding ClearAllStopWaferSet}"
                                            Style="{DynamicResource ControlButtonStyle}"/>
                                </Grid>-->
                            </StackPanel>
                        </Border>
                    </Expander>

                    <!-- Probing Mode -->
                    <!--<GroupBox Style="{x:Null}" BorderBrush="#FFd6d9f4" BorderThickness="0.5" Margin="4, 0" FontSize="16" Foreground="LightGray">
                        <GroupBox.Header>
                            <Label FontWeight="Bold" FontSize="18" Foreground="LightGreen" Content="Probing Mode"/>
                        </GroupBox.Header>
                        <StackPanel>
                            <RadioButton Margin="4" GroupName="ProbingMode" Content="{x:Static resources:Resources.NormalProbing}"/>
                            <RadioButton Margin="4" GroupName="ProbingMode" Content="{x:Static resources:Resources.MultiPassProbing}"/>
                            <RadioButton Margin="4" GroupName="ProbingMode" Content="{x:Static resources:Resources.PassDieProbing}"/>
                            <RadioButton Margin="4" GroupName="ProbingMode" Content="{x:Static resources:Resources.ContinueProbing}"/>

                            -->
                    <!-- Map Download -->
                    <!--
                            <GroupBox Style="{x:Null}" BorderBrush="#FFd6d9f4" BorderThickness="0.5" Margin="4, 0" FontSize="16" Foreground="LightGray">
                                <GroupBox.Header>
                                    <Label FontWeight="Bold" FontSize="18" Foreground="LightGreen" Content="Map Download"/>
                                </GroupBox.Header>
                                <StackPanel>
                                    <CheckBox Margin="4" Content="Map Download for CP1" IsChecked="{Binding MapDownloadForCP1}"/>
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Row="0" Grid.Column="0" Margin="4" Content="CP count"/>
                                        <Label Grid.Row="0" Grid.Column="1" Margin="4" Background="Black" Foreground="Yellow" Content="{Binding CPcount}"/>
                                        <Label Grid.Row="1" Grid.Column="0" Margin="4" Content="Retest Count"/>
                                        <Label Grid.Row="1" Grid.Column="1" Margin="4" Background="Black" Foreground="Yellow" Content="{Binding RetestCount}"/>
                                    </Grid>
                                </StackPanel>
                            </GroupBox>
                        </StackPanel>
                    </GroupBox>-->
                </Grid>
            </Border>
        </ScrollViewer>
        <!-- Buttons -->
        <Border BorderBrush="DarkGray" BorderThickness="0.5" CornerRadius="4" Grid.Column="1" Grid.RowSpan="2" Margin="4">
            <Grid Grid.Column="1">
                
                <!--<Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition />
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>-->

                <Grid.RowDefinitions>
                    <RowDefinition Height="9*"/>
                    <RowDefinition Height="1*"/>
                </Grid.RowDefinitions>

                <Grid Grid.Row="0">
                    
                    <StackPanel Orientation="Vertical">

                        <cui:Button AutomationProperties.AutomationId="CardChangePageSwitchbtn"
                                    Width="68" Height="68" Command="{Binding OperatorPageSwitchCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}" Margin="4"
                                    GUID="1b5ef581-fac0-4bea-a73b-3b4dc88c05ac">
                            <Button.Content>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <materialDesign:PackIcon Height="32" Width="32" HorizontalAlignment="Center">
                                        <materialDesign:PackIcon.Style>
                                            <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                <Setter Property="Kind" Value="ClosedCaption" />
                                            </Style>
                                        </materialDesign:PackIcon.Style>
                                    </materialDesign:PackIcon>
                                    <TextBlock Text="{x:Static resources:Resources.CardChange}" Grid.Row="1" TextAlignment="Center" FontWeight="Bold" TextWrapping="Wrap"/>
                                </Grid>
                            </Button.Content>
                        </cui:Button>

                        <cui:Button AutomationProperties.AutomationId="WaferInspectionPageSwitchbtn"
                                    Grid.Row="1" Width="68" Height="68" Command="{Binding OperatorPageSwitchCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}" Margin="4"                                                        
                                    GUID="31ad3cc0-e934-477e-a51c-18bc2df52ce6">
                            <Button.Content>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <materialDesign:PackIcon Height="32" Width="32" HorizontalAlignment="Center">
                                        <materialDesign:PackIcon.Style>
                                            <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                <Setter Property="Kind" Value="Magnify" />
                                            </Style>
                                        </materialDesign:PackIcon.Style>
                                    </materialDesign:PackIcon>
                                    <TextBlock Text="{x:Static resources:Resources.WaferInspection}" Grid.Row="1" TextAlignment="Center" FontWeight="Bold" TextWrapping="Wrap"/>
                                </Grid>
                            </Button.Content>
                        </cui:Button>

                        <cui:Button AutomationProperties.AutomationId="ContackCheckPageSwitchbtn"
                                    Grid.Row="2" Width="68" Height="68" Command="{Binding OperatorPageSwitchCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}" Margin="4"                                                  
                                    GUID="f88475b7-c1bb-4c4a-996c-64617f506e78">
                            <Button.Content>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <materialDesign:PackIcon Height="32" Width="32" HorizontalAlignment="Center">
                                        <materialDesign:PackIcon.Style>
                                            <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                <Setter Property="Kind" Value="MarkerCheck" />
                                            </Style>
                                        </materialDesign:PackIcon.Style>
                                    </materialDesign:PackIcon>
                                    <TextBlock Text="{x:Static resources:Resources.ContactCheck}" Grid.Row="1" TextAlignment="Center" FontWeight="Bold" TextWrapping="Wrap"/>
                                </Grid>
                            </Button.Content>
                        </cui:Button>

                        <cui:Button AutomationProperties.AutomationId="DeviceChangePageSwitchbtn"
                                    Grid.Row="3" Width="68" Height="68" Command="{Binding OperatorPageSwitchCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}" Margin="4"                                                        
                                    GUID="11113CA7-3C74-49E1-8F7C-B72019B7AA35">
                            <Button.Content>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <materialDesign:PackIcon Height="32" Width="32" HorizontalAlignment="Center">
                                        <materialDesign:PackIcon.Style>
                                            <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                <Setter Property="Kind" Value="Cached" />
                                            </Style>
                                        </materialDesign:PackIcon.Style>
                                    </materialDesign:PackIcon>
                                    <TextBlock Text="Device Change" Grid.Row="1" TextAlignment="Center" FontWeight="Bold" TextWrapping="Wrap"/>
                                </Grid>
                            </Button.Content>
                        </cui:Button>
                        
                    </StackPanel>
                    
                </Grid>

                <Grid Grid.Row="1">

                    <Button AutomationProperties.AutomationId="OperatorViewClosebtn"
                            Grid.Row="9" Width="68" Height="68" Command="{Binding CloseFlyout}" Margin="4">
                        <Button.Content>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <materialDesign:PackIcon Height="32" Width="32" HorizontalAlignment="Center">
                                    <materialDesign:PackIcon.Style>
                                        <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                            <Setter Property="Kind" Value="CloseBoxOutline" />
                                        </Style>
                                    </materialDesign:PackIcon.Style>
                                </materialDesign:PackIcon>
                                <TextBlock Text="{x:Static resources:Resources.Close}" Grid.Row="1" TextAlignment="Center" FontWeight="Bold" TextWrapping="Wrap"/>
                            </Grid>
                        </Button.Content>
                    </Button>
                    
                </Grid>
                
            </Grid>
        </Border>
    </Grid>
</UserControl>
