<UserControl x:Class="ProberViewModel.View.Wafer.WaferMapMaker"
             
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ProberViewModel.View.Wafer"
             xmlns:MapUC="clr-namespace:MapView;assembly=MapView"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:hjc="clr-namespace:HexagonJogControl;assembly=HexagonJogControl"
             xmlns:ljc="clr-namespace:LightJog;assembly=LightJog"
             xmlns:cui="clr-namespace:CUI;assembly=CUI"
             xmlns:interface="clr-namespace:ProberInterfaces;assembly=ProberInterfaces"
             xmlns:templateservice="clr-namespace:DataTemplateService;assembly=DataTemplateService"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="892" d:DesignWidth="1280" Loaded="UserControl_Loaded">

    <UserControl.Resources>
        
        <ResourceDictionary>
            <!-- Displayport Template -->
            <DataTemplate x:Key="DisplayViewTemplate" DataType="{x:Type interface:IDisplayPort}" >
                <ContentControl x:Name="DisPlay" Content="{Binding ''}"/>
            </DataTemplate>
            <!-- MapView Template -->
            <DataTemplate x:Key="MapViewTemplate" DataType="{x:Type interface:IWaferObject}" >
                <MapUC:ucWaferMapviewer WaferObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}, Path=DataContext.Wafer}"
                                        Margin="4" 
                                        CursorXIndex="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}, Path=DataContext.Wafer.CurrentMXIndex, Mode=TwoWay}" 
                                        CursorYIndex="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}, Path=DataContext.Wafer.CurrentMYIndex, Mode=TwoWay}" 
                                        EnalbeClickToMove="True"
                                        CoordinateManager="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}, Path=DataContext.CoordinateManager, Mode=TwoWay}"
                                        IsCrossLineVisible="True"
                                        StageSyncEnalbe="True"
                                        CurCamera="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}, Path=DataContext.CurCam}"/>
            </DataTemplate>
            <templateservice:TemplateSelector x:Key="ViewTargetTemplateSelector" 
                                    MapViewDataTemplate="{StaticResource MapViewTemplate}"
                                    DisplayViewDataTemplate="{StaticResource DisplayViewTemplate}"/>

            <local:NotchFlipConverter x:Key="NotchFlipConvert"/>
        </ResourceDictionary>
        
    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2.42*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0" >
            <Grid Margin="4" Width="890" Height="890" >
                <ContentControl Width="890" Height="890" 
                                Content="{Binding MainViewTarget}"
                                ContentTemplateSelector="{StaticResource ViewTargetTemplateSelector}"/>
                <ljc:UcLightJog Width="250" Height="100"
                                VerticalAlignment="Bottom" HorizontalAlignment="Right"
                               DataContext="{Binding LightJog}"
                                Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, 
                                             AncestorType={x:Type UserControl}}, Path=DataContext.LightJogVisibility, Mode=TwoWay}"/>
            </Grid>
            <Grid Width="258" Height="258" Opacity="1" Margin="4"
                   VerticalAlignment="{Binding MiniViewVerticalAlignment}" HorizontalAlignment="{Binding MiniViewHorizontalAlignment}">
                <ContentControl Content="{Binding MiniViewTarget}" IsHitTestVisible="True"
                            ContentTemplateSelector="{StaticResource ViewTargetTemplateSelector}" Opacity="0.7"/>
                <Button AutomationProperties.AutomationId="btnViewSwap"
                        Grid.Row="0" Width="48" Height="48" Background="Black" Foreground="White" 
                        VerticalAlignment="Top"  HorizontalAlignment="Right"
                        Command="{Binding ViewSwapCommand}">
                    <materialDesign:PackIcon Kind="ArrowExpand" Height="42" Width="42"/>
                </Button>
            </Grid>
        </Grid>

        <Grid Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="8*"/>
                <RowDefinition />
            </Grid.RowDefinitions>

            <Grid Grid.Row="0" Margin="4">
                <StackPanel >
                    <Grid Margin="0,4,0,4">
                        <TabControl >
                            <TabControl.Resources>
                                <Style TargetType="TabItem">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="TabItem">
                                                <Grid Name="Panel">
                                                    <ContentPresenter x:Name="ContentSite"
                                                                      VerticalAlignment="Center"
                                                                      HorizontalAlignment="Center"
                                                                      ContentSource="Header"
                                                                      Margin="10,2"/>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsSelected" Value="True">
                                                        <Setter TargetName="Panel" Property="Background" Value="Gray" />
                                                    </Trigger>
                                                    <Trigger Property="IsSelected" Value="False">
                                                        <Setter TargetName="Panel" Property="Background" Value="black" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TabControl.Resources>

                            <TabItem Header="Wafer Size" FontSize="16" Foreground="White">

                                <Grid>
                                    <ComboBox 
                                          Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" 
                                          Style="{x:Null}"
                                          VerticalContentAlignment="Center"
                                          HorizontalContentAlignment="Center"
                                          Foreground="Black"
                                          FontSize="18"
                                          ItemsSource="{Binding WaferSizeEnums}"
                                          IsEnabled="{Binding IsCanChangeWaferSize}">
                                        <ComboBox.SelectedItem>
                                            <Binding Path="WaferSize"/>
                                        </ComboBox.SelectedItem>
                                    </ComboBox>
                                </Grid>
                            </TabItem>

                            <TabItem Header="Size Offset(um)" FontSize="16" Foreground="White">
                                <Grid>
                                    <TextBox AutomationProperties.AutomationId="txtNotchOffset"
                                             Margin="0,4,0,4" 
                                             Text="{Binding WaferSize_Offset_um}"
                                             HorizontalContentAlignment="Center"
                                             Style="{DynamicResource InputTextBox}" FontSize="18">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="PreviewMouseDown" >
                                                <i:InvokeCommandAction Command="{Binding WaferSizeOffsetTextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>

                                </Grid>
                            </TabItem>

                            <TabItem Header="Thickness Type" FontSize="16" Foreground="White">
                                <Grid>
                                    <ComboBox 
                                          Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" 
                                          Style="{x:Null}"
                                          VerticalContentAlignment="Center"
                                          HorizontalContentAlignment="Center"
                                          Foreground="Black"
                                          FontSize="18"
                                          ItemsSource="{Binding WaferSubstrateTypeEnums}">
                                        <ComboBox.SelectedItem>
                                            <Binding Path="WaferSubstrateType"/>
                                        </ComboBox.SelectedItem>
                                    </ComboBox>
                                </Grid>
                            </TabItem>
                        </TabControl>

                        <!--<Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0" Grid.Row="0" Content="Wafer Size" Margin="0,4,0,4" 
                               HorizontalContentAlignment="Center"
                               Style="{DynamicResource TitleBorderLabel}"/>
                        <cui:ComboBox AutomationProperties.AutomationId="cmbWaferSize"
                                  Grid.Column="1" Grid.Row="0" Margin="0,4,2,4"
                                  Style="{DynamicResource NormalTypeCUIComboBoxStyle}"
                                  VerticalContentAlignment="Center"
                                  HorizontalContentAlignment="Center"
                                  Foreground="Black"
                                  FontSize="18"
                                  ItemsSource="{Binding WaferSizeEnums}"
                                  SelectedItem="{Binding WaferSize}"
                                  IsEnabled="{Binding IsCanChangeWaferSize}"/>
                        <ComboBox AutomationProperties.AutomationId="cmbWaferSubstrateType" 
                                   Grid.Column="2" Grid.Row="0" Margin="2,4,0,4"
                                   Style="{x:Null}"
                                   VerticalContentAlignment="Center"
                                   HorizontalContentAlignment="Center"
                                   Foreground="Black"
                                   FontSize="18"
                                   ItemsSource="{Binding WaferSubstrateTypeEnums}"
                                   SelectedItem="{Binding WaferSubstrateType}"/>-->
                    </Grid>
                    <Grid Margin="0,4,0,4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0" Grid.Row="0" Content="Die Size X(um)" Margin="0,4,0,4" 
                               HorizontalContentAlignment="Center"
                               Style="{DynamicResource TitleBorderLabel}"/>
                        <TextBox AutomationProperties.AutomationId="txtDieSizeX"
                                 Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" Text="{Binding DieSizeX}"
                                 HorizontalContentAlignment="Center"
                                 Style="{DynamicResource InputTextBox}" FontSize="18">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding DieSizeXTextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>
                    </Grid>
                    <Grid Margin="0,4,0,4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0" Grid.Row="0" Content="Die Size Y(um)" Margin="0,4,0,4" 
                               HorizontalContentAlignment="Center"
                               Style="{DynamicResource TitleBorderLabel}"/>
                        <TextBox AutomationProperties.AutomationId="txtDieSizeY"
                                 Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" Text="{Binding DieSizeY}"
                                 HorizontalContentAlignment="Center"
                                 Style="{DynamicResource InputTextBox}" FontSize="18">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding DieSizeYTextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>
                    </Grid>
                    <Grid Margin="0,4,0,4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0" Grid.Row="0" Content="Edge Margin(um)" Margin="0,4,0,4" 
                               HorizontalContentAlignment="Center"
                               Style="{DynamicResource TitleBorderLabel}"/>
                        <TextBox AutomationProperties.AutomationId="txtEdgeMargin"
                                 Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" Text="{Binding EdgeMargin}"
                                 HorizontalContentAlignment="Center"
                                 Style="{DynamicResource InputTextBox}" FontSize="18">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding EdgeMarginTextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>
                    </Grid>

                    <Grid Margin="0,4,0,4">
                        <TabControl >
                            <TabControl.Resources>
                                <Style TargetType="TabItem">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="TabItem">
                                                <Grid Name="Panel">
                                                    <ContentPresenter x:Name="ContentSite"
                                                                      VerticalAlignment="Center"
                                                                      HorizontalAlignment="Center"
                                                                      ContentSource="Header"
                                                                      Margin="10,2"/>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsSelected" Value="True">
                                                        <Setter TargetName="Panel" Property="Background" Value="Gray" />
                                                    </Trigger>
                                                    <Trigger Property="IsSelected" Value="False">
                                                        <Setter TargetName="Panel" Property="Background" Value="black" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TabControl.Resources>

                            <TabItem AutomationProperties.AutomationId="tiNotchType"
                                     Header="Notch Type" FontSize="16" Foreground="White">

                                <Grid>
                                    <!--<Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>-->

                                    <!--<Label Grid.Column="0" Grid.Row="0" Content="Notch Type" Margin="0,4,0,4"
                                           HorizontalContentAlignment="Center"
                                           Style="{DynamicResource TitleBorderLabel}"/>-->
                                    <ComboBox AutomationProperties.AutomationId="cmbNotchType"
                                          Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" 
                                          Style="{x:Null}"
                                          VerticalContentAlignment="Center"
                                          HorizontalContentAlignment="Center"
                                          Foreground="Black"
                                          FontSize="18"
                                          ItemsSource="{Binding WafrNotchTypeEnums}">
                                        <ComboBox.SelectedItem>
                                            <Binding Path="NotchType"/>
                                        </ComboBox.SelectedItem>

                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="SelectionChanged" >
                                                <i:InvokeCommandAction Command="{Binding SelectedNotchTypeCommand}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </ComboBox>
                                </Grid>
                            </TabItem>

                            <TabItem AutomationProperties.AutomationId="tiNotchAngle"
                                     Header="Notch Angle(°)" FontSize="16" Foreground="White">


                                <Grid>
                                    <ComboBox AutomationProperties.AutomationId="cmbNotchAngle"
                                          Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" 
                                          Style="{x:Null}"
                                          VerticalContentAlignment="Center"
                                          HorizontalContentAlignment="Center"
                                          Foreground="Black"
                                          FontSize="18"
                                          ItemsSource="{Binding NotchAngles}">
                                        <ComboBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock>
                                                    <TextBlock.Text>
                                                        <MultiBinding Converter="{StaticResource NotchFlipConvert}">
                                                            <Binding Path="."/>
                                                            <Binding Path="DataContext.DispHorFlip" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}"/>
                                                            <Binding Path="DataContext.DispVerFlip" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}"/>
                                                        </MultiBinding>
                                                    </TextBlock.Text>
                                                </TextBlock>
                                            </DataTemplate>
                                        </ComboBox.ItemTemplate>
                                      
                                        <ComboBox.SelectedItem>
                                            <Binding Path="NotchAngle"/>
                                        </ComboBox.SelectedItem>

                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="SelectionChanged" >
                                                <i:InvokeCommandAction Command="{Binding SelectedNotchAngleCommand}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </ComboBox>


                                </Grid>
                            </TabItem>

                            <TabItem AutomationProperties.AutomationId="tiNotchOffset"
                                     Header="Notch Offset" FontSize="16" Foreground="White">

                                <Grid>
                                    <!--<Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>-->

                                    <!--<Label Grid.Column="0" Grid.Row="0" Content="Notch Type" Margin="0,4,0,4"
                                           HorizontalContentAlignment="Center"
                                           Style="{DynamicResource TitleBorderLabel}"/>-->

                                    <TextBox AutomationProperties.AutomationId="txtNotchOffset"
                                             Margin="0,4,0,4" 
                                             Text="{Binding NotchAngleOffset}"
                                             HorizontalContentAlignment="Center"
                                             Style="{DynamicResource InputTextBox}" FontSize="18">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="PreviewMouseDown" >
                                                <i:InvokeCommandAction Command="{Binding NotchAngleOffsetTextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>

                                </Grid>
                            </TabItem>

                        </TabControl>
                        <!--<Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Label Grid.Column="0" Grid.Row="0" Content="Notch Type" Margin="0,4,0,4" 
                               HorizontalContentAlignment="Center"
                               Style="{DynamicResource TitleBorderLabel}"/>
                            -->
                        <!--<TextBox Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" Text="{Binding NotchType}"
                                 HorizontalContentAlignment="Center"
                                 Style="{DynamicResource InputTextBox}"/>-->
                        <!--
                            <ComboBox  Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" 
                                   Style="{x:Null}"
                                   VerticalContentAlignment="Center"
                                   HorizontalContentAlignment="Center"
                                   Foreground="Black"
                                   FontSize="18"
                                   ItemsSource="{Binding WafrNotchTypeEnums}"
                                   SelectedItem="{Binding NotchType}"/>-->
                    </Grid>

                    <!--<Grid Margin="0,4,0,4">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" Content="Notch Angle(°)" Margin="0,4,0,4" 
                                   HorizontalContentAlignment="Center"
                                   Style="{DynamicResource TitleBorderLabel}"/>

                            <ComboBox  Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" 
                                       Style="{x:Null}"
                                       VerticalContentAlignment="Center"
                                       HorizontalContentAlignment="Center"
                                       Foreground="Black"
                                       FontSize="18"
                                       ItemsSource="{Binding NotchAngles}"
                                       SelectedItem="{Binding NotchAngle}"/>

                            -->
                    <!--<TextBox Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" Text="{Binding NotchAngle}"
                                 FontSize="18"
                                 HorizontalContentAlignment="Center"
                                 Style="{DynamicResource InputTextBox}">
                            -->
                    <!--<i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding NotchAngleSettingCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>-->
                    <!--<i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding NotchAngleTextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>-->
                    <!--
                        </TextBox>-->
                    <!--
                        </Grid>-->

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Button AutomationProperties.AutomationId="btnImportCSVFile"
                                Grid.Column="0" Grid.Row="0" Margin="8,4,8,4" HorizontalAlignment="Center" Width="320" Height="40"
                                Content="Import CSV File"
                                Command="{Binding CmdImportWaferData}"
                                Style="{DynamicResource ControlButtonStyle}" >
                        </Button>
                        <Button AutomationProperties.AutomationId="btnExportCSVFile"
                                Grid.Column="1" Grid.Row="0" Margin="8,4,8,4" HorizontalAlignment="Center" Width="320" Height="40"
                                Content="Export CSV File"
                                Command="{Binding CmdExportWaferData}"
                                Style="{DynamicResource ControlButtonStyle}" >
                        </Button>
                        <Button AutomationProperties.AutomationId="btnApplyMap"
                                Grid.Column="2" Grid.Row="0" Margin="8,4,8,4" HorizontalAlignment="Center" Width="320" Height="40"
                                Content="Apply Map"
                                Command="{Binding ApplyCreateWaferMapCommand}"
                                Style="{DynamicResource ControlButtonStyle}" >
                        </Button>
                    </Grid>

                    <Grid Margin="0,4,0,4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0" Grid.Row="0" Content="Thickness" Margin="0,4,0,4" 
                               HorizontalContentAlignment="Center"
                               Style="{DynamicResource TitleBorderLabel}"/>
                        <TextBox AutomationProperties.AutomationId="txtThickness"
                                 Grid.Column="1" Grid.Row="0" Margin="0,4,0,4" 
                                 Text="{Binding  PhysicalInfo.Thickness.Value, StringFormat={}{0:0.###}}"
                                 HorizontalContentAlignment="Center"
                                 Style="{DynamicResource InputTextBox}" FontSize="18">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding ThicknessTextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>
                    </Grid>
                    <Button Grid.Column="0" AutomationProperties.AutomationId="btnMoveToWaferThickness"
                            Margin="8,8,8,4" HorizontalAlignment="Center" Width="340" Height="40"
                            Content="Move To Wafer Thickness"
                            Command="{Binding MoveToWaferThicknessCommand}"
                            Style="{DynamicResource ControlButtonStyle}" >
                    </Button>
                    <Button Grid.Column="1" AutomationProperties.AutomationId="btnAdjustWaferHeight"
                            Margin="8,4,8,8" HorizontalAlignment="Center" Width="340" Height="40"
                            Content="Adjust Wafer Height"
                            Command="{Binding AdjustWaferHeightCommand}"
                            Style="{DynamicResource ControlButtonStyle}" >
                    </Button>
                    <!--<Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0" Grid.Row="0" Content="Height Profiling" Margin="0,4,0,4" 
                               HorizontalContentAlignment="Center"
                               Style="{DynamicResource TitleBorderLabel}"/>
                        <ComboBox AutomationProperties.AutomationId="cmbHeightProfiling"
                                  Grid.Column="1" Grid.Row="0" Margin="0,4,2,4"
                                  Style="{x:Null}"
                                  VerticalContentAlignment="Center"
                                  HorizontalContentAlignment="Center"
                                  Foreground="Black"
                                  FontSize="18"
                                  ItemsSource="{Binding EnumHeightPoints}"
                                  SelectedItem="{Binding HeightPoint}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i:InvokeCommandAction Command="{Binding SelectionChangedCommand}"
                                                                       CommandParameter="{Binding HeightPoint}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </ComboBox>
                    </Grid>-->
                </StackPanel>
            </Grid>

            <Grid HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="8" Grid.RowSpan="2">
                <Viewbox>
                    <hjc:UcHexagonJog x:Name="MotionJog" DataContext="{Binding MotionJog}" IsEnabled="True"
                                      AssignedCamera="{Binding DataContext.CurCam, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"/>
                </Viewbox>
            </Grid>
        </Grid>
    </Grid>
</UserControl>
