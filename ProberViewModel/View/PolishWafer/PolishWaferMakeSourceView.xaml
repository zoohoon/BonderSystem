<UserControl x:Class="UcPolishWaferMakeSourceView.PolishWaferMakeSourceView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:UcPolishWaferMakeSourceView"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:aniScroll="clr-namespace:UcAnimationScrollViewer;assembly=UcAnimationScrollViewer"
             xmlns:interfacepolishwafer="clr-namespace:ProberInterfaces.PolishWafer;assembly=ProberInterfaces"
             xmlns:pi="clr-namespace:ProberInterfaces;assembly=ProberInterfaces"
             xmlns:resources="clr-namespace:ProberViewModel.Properties"
             xmlns:cui="clr-namespace:CUI;assembly=CUI"
             xmlns:vc="clr-namespace:ValueConverters;assembly=ValueConverters"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>

        <ResourceDictionary>

            <ObjectDataProvider x:Key="getDataFromPWFocusingPointMode" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="interfacepolishwafer:PWFocusingPointMode"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <ObjectDataProvider x:Key="getDataFromSubstrateSizeEnum" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="pi:SubstrateSizeEnum"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <ObjectDataProvider x:Key="getDataFromSubstrateNotchEnum" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="pi:WaferNotchTypeEnum"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <vc:BoolToVisibleOrCollapsedConverter x:Key="BtoV_VoOrCo" />
            <vc:ModuleIDToStringConverter x:Key="ModuleIDToStringConv"/>
            <vc:PWDefineTypeToBrushConverter x:Key="PWDefineTypeToBrushConv"/>
            <vc:PWStringToBrushConverter x:Key="PWStringToBrushConv"/>
            <vc:BoolToBorderThicknessConverter x:Key="BoolToBorderThicknessConv" />
            <vc:BoolToGroupBoxHeaderTextConverter x:Key="BoolToGroupBoxHeaderTextConv" />
            <vc:ShowUnderscoreConverter x:Key="ShowUnderscoreConverter"/>
            
            <local:DefineNameDisplayConverter x:Key="DefineNameDisplayConv" />

            
            <Style x:Key="GroupBoxForegroundStyle" TargetType="GroupBox">
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>
            
            <Style x:Key="ModuleNameLabelStyle" TargetType="Label">
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="BorderBrush" Value="White"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>
            
            <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
            <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
            <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
            <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
            
            <Style x:Key="WaferButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="Margin" Value="8 4"/>
                <Setter Property="FontSize" Value="16" />
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border VerticalAlignment="Center" x:Name="border" Width="Auto"
                                        Padding="8 8" CornerRadius="4" Background="#C9C9C9" 
                                        BorderBrush="#FF000000" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">

                                <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="#ACFF12"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="UpButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border Name="UpButtonBorderStyle" Background="#333333">
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray"
                                    ShadowDepth="5"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Viewbox Margin="8">
                                    <Path Data="M1,21H23L12,2" Fill="White" Name="TryAngleIcon"/>
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="UpButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true"/>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="TryAngleIcon" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="UpButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="UpButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <Style x:Key="DwButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border Name="DwButtonBorderStyle" Background="#333333">
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="5"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Viewbox Margin="8">
                                    <Path Data="M1,2H23L12,21"
                                          Fill="White" Name="TryAngleIcon"
                                          />
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="DwButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true"/>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="TryAngleIcon" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="DwButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="DwButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <Style x:Key="RefreshButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border Name="DwButtonBorderStyle" Background="#333333">
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="5"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Viewbox Margin="8">
                                    <Path Data="M17,13H13V17H11V13H7V11H11V7H13V11H17M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z"
                                          Fill="White" Name="TryAngleIcon"
                                          />
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="DwButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true"/>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="TryAngleIcon" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="DwButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="DwButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RemoveButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border Name="DwButtonBorderStyle" Background="#333333">
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="5"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Viewbox Margin="8">
                                    <Path Data="M17,13H7V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"
                                          Fill="White" Name="TryAngleIcon"
                                          />
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="DwButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true"/>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="TryAngleIcon" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="DwButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="DwButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <Style x:Key="ClearButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border Name="ClearBtnStyleBorder" Background="Transparent">
                                </Border>
                                <Viewbox Margin="8">
                                    <Path Name="SearchIcon" Data="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,
                                          13.41L17.59,19L19,17.59L13.41,12L19,6.41Z" Fill="White"
                                          Stretch="Fill"/>
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="ClearBtnStyleBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true"/>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="SearchIcon" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="ClearBtnStyleBorder" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="ClearBtnStyleBorder" Value="{StaticResource Button.Disabled.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="myLBStyle" TargetType="{x:Type ListBoxItem}">
                <Style.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                             Color="Transparent"/>
                </Style.Resources>
            </Style>
            
        </ResourceDictionary>

    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="120*"/>
            <ColumnDefinition Width="160*"/>
            <ColumnDefinition Width="160*"/>
        </Grid.ColumnDefinitions>

        <Border Grid.Column="0" BorderThickness="0.1"  Margin="8 8 4 8"
                BorderBrush="White"/>
        
        <Grid Grid.Column="0"  Margin="8 8 4 8">
            <Grid.RowDefinitions>
                <RowDefinition Height="80*"/>
                <RowDefinition Height="8*"/>
                <RowDefinition Height="8*"/>
            </Grid.RowDefinitions>

            <GroupBox  Grid.Row="0" BorderBrush="White" BorderThickness="1" Margin="0,-15,0,0" FontSize="18" Foreground="White" Header="Polish Wafer Type">
                <GroupBox.Style>
                    <Style BasedOn="{x:Null}"/>
                </GroupBox.Style>
                <Border  BorderThickness="0.5" BorderBrush="White"/>
            </GroupBox>
            
            <aniScroll:AnimationScrollViewer x:Name="svViewer" Margin="8"
                          Grid.Row="0"
                          VerticalScrollBarVisibility="Hidden">
                <ListBox ItemsSource="{Binding PolishWaferSourceInformations}"
                         SelectedItem="{Binding SelectedSourceInfo}"
                         ItemContainerStyle="{StaticResource myLBStyle}">

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding DataContext.SelectedSourceInfoChangedCommand,RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Border Width="300" BorderBrush="{Binding IdentificationColorBrush.Value, Converter={StaticResource PWStringToBrushConv}}" BorderThickness="2">
                                </Border>
                                <Grid Margin="8" Height="32">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto"/>
                                            <ColumnDefinition Width="auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Viewbox Grid.Column="0" Margin="0" Width="32">
                                            <Path
                                            Stretch="Uniform"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Data="M9,7V17H11V13H13A2,2 0 0,0 15,11V9A2,2 0 0,0 13,7H9M11,9H13V11H11V9M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3Z"
                                                Fill="#be8158">
                                            </Path>
                                        </Viewbox>
                                        <Label Grid.Column="1" 
                                           Margin="0"
                                           Content="{Binding DefineName.Value, Converter={StaticResource ShowUnderscoreConverter}}" Foreground="White">
                                        </Label>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </aniScroll:AnimationScrollViewer>

            <Border Grid.Row="1" BorderThickness="0.5" BorderBrush="White"/>
            <Grid Grid.Row="1" Margin="8">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="5*"/>
                    <ColumnDefinition Width="5*"/>
                </Grid.ColumnDefinitions>

                <Button AutomationProperties.AutomationId="btnAddSource"
                        Grid.Column="0"
                        Margin="4"
                        Style="{StaticResource RefreshButtonStyle}"
                        Command="{Binding AddSourceCommand}">
                </Button>

                <Button AutomationProperties.AutomationId="btnRemoveSource"
                        Grid.Column="1"
                        Margin="4"
                        Style="{StaticResource RemoveButtonStyle}"
                        Command="{Binding RemoveSourceCommand}">
                </Button>
                
            </Grid>

            <Border Grid.Row="2" BorderThickness="0.5" BorderBrush="White"/>
            <Grid Grid.Row="2" Margin="8">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="320*"/>
                    <ColumnDefinition Width="320*"/>
                </Grid.ColumnDefinitions>

                <Button AutomationProperties.AutomationId="btnUp"
                        Grid.Column="0"
                        Margin="4"
                        Style="{StaticResource UpButtonStyle}"
                        Click="CategoryUpBtnClick"/>

                <Button AutomationProperties.AutomationId="btnDown"
                        Grid.Column="1"
                        Margin="4"
                        Style="{StaticResource DwButtonStyle}"
                        Click="CategoryDwBtnClick"/>
            </Grid>
        </Grid>


        <Grid Grid.Column="1"  Margin="8" Grid.ColumnSpan="2">
            
            <Grid.RowDefinitions>
                <RowDefinition Height="80*"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Top">
                <CheckBox Margin="10,10,0,0" IsChecked="{Binding ModuleInfoEnable, Mode=TwoWay}" VerticalAlignment="Center" FontSize="15" Foreground="White">Information View</CheckBox>
            </StackPanel>

            <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right">
                <Button AutomationProperties.AutomationId="btnAssign"
                        Width="100" Height="45" Content="Assign" Command="{Binding AssignCommand}"/>
                <Button AutomationProperties.AutomationId="btnRemove"
                        Width="100" Height="45" Content="Remove" Command="{Binding RemoveCommand}"/>
            </StackPanel>
            
            <GroupBox  Grid.Row="0"
                       Header="{x:Static resources:Resources.PolishWaferInformaiton}"
                       VerticalContentAlignment="Stretch"
                       VerticalAlignment="Stretch"
                       FontSize="20">
                <Grid>
                    
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    
                    <GroupBox Grid.Row="0" Margin="4 0 0 4"
                                  HorizontalContentAlignment="Center"
                                  VerticalContentAlignment="Center"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  FontSize="14">
                        <GroupBox.Header>
                            <MultiBinding Converter="{StaticResource DefineNameDisplayConv}">
                                <Binding Path="SelectedSourceInfo.DefineName.Value"></Binding>
                                <Binding Path="CanChange"></Binding>
                            </MultiBinding>
                        </GroupBox.Header>
                        <Grid>
                            <StackPanel MinWidth="290">

                                <Grid Margin="0,2,0,2">
                                    
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    
                                    <Label Grid.Column="0" Content="Size" Margin="0,4,0,4" HorizontalContentAlignment="Center" Style="{DynamicResource TitleBorderLabel}"/>
                                    
                                    <ComboBox AutomationProperties.AutomationId="cmbSize"
                                              IsEnabled="{Binding DataContext.CanChange, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                              Margin="0,4,0,4" Grid.Column="1"
                                              Style="{x:Null}"
                                              VerticalContentAlignment="Center"
                                              HorizontalContentAlignment="Center"
                                              Foreground="Black"
                                              FontSize="18"
                                              ItemsSource="{Binding Source={StaticResource getDataFromSubstrateSizeEnum}}"
                                              SelectedItem="{Binding SelectedSourceInfoSize}">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="SelectionChanged">
                                                <i:InvokeCommandAction Command="{Binding ChangedSizeCommand}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </ComboBox>
                                </Grid>

                                <Grid Margin="0,2,0,2">

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Column="0" Content="NotchType" Margin="0,4,0,4" HorizontalContentAlignment="Center" Style="{DynamicResource TitleBorderLabel}"/>

                                    <ComboBox 
                                              IsEnabled="{Binding DataContext.CanChange, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                              Margin="0,4,0,4" Grid.Column="1"
                                              Style="{x:Null}"
                                              VerticalContentAlignment="Center"
                                              HorizontalContentAlignment="Center"
                                              Foreground="Black"
                                              FontSize="18"
                                              ItemsSource="{Binding Source={StaticResource getDataFromSubstrateNotchEnum}}"
                                              SelectedItem="{Binding SelectedSourceInfo.NotchType.Value}">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="SelectionChanged">
                                                <i:InvokeCommandAction Command="{Binding ChangedNotchTypeCommand}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </ComboBox>
                                </Grid>

                                <Grid Margin="0,2,0,2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Column="0" Grid.Row="0" Content="Thickness" Margin="0,4,0,4"
                                                                   HorizontalContentAlignment="Center"
                                                                   Style="{DynamicResource TitleBorderLabel}"/>
                                    <TextBox AutomationProperties.AutomationId="txtThickness"
                                             IsEnabled="{Binding DataContext.CanChange, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                             HorizontalContentAlignment="Center" Grid.Column="1"
                                             VerticalAlignment="Center"
                                             Text="{Binding SelectedSourceInfo.Thickness.Value}"
                                             Style="{DynamicResource InputTextBox}"
                                             FontSize="18">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="PreviewMouseDown" >
                                                <i:InvokeCommandAction Command="{Binding DecimalTextBoxClickCommand}" 
                                                                       CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                </Grid>

                                <Grid Margin="0,2,0,2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Column="0" Grid.Row="0" Content="Notch Angle" Margin="0,4,0,4"
                                                                   HorizontalContentAlignment="Center"
                                                                   Style="{DynamicResource TitleBorderLabel}"/>
                                    <TextBox AutomationProperties.AutomationId="txtCurrentAngle"
                                             IsEnabled="{Binding DataContext.CanChange, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                             HorizontalContentAlignment="Center" Grid.Column="1"
                                             VerticalAlignment="Center"
                                             Text="{Binding SelectedSourceInfo.NotchAngle.Value}"
                                             Style="{DynamicResource InputTextBox}"
                                             FontSize="18">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="PreviewMouseDown" >
                                                <i:InvokeCommandAction Command="{Binding NotchAngleTextBoxClickCommand}" 
                                                                       CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                </Grid>

                                <Grid Margin="0,2,0,2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Column="0" Grid.Row="0" Content="Rotate Angle" Margin="0,4,0,4"
                                                                   HorizontalContentAlignment="Center"
                                                                   Style="{DynamicResource TitleBorderLabel}"/>
                                    <TextBox AutomationProperties.AutomationId="txtRotateAngle"
                                             IsEnabled="{Binding DataContext.CanChange, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                             HorizontalContentAlignment="Center" Grid.Column="1"
                                             VerticalAlignment="Center"
                                             Text="{Binding SelectedSourceInfo.RotateAngle.Value}"
                                             Style="{DynamicResource InputTextBox}"
                                             FontSize="18">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="PreviewMouseDown" >
                                                <i:InvokeCommandAction Command="{Binding DecimalTextBoxClickCommand}" 
                                                                       CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                </Grid>

                                <Grid Margin="0,2,0,2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Column="0" Grid.Row="0" Content="Margin" Margin="0,4,0,4"
                                                                   HorizontalContentAlignment="Center"
                                                                   Style="{DynamicResource TitleBorderLabel}"/>
                                    <TextBox AutomationProperties.AutomationId="txtMargin"
                                             IsEnabled="{Binding DataContext.CanChange, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                             HorizontalContentAlignment="Center" Grid.Column="1"
                                             VerticalAlignment="Center"
                                             Text="{Binding SelectedSourceInfo.Margin.Value}"
                                             Style="{DynamicResource InputTextBox}"
                                             FontSize="18">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="PreviewMouseDown" >
                                                <i:InvokeCommandAction Command="{Binding DecimalTextBoxClickCommand}" 
                                                                       CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </Grid>
                    </GroupBox>

                    <Grid Grid.Column="2"  Margin="4,0">

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="10*"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Label Margin="0" Content="Fixed &#10;Tray" Foreground="WhiteSmoke" FontSize="24" 
                   HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalAlignment="Center" VerticalAlignment="Center"
                   FontWeight="DemiBold" BorderBrush="WhiteSmoke" BorderThickness="0.6"/>

                        <ListView Grid.Row="1"  HorizontalAlignment="Center" x:Name="FixedTrayListView" 
                               ItemsSource="{Binding TrasnferObjectSet.FixedTrays}" Background="#FF1C1C1F" SelectionMode="Multiple"
                               ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Hidden">

                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectedObjectCommand,
                                RelativeSource={RelativeSource AncestorType={x:Type UserControl}, 
                                Mode=FindAncestor}}" CommandParameter="{Binding SelectedItems,ElementName=FixedTrayListView}">

                                    </i:InvokeCommandAction>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>

                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem">
                                    <Setter Property="VerticalContentAlignment" Value="Stretch" />
                                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                </Style>
                            </ListView.ItemContainerStyle>
                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <UniformGrid Columns="1"></UniformGrid>
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                            <ListView.ItemTemplate>
                                <DataTemplate>
                                    <GroupBox Header="{Binding CanUseBuffer, Converter={StaticResource BoolToGroupBoxHeaderTextConv}}" FontSize="10" Padding="-1" Style="{DynamicResource GroupBoxForegroundStyle}"
                                              BorderThickness="{Binding CanUseBuffer, Converter={StaticResource BoolToBorderThicknessConv}}">
                                        <Border  BorderThickness="3"  x:Name="itemBorder">
                                            <Border.BorderBrush>
                                                <MultiBinding Converter="{StaticResource PWDefineTypeToBrushConv}">
                                                    <Binding Path="DeviceInfo.PolishWaferInfo.DefineName.Value"></Binding>
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}" Path="DataContext.PolishWaferSourceInformations" />
                                                </MultiBinding>
                                            </Border.BorderBrush>
                                            <Grid >
                                            
                                                <StackPanel Orientation="Horizontal">
                                                    <Label  HorizontalAlignment="Center" VerticalContentAlignment="Center" 
                                                    Content="{Binding WaferSupplyInfo.ID, Converter={StaticResource ModuleIDToStringConv}}" 
                                                FontSize="12" Foreground="White" Width="Auto"/>
                                                </StackPanel>
                                            
                                            </Grid>
                                        </Border>
                                    </GroupBox>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                    </Grid>
                    
                    <Grid Grid.Column="3"  Margin="4,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="10*"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Label Margin="0" Content="Insepction &#10;Tray" Foreground="WhiteSmoke" FontSize="24" 
                   HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalAlignment="Center" VerticalAlignment="Center"
                   FontWeight="DemiBold" BorderBrush="WhiteSmoke" BorderThickness="0.6"/>
                        
                        <ListView Grid.Row="1"  HorizontalAlignment="Center" x:Name="InspectionTrayListView" 
                               ItemsSource="{Binding TrasnferObjectSet.InspectionTrays}" Background="#FF1C1C1F" SelectionMode="Multiple"
                               ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Hidden">

                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectedObjectCommand,
                                RelativeSource={RelativeSource AncestorType={x:Type UserControl}, 
                                Mode=FindAncestor}}" CommandParameter="{Binding SelectedItems,ElementName=InspectionTrayListView}">

                                    </i:InvokeCommandAction>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>

                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem">
                                    <Setter Property="VerticalContentAlignment" Value="Stretch" />
                                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                </Style>
                            </ListView.ItemContainerStyle>
                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <UniformGrid Columns="1"></UniformGrid>
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                            <ListView.ItemTemplate>
                                <DataTemplate>
                                    <Border  BorderThickness="3"  x:Name="itemBorder">
                                        <Border.BorderBrush>
                                            <MultiBinding Converter="{StaticResource PWDefineTypeToBrushConv}">
                                                <Binding Path="DeviceInfo.PolishWaferInfo.DefineName.Value"></Binding>
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}" Path="DataContext.PolishWaferSourceInformations" />
                                            </MultiBinding>
                                        </Border.BorderBrush>
                                        <Grid >
                                            <StackPanel Orientation="Horizontal">
                                                <Label  HorizontalAlignment="Center" VerticalContentAlignment="Center" 
                                                Content="{Binding WaferSupplyInfo.ID, Converter={StaticResource ModuleIDToStringConv}}" 
                                            FontSize="12" Foreground="White" Width="Auto"/>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                    </Grid>
                </Grid>
            </GroupBox>
        </Grid>
    </Grid>
</UserControl>
