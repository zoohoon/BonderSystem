<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:LoaderStageSummaryViewModule"
             xmlns:vc="clr-namespace:ValueConverters;assembly=ValueConverters"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:MahAppsControls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             xmlns:cui="clr-namespace:CUI;assembly=CUI"
             xmlns:pi="clr-namespace:ProberInterfaces;assembly=ProberInterfaces"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             x:Class="LoaderStageSummaryViewModule.LoaderStageSummary_6X2"
             mc:Ignorable="d" x:Name="window"
             d:DesignHeight="450" d:DesignWidth="1280" MaxHeight="1080" MaxWidth="1920">

    <UserControl.Resources>

        <local:NullToStringConverter x:Key="NullToStringConv"/>
        <local:LotIDToStringConverter x:Key="LotIDToStringConv"/>
        <local:WaferExistToBrushConverter x:Key="WaferExistToBrushConv"/>
        <local:TabSizeConverter x:Key="tabSizeConverter" />
        <local:DataSourceToLastItemConverter x:Key="DataSourceToLastItemConv"/>
        <local:AlignStateToForegroundConverter x:Key="AlignStateToForegroundConv"/>
        <local:PadCountToForegroundConverter x:Key="PadCountToForegroundConv"/>
        <local:PadCountToTextConverter x:Key="PadCountToTextConv"/>

        <local:StageModeToEnabledLockConverter x:Key="StageModeToEnabledLockConv"/>
        <vc:ComparisonConverter2 x:Key="ComparisonConve"/>

        <local:CellSelectedToBrushConverter x:Key="CellSelectedToBrushConv"/>
        <local:CellSelectedToBorderThicknessConverter x:Key="CellSelectedToBorderThicknessConv"/>
        <local:StageModeNSoakingModuleStateToIsEnabledConverter x:Key="StageModeNSoakingModuleStateToIsEnabledConv"/>
        <local:StageMovelockBackgroundConverter x:Key="StageMovelockBackgroundConv"/>
        <local:StageMovelockVisibleConverter x:Key="StageMovelockVisibleConv"/>

        <vc:IntToStringPlusConverter x:Key="IntToStringPlusConv" />
        <vc:StageStateToValueTextConverter2 x:Key="StageStateToValueTextConverter" />
        <vc:StageStateToValueConverter x:Key="StageStateToValueConverter" />
        <vc:StageLockToValueTextConverter x:Key="StageLockToValueTextConverter" />
        <vc:FoupLotStateValueConverter x:Key="FoupLotStateValueConverter" />
        <vc:StageErrorStateToVisibilityConvertet x:Key="StageErrorStateToVisibilityConvertet"/>
        <vc:AlignStateToPathFillConverter x:Key="AlignStateToPathFillConv"/>
        <vc:AlignStateToPathDataConverter x:Key="AlignStateToPathDataConv"/>
        <vc:WaferOntheChuckToColorConverter x:Key="WaferOntheChuckToColorConv"/>
        <vc:CellObjectForeGroundConverter x:Key="CellObjectForeGroundConv"/>

        <vc:ScanStateValueConverter x:Key="ScanStateValueConverter" />
        <vc:EnumGPLoaderWaferStatusTextColorConverter x:Key="EnumGPLoaderWaferStatusTextColorConverter" />

        <vc:EnumSlotTextConverter x:Key="EnumSlotTextConverter" />
        <vc:EnumSlotTextConverter1 x:Key="EnumSlotTextConverter1" />

        <vc:TimeVisibiltyConvert x:Key="TimeVisibiltyConvert" />
        <vc:GridWidthConvert x:Key="GridWidthConvert" />
        <vc:WaferRecoveryVisibiltyConvert x:Key="WaferRecoveryVisibiltyConvert" />
        
        <vc:GPLotStateToStringConverter1 x:Key="BtoVConv1" />
        <vc:GPLotStateToStringConverter2 x:Key="BtoVConv2" />
        <vc:GPLotStateToStringConverter3 x:Key="BtoVConv3" />
        <vc:GPLotStateToStringConverter4 x:Key="BtoVConv4" />
        <vc:GPLotStateToStringConverter5 x:Key="BtoVConv5" />
        <vc:StageLoaderErrorStateCon x:Key="StageLoaderErrorStateConv"/>
        <vc:ViewTargetConverter x:Key="ViewTargetConverter"/>
        <vc:ForcedDoneStateTextConverter x:Key="ForcedDoneToTextConv" />

        <vc:WaferStatusToValueConverter x:Key="StatusToColorConv" />
        <vc:CardStatusToValueConverter x:Key="CardStatusToColorConv" />

        <vc:EnumStageWaferStatusTextConverter x:Key="WaferStatusToTextConv" />
        <vc:EnumStageCardStatusTextConverter x:Key="CardStatusToTextConv" />
        <vc:EnumStageWaferStatusTextConverter1 x:Key="WaferStatusToTextConv1"/>
        <vc:EnumStageCardStatusTextConverter1 x:Key="CardStatusToTextConv1" />

        <vc:EventBadgeBackGroundBrushConverter x:Key="EventBadgeBackGroundBrushConv"/>
        <vc:EventBadgeForeGroundBrushConverter x:Key="EventBadgeForeGroundBrushConv"/>
        <vc:DynamicCarrierToEnableStringConverter x:Key="DynamicCarrierToEnableStringConv"/>
        <vc:FoupDynamicCarrierModeVisiableConverter x:Key="FoupDynamicCarrierModeVisiableConv"/>
        <vc:FoupDynamicCarrierModeForeGroundConverter x:Key="FoupDynamicCarrierModeTextConv"/>

        <vc:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

        <vc:EventCodeEnumToBoolConverter x:Key="EventCodeEnumToBoolConverter"/>

        <vc:IndexConverterToInt x:Key="IndexConverter"/>
        <vc:MonitoringCheckIndexConverter x:Key="MonitoringCheckIndexConverter"/>

        <vc:DeviceLabelBorderConverter x:Key="DeviceLabelBorderConv"/>
        <vc:InverseBooleanConverter x:Key="InverseBoolToVisConv"/>
        <vc:StageSVLabelColorConverter x:Key="StageSVLabelColorConv"/>
        <vc:CassetteTypeConverter x:Key="CassetteTypeConv"/>
        
        <BitmapImage x:Key="Background.Lock" UriSource="pack://application:,,,/ImageResourcePack;component/Images/SemicsBackground1_2.png"/>
        
        <Style x:Key="DefaultBtn" TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderThickness="0" BorderBrush="Black" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Opacity" Value="0.8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="StatusLabelStyle" TargetType="{x:Type Label}">
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Foreground" Value="DimGray"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="DimGray"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Height" Value="36"/>
            <Setter Property="Width" Value="120"/>
        </Style>

        <Style x:Key="GroupBoxForegroundStyle" TargetType="{x:Type GroupBox}">
            <Setter Property="Foreground" Value="White"/>
        </Style>

        <Style x:Key="FoupModuleNameLabelStyle" TargetType="{x:Type Label}">
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style>

        <Style TargetType="{x:Type TabItem}">
            <Setter Property="Width">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource tabSizeConverter}">
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type TabControl}, Mode=FindAncestor}" />
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type TabControl}, Mode=FindAncestor}" Path="ActualWidth" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="myListViewStyle">
            <Style.Resources>
                <!-- Background of selected item when focussed -->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LimeGreen" />
                <!-- Background of selected item when not focussed -->
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Green" />
            </Style.Resources>
        </Style>

        <Style x:Key="ON_OFF_ToggleBtn" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <ControlTemplate.Resources>
                            <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut"/>
                            <Storyboard x:Key="ShowRipple">
                                <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             To="0.26" Duration="0"/>
                                <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             From="1" To="2.5" Duration="0:0:0.2"/>
                                <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             From="1" To="2.5" Duration="0:0:0.2"/>
                            </Storyboard>
                            <Storyboard x:Key="HideRipple">
                                <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             To="0.26" Duration="0:0:0.3"/>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Viewbox Width="80" Margin="0,5,0,5">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition From="*" To="Checked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="-10"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="50">
                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                            <QuadraticEase EasingMode="EaseOut"/>
                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                    </EasingDoubleKeyFrame>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                        <VisualTransition From="Checked" To="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="50"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-10">
                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                            <QuadraticEase EasingMode="EaseOut"/>
                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                    </EasingDoubleKeyFrame>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"
                                                         Duration="0" To="50" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"
                                                         Duration="0" To="-10" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid>
                                <Rectangle x:Name="Track"
                                                    HorizontalAlignment="Left" Height="25"
                                                    Stroke="{x:Null}" 
                                                   VerticalAlignment="Top" Width="65" 
                                                   RadiusY="7.5" RadiusX="7.5"
                                                   Opacity="0.56"/>
                                <TextBlock  x:Name="TrackText"
                                                    VerticalAlignment="Center"
                                                    Foreground="Black"
                                                    FontSize="18"/>

                                <Grid x:Name="ThumbHolder"
                                  HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Grid.RenderTransform>
                                        <TranslateTransform X="0" Y="0"/>
                                    </Grid.RenderTransform>
                                    <Ellipse x:Name="RippleThumb"
                                         Fill="{DynamicResource PrimaryHueLightBrush}"
                                         Height="15" Width="15"
                                         IsHitTestVisible="False"
                                         Opacity="0.26"
                                         Margin="0"
                                         HorizontalAlignment="Center" VerticalAlignment="Center"
                                         RenderTransformOrigin="0.5,0.5">
                                        <Ellipse.RenderTransform>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                    <AdornerDecorator CacheMode="{Binding (materialDesign:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}">
                                        <Ellipse x:Name="Thumb"
                                             Fill="#FFFAFAFA" Stroke="Gray" 
                                             HorizontalAlignment="Center" VerticalAlignment="Center"
                                             Width="25" Height="25"
                                             Margin="0,0,0,0"
                                             RenderTransformOrigin="0.5,0.5"
                                             Effect="{DynamicResource MaterialDesignShadowDepth1}"/>
                                    </AdornerDecorator>
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                                  Margin="{TemplateBinding Padding}"
                                                  x:Name="ContentPresenter"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                  FlowDirection="LeftToRight"/>
                                </Grid>
                            </Grid>
                        </Viewbox>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <!--<Setter TargetName="Thumb" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />-->
                                <Setter TargetName="Track" Property="Fill" Value="White" />
                                <Setter TargetName="Track" Property="Opacity" Value="0.80" />
                                <Setter TargetName="TrackText" Property="Text" Value="On" />
                                <Setter TargetName="TrackText" Property="HorizontalAlignment" Value="Left" />
                                <Setter TargetName="TrackText" Property="Margin" Value="10 0 0 0" />
                                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="True" />
                                    <Condition Property="materialDesign:ToggleButtonAssist.HasOnContent" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding (materialDesign:ToggleButtonAssist.OnContent), RelativeSource={RelativeSource TemplatedParent}}" />
                                <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding (materialDesign:ToggleButtonAssist.OnContentTemplate), RelativeSource={RelativeSource TemplatedParent}}" />
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                <Setter TargetName="Track" Property="Fill" Value="{DynamicResource PrimaryHueLightBrush}" />
                                <Setter TargetName="Track" Property="Opacity" Value="0.50" />
                                <Setter TargetName="TrackText" Property="Text" Value="Off" />
                                <Setter TargetName="TrackText" Property="HorizontalAlignment" Value="Right" />
                                <Setter TargetName="TrackText" Property="Margin" Value="0 0 10 0" />
                                <!-- Need to set Foreground to Background here instead of hardcoded PrimaryHueMidBrush -->
                            </Trigger>
                            <Trigger Property="Button.IsDefaulted" Value="true"/>
                            <Trigger Property="IsMouseOver" Value="true"/>
                            <Trigger Property="IsPressed" Value="true">
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource ShowRipple}"/>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource HideRipple}"/>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Thumb" Property="Fill" Value="#BDBDBD" />
                                <Setter TargetName="Track" Property="Fill">
                                    <Setter.Value>
                                        <SolidColorBrush Color="White" Opacity=".12" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <LinearGradientBrush x:Key="ListItemHoverFill" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFF1FBFF" Offset="0"/>
            <GradientStop Color="#FFD5F1FE" Offset="1"/>
        </LinearGradientBrush>

        <SolidColorBrush x:Key="MahApps.Metro.Brushes.Badged.DisabledBackgroundBrush" Color="Transparent"/>

        <SolidColorBrush x:Key="Item.MouseOver.Background" Color="Gold"/>
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>

        <!--<Style x:Key="MyContainer" TargetType="{x:Type ListViewItem}">

            <Style.Triggers>
                
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Foreground" Value="Blue" />
                    <Setter Property="Cursor" Value="Hand"/>
                </Trigger>

                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{StaticResource ListItemHoverFill}" />
                    <Setter Property="BorderBrush" Value="#FF98DDFB" />
                    -->
        <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="#80FFFFFF" />
                    <Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />
                    <Setter TargetName="UpperHighlight" Property="Fill" Value="#40FFFFFF" />-->
        <!--
                </Trigger>
                
            </Style.Triggers>
        </Style>-->

        <ControlTemplate x:Key="ExampleButton" TargetType="{x:Type Button}">
            <Grid>
                <Border Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                        BorderBrush="Transparent" 
                        BorderThickness="1" x:Name="Border" Margin="26,-15">
                    <ContentPresenter />
                </Border>
                <Viewbox Margin="5">
                    <Path x:Name="SearchIcon" Data="M21,19V20H3V19L5,17V11C5,7.9 7.03,5.17 10,4.29C10,4.19 10,4.1 10,4A2,2 0 0,1 12,2A2,2 0 0,1 14,4C14,4.1 14,4.19 14,4.29C16.97,5.17 19,7.9 19,11V17L21,19M14,21A2,2 0 0,1 12,23A2,2 0 0,1 10,21" 
                              Fill="White"
                              Stretch="Fill"/>
                </Viewbox>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                    <Setter TargetName="SearchIcon" Property="Data" Value="M20.12 14.46L18 16.59L15.88 14.46L14.46 15.88L16.59 18L14.46 20.12L15.88 21.54L18 19.41L20.12 21.54L21.54 20.12L19.41 18L21.54 15.88M12 2C10.9 2 10 2.9 10 4C10 4.1 10 4.19 10 4.29C7.12 5.14 5 7.82 5 11V17L3 19V20H12.35C12.12 19.36 12 18.68 12 18C12 14.69 14.69 12 18 12C18.34 12 18.67 12.03 19 12.09V11C19 7.82 16.88 5.14 14 4.29C14 4.19 14 4.1 14 4C14 2.9 13.11 2 12 2M10 21C10 22.11 10.9 23 12 23C12.66 23 13.28 22.67 13.65 22.13C13.33 21.79 13.05 21.41 12.81 21Z"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

    </UserControl.Resources>

    <Grid VerticalAlignment="Stretch">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="775"/>
            <!--<ColumnDefinition Width="720"/>-->
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- Information Tap Control -->
        <Grid Grid.Column="0" HorizontalAlignment="Stretch">

            <Border Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" Margin="3" BorderThickness="2" BorderBrush="White" >
                <MahAppsControls:MetroAnimatedSingleRowTabControl SelectedIndex="{Binding SelectedTabIndex}" 
                    ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                    ScrollViewer.VerticalScrollBarVisibility="Disabled">

                    <MahAppsControls:MetroAnimatedSingleRowTabControl.Resources>
                        <SolidColorBrush x:Key="AccentColorBrush" Color="#9370d8"/>
                        <SolidColorBrush x:Key="HighlightBrush" Color="#7260b5"/>
                    </MahAppsControls:MetroAnimatedSingleRowTabControl.Resources>

                    <MahAppsControls:MetroTabItem
                    x:Name="FOUP"
                    Header="Foup Information" BorderThickness="1" BorderBrush="Black"
                    MahAppsControls:ControlsHelper.HeaderFontSize="20"
                    MahAppsControls:ControlsHelper.HeaderMargin="8"
                        ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                        ScrollViewer.VerticalScrollBarVisibility="Hidden">
                        <Grid
                        Background="#333333"
                        Margin="8"
                        HorizontalAlignment="Center" >
                            <ListView VirtualizingPanel.IsContainerVirtualizable="True"
                          VirtualizingPanel.IsVirtualizing="True"
                          VirtualizingPanel.IsVirtualizingWhenGrouping="True"  
                Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="1" x:Name="FoupListView" 
                      ItemsSource="{Binding LoaderModule.Foups}" Background="#FF1C1C1F" VerticalAlignment="Stretch"
                      ScrollViewer.HorizontalScrollBarVisibility="Auto"  
                    ScrollViewer.VerticalScrollBarVisibility="Disabled"
                                      Focusable="False" 
                      MinWidth="30"  MinHeight="40"
                                      Margin="-1, 0, 0, 0">
                                <ListView.Resources>
                                    <Style TargetType="{x:Type ScrollBar}">
                                        <Setter Property="Height" Value="30"/>
                                        <Setter Property="Width" Value="auto"/>
                                        <Setter Property="Background" Value="WhiteSmoke"/>
                                    </Style>
                                </ListView.Resources>
                                <ListView.ItemContainerStyle>
                                    <Style TargetType="{x:Type ListViewItem}">
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                        <Setter Property="VerticalContentAlignment" Value="Stretch" />
                                    </Style>
                                </ListView.ItemContainerStyle>
                                <ListView.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" />
                                        <!--<WrapPanel Orientation="Horizontal"></WrapPanel>-->
                                    </ItemsPanelTemplate>
                                </ListView.ItemsPanel>
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <Border BorderBrush="{Binding ScanState, Converter={StaticResource ScanStateValueConverter}}" BorderThickness="1" Width="240" >
                                            <Grid >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Image Width="64" Height="48" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" HorizontalAlignment="Left" VerticalAlignment="Top" >
                                                    <Image.Source>
                                                        <BitmapImage UriSource="./Resources/FOUP.png"/>
                                                    </Image.Source>
                                                </Image>
                                                <StackPanel Orientation="Vertical" HorizontalAlignment="Center" Grid.Column="0" Grid.Row="0" >
                                                    <Grid HorizontalAlignment="Center" >
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="4*"/>
                                                            <ColumnDefinition Width="*"/>
                                                        </Grid.ColumnDefinitions>
                                                        <Label Content="{Binding Name}" FontSize="18" FontWeight="Bold" HorizontalAlignment="Center"  VerticalAlignment="Top"
                                                            Style="{StaticResource FoupModuleNameLabelStyle}" Grid.Column="0" Margin="15,0,0,0"/>
                                                        <Label Content="{Binding CassetteType}" ContentStringFormat="[{0}]" FontSize="15" HorizontalAlignment="Center"  VerticalAlignment="Center"
                                                               Style="{StaticResource FoupModuleNameLabelStyle}" Grid.Column="1" Foreground="#9370d8" Margin="-5,0,0,0">
                                                            <Label.Visibility>
                                                                <MultiBinding Converter="{StaticResource CassetteTypeConv}">
                                                                    <Binding Path="CassetteType"/>
                                                                    <Binding Path="DataContext.TriggerForStartConfirm" RelativeSource="{RelativeSource AncestorType=ListView}" />
                                                                </MultiBinding>
                                                            </Label.Visibility>
                                                        </Label>

                                                        <StackPanel Orientation="Horizontal"  Margin="0"  Grid.Column="1" VerticalAlignment="Center" 
                                                                    Visibility="{Binding Path=DataContext.LoaderMaster.DynamicMode, ElementName=window, Converter={StaticResource FoupDynamicCarrierModeVisiableConv}}">
                                                            <Label Content="L" FontSize="14" FontWeight="Bold" HorizontalAlignment="Right" HorizontalContentAlignment="Right"  VerticalAlignment="Center"
                                                             Margin="0" Padding="0" Grid.Column="1">
                                                                <Label.Foreground>
                                                                    <MultiBinding Converter="{StaticResource FoupDynamicCarrierModeTextConv}">
                                                                        <Binding Path="DynamicFoupState"/>
                                                                        <Binding Source="L"/>
                                                                    </MultiBinding>
                                                                </Label.Foreground>
                                                            </Label>
                                                            <Label Content=" / " FontSize="14" FontWeight="Bold" HorizontalAlignment="Right" HorizontalContentAlignment="Right"  VerticalAlignment="Center"
                                                             Margin="0" Padding="0" Grid.Column="1"/>
                                                            <Label Content="U" FontSize="14" FontWeight="Bold" HorizontalAlignment="Right" HorizontalContentAlignment="Right"  VerticalAlignment="Center"
                                                             Margin="0" Padding="0" Grid.Column="1">
                                                                <Label.Foreground>
                                                                    <MultiBinding Converter="{StaticResource FoupDynamicCarrierModeTextConv}">
                                                                        <!--<Binding Path="Index"/>-->
                                                                        <!--<Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}" Path="DataContext.LoaderMaster.ActiveLotInfos" />-->
                                                                        <Binding Path="DynamicFoupState"/>
                                                                        <Binding Source="U"/>
                                                                    </MultiBinding>
                                                                </Label.Foreground>
                                                            </Label>
                                                        </StackPanel>

                                                    </Grid>
                                                    <!--<Label Content="{Binding Name}" FontSize="18" FontWeight="Bold" HorizontalAlignment="Center"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>-->
                                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" >
                                                        <Label Content="Angle :" FontSize="10" FontWeight="Bold" HorizontalAlignment="Center"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                        <Label Content="{Binding NotchAngle}" FontSize="10" FontWeight="Bold" HorizontalAlignment="Center"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                        <Label Content="LotPriority :" FontSize="10" FontWeight="Bold" HorizontalAlignment="Right"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                        <Label Content="{Binding LotPriority}" FontSize="10" FontWeight="Bold" HorizontalAlignment="Right"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                    </StackPanel>
                                                </StackPanel>
                                                <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Vertical" HorizontalAlignment="Right">
                                                    <!--<Label Content="LOT State : " FontSize="13" FontWeight="Bold"   VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>-->
                                                    <Label Content="{Binding LotState}"  FontSize="13" Foreground="{Binding LotState, Converter={StaticResource FoupLotStateValueConverter}}" FontWeight="Bold"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                    <CheckBox VerticalAlignment="Top" HorizontalAlignment="Right" Background="White" IsChecked="{Binding IsLotEnd, Mode=TwoWay}" IsEnabled="{Binding IsLotEndEnable, Mode=TwoWay}" >
                                                        <CheckBox.LayoutTransform>
                                                            <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                                                        </CheckBox.LayoutTransform>
                                                    </CheckBox>
                                                </StackPanel>
                                                <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Left">
                                                    <Label Content="Start Time : " FontSize="11.5" FontWeight="Bold"   VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                    <Label Content="{Binding LotStartTimeStr}" FontSize="11.5" FontWeight="Bold"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                </StackPanel>
                                                <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Left">
                                                    <Label Content="End Time  : " FontSize="11.5" FontWeight="Bold"   VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                    <Label Content="{Binding LotEndTimeStr}" FontSize="11.5" FontWeight="Bold"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                </StackPanel>


                                                <Grid Grid.Row="4" Background="#FF1C1C1F" >
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <ListView Grid.Column="0"  HorizontalAlignment="Center" x:Name="SlotListView" 
                               ItemsSource="{Binding Slots}" Background="#FF1C1C1F" Focusable="False" 
                               ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                                              ScrollViewer.VerticalScrollBarVisibility="Disabled">
                                                        <ListView.ItemContainerStyle>
                                                            <Style TargetType="{x:Type ListViewItem}">
                                                                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                                                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                                <!--<Setter Property="IsSelected" Value="{Binding DataContext.IsSelected,
                                RelativeSource={RelativeSource AncestorType={x:Type UserControl}, 
                                Mode=FindAncestor}, Mode=OneWay}"/>-->
                                                            </Style>
                                                        </ListView.ItemContainerStyle>
                                                        <ListView.ItemsPanel>
                                                            <ItemsPanelTemplate>
                                                                <StackPanel Orientation="Vertical" />
                                                                <!--<UniformGrid Columns="1"></UniformGrid>-->
                                                                <!--<WrapPanel Orientation="Horizontal"></WrapPanel>-->
                                                            </ItemsPanelTemplate>
                                                        </ListView.ItemsPanel>
                                                        <ListView.ItemTemplate>
                                                            <DataTemplate>
                                                                <Border  BorderThickness="1" Width="220" Height="25">
                                                                    <Border.BorderBrush>
                                                                        <MultiBinding Converter="{StaticResource EnumGPLoaderWaferStatusTextColorConverter}">
                                                                            <Binding Path="WaferStatus"/>
                                                                            <Binding Path="WaferState"/>
                                                                        </MultiBinding>
                                                                    </Border.BorderBrush>
                                                                    <Grid VerticalAlignment="Center">
                                                                        <StackPanel Orientation="Horizontal">
                                                                            <Label  HorizontalAlignment="Center" Content="{Binding Name}" FontSize="10" Foreground="White" Width="80" Height="22" Margin="1" />
                                                                            <Label  HorizontalAlignment="Left" FontSize="9" Padding="6"   Width="120" Height="23" Margin="1" >
                                                                                <Label.Foreground>
                                                                                    <MultiBinding Converter="{StaticResource EnumGPLoaderWaferStatusTextColorConverter}">
                                                                                        <Binding Path="WaferStatus"/>
                                                                                        <Binding Path="WaferState"/>
                                                                                    </MultiBinding>
                                                                                </Label.Foreground>
                                                                                <MultiBinding Converter="{StaticResource EnumSlotTextConverter1}">
                                                                                    <Binding Path="WaferStatus"/>
                                                                                    <Binding Path="WaferState"/>
                                                                                    <Binding Path="WaferObj"/>
                                                                                </MultiBinding>
                                                                            </Label>
                                                                        </StackPanel>
                                                                    </Grid>
                                                                </Border>
                                                            </DataTemplate>
                                                        </ListView.ItemTemplate>
                                                    </ListView>
                                                </Grid>
                                                <StackPanel Grid.Row="5" Orientation="Vertical" >
                                                    <Label Content="Allocated Cell Number : " FontSize="13" FontWeight="Bold"   VerticalAlignment="Top" HorizontalAlignment="Center"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                    <Label Content="{Binding AllocatedCellInfo}" FontSize="13" FontWeight="Bold"  VerticalAlignment="Top" HorizontalAlignment="Center"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                </StackPanel>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                        </Grid>
                    </MahAppsControls:MetroTabItem>
                    <!--<MahAppsControls:MetroTabItem 
                            Header="LoaderJob"  BorderThickness="1" 
                            BorderBrush="Black"
                            MahAppsControls:ControlsHelper.HeaderFontSize="20"
                            MahAppsControls:ControlsHelper.HeaderMargin="8">
                        <Grid
                        Background="#333333"
                        Margin="8"
                        >
                            <ListView VirtualizingPanel.IsContainerVirtualizable="True"
                          VirtualizingPanel.IsVirtualizing="True"
                          VirtualizingPanel.IsVirtualizingWhenGrouping="True"  
                Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="1" x:Name="LoaderJobView" 
                      ItemsSource="{Binding LoaderModule.LoaderJobCollection}" Background="#FF1C1C1F" VerticalAlignment="Stretch"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                    ScrollViewer.VerticalScrollBarVisibility="Disabled"
                                      Focusable="False" 
                      MinWidth="30"  MinHeight="40"
                                      Margin="-1, 0, 0, 0">
                                <ListView.ItemContainerStyle>
                                    <Style TargetType="ListViewItem">
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                        <Setter Property="VerticalContentAlignment" Value="Stretch" />
                                    </Style>
                                </ListView.ItemContainerStyle>
                                <ListView.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" />
                                        -->
                    <!--<WrapPanel Orientation="Horizontal"></WrapPanel>-->
                    <!--
                                    </ItemsPanelTemplate>
                                </ListView.ItemsPanel>
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                            <Grid >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="92*"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                    <Image Width="64" Height="48" HorizontalAlignment="Left" VerticalAlignment="Top" >
                                                        <Image.Source>
                                                            <BitmapImage UriSource="./Resources/FOUP.png"/>
                                                        </Image.Source>
                                                    </Image>
                                                    <Label Content="{Binding Name}" FontSize="18" FontWeight="Bold" HorizontalAlignment="Center"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                </StackPanel>
                                                <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center">
                                                    <Label Content="Origin: " FontSize="13" FontWeight="Bold"   VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                <Label Content="{Binding Origin}" FontSize="13" FontWeight="Bold"  VerticalAlignment="Top"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                </StackPanel>
                                                <Grid Grid.Row="2" Background="#FF1C1C1F" >
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <ListView Grid.Column="0"  HorizontalAlignment="Center" x:Name="SlotListView" 
                               ItemsSource="{Binding LoaderJobList}" Background="#FF1C1C1F" Focusable="False" 
                               ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                                              ScrollViewer.VerticalScrollBarVisibility="Disabled">
                                                        <ListView.ItemContainerStyle>
                                                            <Style TargetType="ListViewItem">
                                                                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                                                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                                -->
                    <!--<Setter Property="IsSelected" Value="{Binding DataContext.IsSelected,
                                RelativeSource={RelativeSource AncestorType={x:Type UserControl}, 
                                Mode=FindAncestor}, Mode=OneWay}"/>-->
                    <!--
                                                            </Style>
                                                        </ListView.ItemContainerStyle>
                                                        <ListView.ItemsPanel>
                                                            <ItemsPanelTemplate>
                                                                <StackPanel Orientation="Vertical" />
                                                                -->
                    <!--<UniformGrid Columns="1"></UniformGrid>-->
                    <!--<WrapPanel Orientation="Horizontal"></WrapPanel>-->
                    <!--
                                                            </ItemsPanelTemplate>
                                                        </ListView.ItemsPanel>
                                                        <ListView.ItemTemplate>
                                                            <DataTemplate>
                                                                <Border  BorderThickness="1" Width="220" BorderBrush="White">
                                                                    <Grid VerticalAlignment="Center">
                                                                        <StackPanel Orientation="Horizontal">
                                                                            
                                                                            <Label  HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding CurrentHolder}" FontSize="15" Foreground="White" Width="200" Height="200" Margin="1" />
                                                                            -->
                    <!--<Label  HorizontalAlignment="Left" FontSize="9" Padding="6"   Width="120" Height="23" Margin="1" >
                                                                                <Label.Foreground>
                                                                                    <MultiBinding Converter="{StaticResource EnumGPLoaderWaferStatusTextColorConverter}">
                                                                                        <Binding Path="WaferStatus"/>
                                                                                        <Binding Path="WaferState"/>
                                                                                    </MultiBinding>
                                                                                </Label.Foreground>
                                                                                <Label.Content>
                                                                                    <MultiBinding Converter="{StaticResource EnumSlotTextConverter1}">
                                                                                        <Binding Path="WaferStatus"/>
                                                                                        <Binding Path="WaferState"/>
                                                                                        <Binding Path="WaferObj"/>
                                                                                    </MultiBinding>
                                                                                </Label.Content>
                                                                            </Label>-->
                    <!--
                                                                        </StackPanel>
                                                                    </Grid>
                                                                </Border>
                                                            </DataTemplate>
                                                        </ListView.ItemTemplate>
                                                    </ListView>
                                                </Grid>
                                                -->
                    <!--<StackPanel Grid.Row="3" Orientation="Vertical" >
                                                    <Label Content="Allocated Cell Number : " FontSize="13" FontWeight="Bold"   VerticalAlignment="Top" HorizontalAlignment="Center"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                    <Label Content="{Binding AllocatedCellInfo}" FontSize="13" FontWeight="Bold"  VerticalAlignment="Top" HorizontalAlignment="Center"
                                       Style="{StaticResource FoupModuleNameLabelStyle}"/>
                                                </StackPanel>-->
                    <!--
                                            </Grid>
                                      
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                        </Grid>
                    </MahAppsControls:MetroTabItem>-->
                    <MahAppsControls:MetroTabItem
                        x:Name="CELL"
                        Header="Cell Information"  BorderThickness="1" BorderBrush="Black"
                        MahAppsControls:ControlsHelper.HeaderFontSize="20"  
                        MahAppsControls:ControlsHelper.HeaderMargin="8">
                        <Grid>
                            <Grid.Resources>
                                <Style TargetType="{x:Type Label}">
                                    <Setter Property="Margin" Value="8,2,4,2"/>
                                </Style>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="4*"/>
                                <ColumnDefinition Width="6*"/>
                            </Grid.ColumnDefinitions>

                            <!--App-->
                            <Border Grid.Column="0" Grid.ColumnSpan="2" 
                            BorderBrush="WhiteSmoke" BorderThickness="1" 
                            Margin="0,0,0,0"  Background="Black"
                            >
                                <!--Lot Info-->
                                <Grid Background="#333333" Margin="8">

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1.1*" />
                                        <ColumnDefinition Width="1*" />
                                    </Grid.ColumnDefinitions>

                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="5*"/>
                                        <RowDefinition Height="1*"/>
                                    </Grid.RowDefinitions>

                                    <Grid  x:Name="LotInfoGrid"  Grid.Column="0">

                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="1.0*"/>
                                            <RowDefinition Height="1.0*"/>
                                            <RowDefinition Height="1.0*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.8*"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <Border Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Grid.RowSpan="2" BorderThickness="1" BorderBrush="White"  />

                                        <Label Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Connect"/>
                                        <Label Grid.Row="0" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.ConnectState, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Mode"/>
                                        <Label Grid.Row="1" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.CellMode, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Border Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Grid.RowSpan="13" BorderThickness="1" BorderBrush="White"  />

                                        <Label Grid.Row="2" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="LOT ID"/>
                                        <Label Grid.Row="2" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.LotID, StringFormat=:  \{0\}}"/>
                                        </Label>
                                        
                                        <Label Grid.Row="3" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Device Name"/>
                                        <Label Grid.Row="3" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.DeviceName, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="4" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Probe Card ID"/>
                                        <Label Grid.Row="4" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White">
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.ProbeCardID, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="5" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Wafer ID"/>
                                        <Label Grid.Row="5" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.WaferID, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="6" Grid.Column="0" HorizontalAlignment="Left" FontSize="16"  VerticalAlignment="Center" Foreground="White" Content="Loading Time"/>
                                        <Label Grid.Row="6" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Visibility="{Binding SelectedStage.StageInfo.LotData.LoadingTimeEnable, Converter={StaticResource TimeVisibiltyConvert}}" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.WaferLoadingTime, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="7" Grid.Column="0" HorizontalAlignment="Left" FontSize="16"  VerticalAlignment="Center" Foreground="White" Content="Foup Number"/>
                                        <Label Grid.Row="7" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.FoupNumber, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="8" Grid.Column="0" HorizontalAlignment="Left" FontSize="16"  VerticalAlignment="Center" Foreground="White" Content="Slot Number"/>
                                        <Label Grid.Row="8" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.SlotNumber, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Grid Grid.Row="9" Grid.Column="0">

                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <Label Grid.Row="0" HorizontalAlignment="Left" FontSize="14"  VerticalAlignment="Center" Foreground="White" Content="Wafer Count"/>
                                            <Label Grid.Row="1" Margin="18,-14,0,0" HorizontalAlignment="Left" FontSize="12"  VerticalAlignment="Center" Foreground="White" Content="(THIS LOT)"/>
                                        </Grid>

                                        <Label Grid.Row="9" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White">
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.WaferCount, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Grid Grid.Row="10" Grid.Column="0">

                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <Label Grid.Row="0" HorizontalAlignment="Left" FontSize="14"  VerticalAlignment="Center" Foreground="White" Content="Wafer Count"/>
                                            <Label Grid.Row="1" Margin="0,-14,0,0" HorizontalAlignment="Center" FontSize="12"  VerticalAlignment="Center" Foreground="White" Content="(AFTER CARD CHANGE)"/>
                                        </Grid>

                                        <Label Grid.Row="10" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.ProcessedWaferCountUntilBeforeCardChange, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Grid Grid.Row="11" Grid.Column="0">

                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <Label Grid.Row="0" HorizontalAlignment="Left" FontSize="14"  VerticalAlignment="Center" Foreground="White" Content="Touchdown Count"/>
                                            <Label Grid.Row="1" Margin="0,-14,0,0" HorizontalAlignment="Center" FontSize="12"  VerticalAlignment="Center" Foreground="White" Content="(AFTER CARD CHANGE)"/>
                                        </Grid>

                                        <Label Grid.Row="11" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.TouchDownCountUntilBeforeCardChange, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="12" Grid.Column="0" HorizontalAlignment="Left" FontSize="16"  VerticalAlignment="Center" Foreground="White" Content="Current Temp"/>
                                        <Label Grid.Row="12" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.CurTemp, StringFormat=:  \{0\}°C}"/>
                                        </Label>

                                        <Label Grid.Row="13" Grid.Column="0" HorizontalAlignment="Left" FontSize="16"  VerticalAlignment="Center" Foreground="White" Content="Set Temp"/>
                                        <Label Grid.Row="13" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.SetTemp, StringFormat=:  \{0\}°C}"/>
                                        </Label>

                                        <Label Grid.Row="14" Grid.Column="0" HorizontalAlignment="Left" FontSize="16"  VerticalAlignment="Center" Foreground="White" Content="Deviation Temp"/>
                                        <Label Grid.Row="14" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.Deviation, StringFormat=:  \{0\}°C}"/>
                                        </Label>

                                    </Grid>

                                    <Grid x:Name="ModuleInfoGrid"  Grid.Column="1" >

                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" MinHeight="100"/>
                                            <RowDefinition Height="*" MinHeight="100"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>

                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.7*"/>
                                            <ColumnDefinition Width="1*"/>
                                        </Grid.ColumnDefinitions>

                                        <Border Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Grid.RowSpan="2" BorderThickness="1" BorderBrush="White"  />

                                        <Grid Grid.Row="0" Grid.Column="0">

                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>

                                            <Label Grid.Row="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Auto Update"/>

                                            <ToggleButton Grid.Row="1" Style="{DynamicResource ON_OFF_ToggleBtn}"
                                                          VerticalAlignment="Center"
                                                          HorizontalAlignment="Center"
                                                          IsChecked="{Binding IsTimerEnabled}"/>
                                        </Grid>


                                        <Grid Grid.Row="0" Grid.Column="1">

                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock Grid.Row="0" HorizontalAlignment="Center"  FontSize="14" VerticalAlignment="Center" Foreground="White" 
                                                       Text="{Binding UpdateTimerInterval, StringFormat=Interval \{0\} sec}"/>

                                            <TextBlock Grid.Row="1" HorizontalAlignment="Center"  FontSize="14" VerticalAlignment="Center" Foreground="White" 
                                                       Text="{Binding TimeLeft, StringFormat=Time Left \{0\} sec}"/>
                                        </Grid>


                                        <Grid Grid.Row="1" Grid.Column="0">

                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>

                                            <Label Grid.Row="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Last Updated"/>

                                            <Button Grid.Row="1" IsEnabled="True" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                                    Command="{Binding CellInfoRenewCommand}" Width="60" Height="35" >
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition />
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <materialDesign:PackIcon Height="35" Width="60" HorizontalAlignment="Center" >
                                                        <materialDesign:PackIcon.Style>
                                                            <Style TargetType="materialDesign:PackIcon"
                                                                       BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                                <Setter Property="Kind" Value="Replay" />
                                                            </Style>
                                                        </materialDesign:PackIcon.Style>
                                                    </materialDesign:PackIcon>

                                                </Grid>
                                            </Button>

                                        </Grid>

                                        <Label Grid.Row="1" Grid.Column="1" HorizontalAlignment="Left"  FontSize="13" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.RenewTime, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Border Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2"  Grid.RowSpan="12" BorderThickness="1" BorderBrush="White"  />

                                        <Label Grid.Row="2" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="LOT State"/>
                                        <Label Grid.Row="2" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.LotState, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="3" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Wafer Align" />
                                        <Label Grid.Row="3" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" 
                                               Foreground="{Binding SelectedStage.StageInfo.LotData.WaferAlignState, Converter={StaticResource AlignStateToForegroundConv}}" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.WaferAlignState, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="4" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Pad"/>
                                        <Label Grid.Row="4" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" 
                                               Foreground="{Binding SelectedStage.StageInfo.LotData.PadCount, Converter={StaticResource PadCountToForegroundConv}}" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.PadCount, Converter={StaticResource PadCountToTextConv}, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="5" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Pin Align"/>
                                        <Label Grid.Row="5" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" 
                                               Foreground="{Binding SelectedStage.StageInfo.LotData.PinAlignState, Converter={StaticResource AlignStateToForegroundConv}}" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.PinAlignState, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="6" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Mark Align"/>
                                        <Label Grid.Row="6" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" 
                                               Foreground="{Binding SelectedStage.StageInfo.LotData.MarkAlignState, Converter={StaticResource AlignStateToForegroundConv}}" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.MarkAlignState, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="7" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Probing State"/>
                                        <Label Grid.Row="7" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.ProbingState, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="8" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Overdrive"/>
                                        <Label Grid.Row="8" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.ProbingOD, StringFormat=:  \{0\}um}"/>
                                        </Label>

                                        <Label Grid.Row="9" Grid.Column="0" HorizontalAlignment="Left" FontSize="16" VerticalAlignment="Center" Foreground="White" Content="Clearance"/>
                                        <Label Grid.Row="9" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.Clearance, StringFormat=:  \{0\}um}"/>
                                        </Label>

                                        <Label Grid.Row="10" Grid.Column="0" HorizontalAlignment="Left" FontSize="14" VerticalAlignment="Center" Foreground="White" Content="Temperature &#xA;State" />
                                        <Label Grid.Row="10" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.TempState, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="11" Grid.Column="0" HorizontalAlignment="Left" FontSize="14" VerticalAlignment="Center" Foreground="White" Content="StageMove &#xA;State" />
                                        <Label Grid.Row="11" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" >
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.StageMoveState, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="12" Grid.Column="0" HorizontalAlignment="Left" FontSize="14" VerticalAlignment="Center" Foreground="White" Content="Lot Start Time"/>
                                        <Label Grid.Row="12" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" Visibility="{Binding SelectedStage.StageInfo.LotData.LotStartTimeEnable, Converter={StaticResource TimeVisibiltyConvert}}">
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.LotStartTime, StringFormat=:  \{0\}}"/>
                                        </Label>

                                        <Label Grid.Row="13" Grid.Column="0" HorizontalAlignment="Left" FontSize="14" VerticalAlignment="Center" Foreground="White" Content="Lot End Time"/>
                                        <Label Grid.Row="13" Grid.Column="1" HorizontalAlignment="Left"  FontSize="14" VerticalAlignment="Center" Foreground="White" Visibility="{Binding SelectedStage.StageInfo.LotData.LotEndTimeEnable, Converter={StaticResource TimeVisibiltyConvert}}">
                                            <TextBlock   Text="{Binding SelectedStage.StageInfo.LotData.LotEndTime, StringFormat=:  \{0\}}"/>
                                        </Label>

                                    </Grid>

                                    <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2">

                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="0.8*"/>
                                            <RowDefinition Height="1.5*"/>
                                        </Grid.RowDefinitions>
                                        <Border BorderBrush="White" BorderThickness="1" Grid.Column="0" Grid.Row="0"/>

                                        <!--<StackPanel Orientation="Horizontal" Grid.Column="0" Grid.Row="0" >-->
                                        <Grid Margin="4,0,8,0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="2.2*"/>
                                                <ColumnDefinition Width="2.2*"/>
                                                <ColumnDefinition Width="2.2*"/>
                                                <ColumnDefinition Width="1*"/>
                                            </Grid.ColumnDefinitions>
                                            <StackPanel Grid.Column="0" Orientation="Horizontal">
                                                <Label Content="Type:" FontSize="15" Foreground="White" HorizontalAlignment="Left"  Margin="0"/>
                                                <Label Content="{Binding SelectedStage.StageInfo.LotData.SoakingType}" FontSize="15" Foreground="LimeGreen" HorizontalAlignment="Left" FontWeight="Bold"  Margin="0" AutomationProperties.AutomationId="lblSoakingType"/>
                                            </StackPanel>
                                            <StackPanel Grid.Column="1" Orientation="Horizontal">
                                                <Label Content="RemainTime(sec):" FontSize="15" Foreground="White" HorizontalAlignment="Left"/>
                                                <Label Content="{Binding SelectedStage.StageInfo.LotData.SoakingRemainTime}" FontSize="15" Foreground="Red" HorizontalAlignment="Left" FontWeight="Bold" Margin="0" AutomationProperties.AutomationId="lblSoakingRemainTime"/>
                                            </StackPanel>
                                            <StackPanel Grid.Column="2" Orientation="Horizontal">
                                                <Label Content="Z Clearance:(um):" FontSize="15" Foreground="White" HorizontalAlignment="Left"/>
                                                <Label Content="{Binding SelectedStage.StageInfo.LotData.SoakingZClearance}" FontSize="15" Foreground="LimeGreen" HorizontalAlignment="Left" FontWeight="Bold" Margin="0" AutomationProperties.AutomationId="lblSoakingZClearance"/>
                                            </StackPanel>
                                            <Button AutomationProperties.AutomationId="btnStopSoak"
                                                    Grid.Column="3" Content="STOP SOAK" Command="{Binding SoakStopCommand}" Height="30" Width="80" Foreground="White" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0" IsEnabled="{Binding SelectedStage.StageInfo.LotData.StopSoakBtnEnable}"/>
                                        </Grid>
                                        <!--<Label Content="Type:" FontSize="17" Foreground="White" HorizontalAlignment="Left"/>
                                            <Label Content="{Binding SoakingType}"  FontSize="17" Foreground="LimeGreen" HorizontalAlignment="Left" FontWeight="Bold"/>
                                            <Label Content="Time(sec):" FontSize="17" Foreground="White" HorizontalAlignment="Left"/>
                                            <Label Content="{Binding SoakRemainTIme}" FontSize="17" Foreground="Red" HorizontalAlignment="Left" FontWeight="Bold"/>
                                            <Label Content="Clearance:(um):" FontSize="17" Foreground="White" HorizontalAlignment="Left"/>
                                            <Label Content="2000" FontSize="17" Foreground="LimeGreen" HorizontalAlignment="Left" FontWeight="Bold"/>
                                            <Button Grid.Column="0" Content="STOP SOAK" Command="{Binding SoakStopCommand}" Height="30" Width="80" Foreground="White" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>-->
                                        <!--</StackPanel>-->

                                        <StackPanel Grid.Column="0" Grid.Row="1" Orientation="Horizontal">
                                            <GroupBox   Header="Mode Setting" FontSize="12" Foreground="White" BorderBrush="White" BorderThickness="1" Style="{DynamicResource GroupBoxForegroundStyle}" Margin="0,0,3,0">
                                                <StackPanel Orientation="Horizontal">
                                                    <Button Content="ON-LINE" Background="Orange"  Width="150" Foreground="White" Command="{Binding StageConnectStatusChangeCommand}" CommandParameter="{x:Static pi:GPCellModeEnum.ONLINE}">
                                                    </Button>
                                                    <Button Content="OFF-LINE" Background="Orange"  Width="150"   Foreground="White"  Command="{Binding StageConnectStatusChangeCommand}" CommandParameter="{x:Static pi:GPCellModeEnum.OFFLINE}">
                                                    </Button>
                                                    <Button Content="MAINTENANCE" Background="Orange"  Width="150"  Foreground="White" Command="{Binding StageConnectStatusChangeCommand}" CommandParameter="{x:Static pi:GPCellModeEnum.MAINTENANCE}" >
                                                    </Button>
                                                </StackPanel>
                                            </GroupBox>
                                            <GroupBox  Header="LOT" FontSize="12" Foreground="White" Margin="8,0,0,0"
                                                       Style="{DynamicResource GroupBoxForegroundStyle}">
                                                <StackPanel Orientation="Vertical">
                                                    <Label Margin="0" Padding="0" Content="This button is enable when &#10; the lot is abort by the host."
                                                           Foreground="DimGray"/>
                                                    <Button AutomationProperties.AutomationId="btnReintro"
                                                            Content="RE-INTRO" Background="Orange" Width="150" Height="40" Foreground="White"
                                                            IsEnabled="{Binding SelectedStage.StageInfo.IsReceiveErrorEnd}"
                                                            Command="{Binding LotReIntroduceCommand}"/>
                                                </StackPanel>
                                            </GroupBox>
                                            <!--<GroupBox   Header="Stage Move Lock" FontSize="12" Foreground="White" BorderBrush="White" BorderThickness="1" Style="{DynamicResource GroupBoxForegroundStyle}" Margin="0,0,3,0">
                                                <StackPanel Orientation="Vertical">
                                                    <ToggleButton x:Name="CheckCloseToggle3"
                                                                  Margin="10 0 0 5"
                                                                  Grid.Column="0"
                                                                  Style="{StaticResource ON_OFF_ToggleBtn}"
                                                                  Height="37" Width="80"
                                                                  IsChecked="{Binding SelectedStage.StageInfo.LotData.StageMoveState, Converter={StaticResource ComparisonConve}, ConverterParameter='STAGELOCK'}"
                                                                  IsEnabled="{Binding SelectedStage.StageMode, Converter={StaticResource StageModeToEnabledLockConv}, FallbackValue=false }">
                                                        <i:Interaction.Triggers>
                                                            <i:EventTrigger EventName="Checked">
                                                                <i:InvokeCommandAction Command="{Binding Path=DataContext.StageMoveLockCommand, ElementName=window}"/>
                                                            </i:EventTrigger>
                                                            <i:EventTrigger EventName="Unchecked">
                                                                <i:InvokeCommandAction Command="{Binding Path=DataContext.StageMoveUnLockCommand, ElementName=window}"/>
                                                            </i:EventTrigger>
                                                        </i:Interaction.Triggers>
                                                    </ToggleButton>
                                                </StackPanel>
                                            </GroupBox>-->
                                            <!--<GroupBox  Header="Streaming" FontSize="12" Foreground="White" Style="{DynamicResource GroupBoxForegroundStyle}">
                                                <StackPanel Orientation="Horizontal">
                                                    -->
                                            <!--<Button Content="Enable" Background="Orange"  Width="100"   Foreground="White" ></Button>
                                                    <Button Content="Disable" Background="Orange"  Width="100"  Foreground="White" ></Button>-->
                                            <!--
                                                    <Button Content="ON" Background="Orange"  Width="100"   Foreground="White" Command="{Binding StageStreamingOnOffCommand}" CommandParameter="{x:Static pi:StreamingModeEnum.STREAMING_ON}"></Button>
                                                    <Button Content="OFF" Background="Orange"  Width="100"  Foreground="White" Command="{Binding StageStreamingOnOffCommand}" CommandParameter="{x:Static pi:StreamingModeEnum.STREAMING_OFF}"></Button>
                                                </StackPanel>
                                            </GroupBox>-->
                                        </StackPanel>

                                    </Grid>

                                </Grid>
                            </Border>

                        </Grid>
                    </MahAppsControls:MetroTabItem>

                    <MahAppsControls:MetroTabItem 
                            x:Name="LOTOPTION"
                            Header="LOT Option Setting"  BorderThickness="1" 
                            BorderBrush="Black"
                            MahAppsControls:ControlsHelper.HeaderFontSize="20"
                            MahAppsControls:ControlsHelper.HeaderMargin="8">
                        <Grid
                            Background="#333333"
                            Margin="8">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="3*"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <!--<Border Grid.Row="0" BorderThickness="2" BorderBrush="WhiteSmoke">-->

                            <GroupBox Grid.Column="0" Grid.ColumnSpan="3" Header="Stop Option" FontSize="18" Foreground="White" BorderBrush="White" BorderThickness="1" Style="{DynamicResource GroupBoxForegroundStyle}">
                            <ListView x:Name="CellListView2" ItemsSource="{Binding Stages}" 
                          Grid.Row="0" BorderThickness="2"
                          ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                          ScrollViewer.VerticalScrollBarVisibility="Disabled" 
                          HorizontalContentAlignment="Stretch" 
                          VerticalContentAlignment="Stretch" Grid.ColumnSpan="3" >

                                <ListView.ItemContainerStyle>

                                    <Style TargetType="{x:Type ListViewItem}">

                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="Padding" Value="4,1"/>
                                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="BorderBrush" Value="Transparent"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>-->
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                    </Border>
                                                    <ControlTemplate.Triggers>

                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                                        </MultiTrigger>

                                                        <MultiTrigger>

                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                                <Condition Property="IsSelected" Value="True"/>
                                                            </MultiTrigger.Conditions>

                                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                                        </MultiTrigger>

                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                                <Condition Property="IsSelected" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                                        </MultiTrigger>

                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                        </Trigger>

                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ListView.ItemContainerStyle>

                                <ListView.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <UniformGrid Columns="{Binding CellColumn}" Rows="{Binding CellRow}" Background="Black"/>
                                    </ItemsPanelTemplate>
                                </ListView.ItemsPanel>

                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <Border BorderBrush="White">
                                            <Border.BorderThickness>
                                                <Thickness Top="1" Bottom="1" Left="1" Right="1"/>
                                            </Border.BorderThickness>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <Grid Grid.Row="0">

                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Border Grid.Column="0" Grid.Row="1" BorderBrush="WhiteSmoke" BorderThickness="1"/>
                                                    <Border Grid.Column="0" BorderThickness="3" Margin="2"
                                                                BorderBrush="{Binding StageInfo.IsExcuteProgram, Converter={StaticResource CellObjectForeGroundConv}, Mode=OneWay}" />

                                                    <Label Grid.Column="0"  Content="{Binding Index}" Padding="0,0,0,0"
                                                               Foreground="WhiteSmoke" FontSize="13"  
                                                               FontWeight="Bold"
                                                               VerticalContentAlignment="Center"
                                                               HorizontalContentAlignment="Center"/>


                                                </Grid>
                                                <Grid Grid.Row="1" IsEnabled="{Binding StageInfo.IsConnected}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="1*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Border Grid.Column="0" BorderBrush="WhiteSmoke" BorderThickness="0.5">
                                                        <StackPanel>
                                                            <Label
                                                                Grid.Column="0"
                                                                Content="Before Contact"
                                                                FontSize="11"
                                                                Foreground="Orange" 
                                                                FontWeight="Bold"
                                                                Margin="0"
                                                                HorizontalAlignment="Left"
                                                            />
                                                            <ToggleButton x:Name="StopBeforeToggle"
                                                                Margin="10 0 0 10"
                                                                Grid.Column="0"
                                                                Style="{StaticResource ON_OFF_ToggleBtn}"
                                                                IsChecked="{Binding StopBeforeProbing}"
                                                                Height="35" Width="80"
                                                                IsEnabled="{Binding OnceStopBeforeProbing, Converter={StaticResource InverseBoolToVisConv}}">
                                                                <i:Interaction.Triggers>
                                                                    <i:EventTrigger EventName="Checked">
                                                                        <i:InvokeCommandAction Command="{Binding DataContext.StopBeforeProbingCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                                    </i:EventTrigger>
                                                                    <i:EventTrigger EventName="Unchecked">
                                                                        <i:InvokeCommandAction Command="{Binding DataContext.StopBeforeProbingCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                                    </i:EventTrigger>
                                                                </i:Interaction.Triggers>
                                                            </ToggleButton>
                                                            <Label
                                                                Grid.Column="0"
                                                                Content="One time"
                                                                FontSize="11"
                                                                Foreground="Orange" 
                                                                FontWeight="Bold"
                                                                Margin="0"
                                                                HorizontalAlignment="Left"
                                                            />
                                                            <ToggleButton x:Name="OnceStopBeforeToggle"
                                                                Margin="10 0 0 20"
                                                                Grid.Column="0"
                                                                Style="{StaticResource ON_OFF_ToggleBtn}"
                                                                IsChecked="{Binding OnceStopBeforeProbing}"
                                                                Height="35" Width="80"
                                                                IsEnabled="{Binding StopBeforeProbing, Converter={StaticResource InverseBoolToVisConv}}">
                                                                <i:Interaction.Triggers>
                                                                    <i:EventTrigger EventName="Checked">
                                                                        <i:InvokeCommandAction Command="{Binding DataContext.OnceStopBeforeProbingCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                                    </i:EventTrigger>
                                                                    <i:EventTrigger EventName="Unchecked">
                                                                        <i:InvokeCommandAction Command="{Binding DataContext.OnceStopBeforeProbingCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                                    </i:EventTrigger>
                                                                </i:Interaction.Triggers>
                                                            </ToggleButton>
                                                        </StackPanel>
                                                    </Border>
                                                </Grid>
                                                <Grid Grid.Row="2" IsEnabled="{Binding StageInfo.IsConnected}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="1*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Border Grid.Column="0" BorderBrush="WhiteSmoke" BorderThickness="0.5">
                                                        <StackPanel>
                                                            <Label
                                                                Grid.Column="0"
                                                                Content="After Probing"
                                                                FontSize="11"
                                                                Foreground="Orange" 
                                                                FontWeight="Bold"
                                                                Margin="0"
                                                                HorizontalAlignment="Left"
                                                            />
                                                            <ToggleButton x:Name="StopAfterToggle"
                                                                Margin="10 0 0 10"
                                                                Grid.Column="0"
                                                                Style="{StaticResource ON_OFF_ToggleBtn}"
                                                                IsChecked="{Binding StopAfterProbing}"
                                                                Height="35" Width="80"
                                                                IsEnabled="{Binding OnceStopAfterProbing, Converter={StaticResource InverseBoolToVisConv}}">
                                                                <i:Interaction.Triggers>
                                                                    <i:EventTrigger EventName="Checked">
                                                                        <i:InvokeCommandAction Command="{Binding DataContext.StopAfterProbingCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                                    </i:EventTrigger>
                                                                    <i:EventTrigger EventName="Unchecked">
                                                                        <i:InvokeCommandAction Command="{Binding DataContext.StopAfterProbingCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                                    </i:EventTrigger>
                                                                </i:Interaction.Triggers>
                                                            </ToggleButton>
                                                            <Label
                                                                Grid.Column="0"
                                                                Content="One time"
                                                                FontSize="11"
                                                                Foreground="Orange" 
                                                                FontWeight="Bold"
                                                                Margin="0"
                                                                HorizontalAlignment="Left"
                                                            />
                                                            <ToggleButton x:Name="OnceStopAfterTogle"
                                                                Margin="10 0 0 20"
                                                                Grid.Column="0"
                                                                Style="{StaticResource ON_OFF_ToggleBtn}"
                                                                IsChecked="{Binding OnceStopAfterProbing}"
                                                                Height="35" Width="80"
                                                                IsEnabled="{Binding StopAfterProbing, Converter={StaticResource InverseBoolToVisConv}}">
                                                                <i:Interaction.Triggers>
                                                                    <i:EventTrigger EventName="Checked">
                                                                        <i:InvokeCommandAction Command="{Binding DataContext.OnceStopAfterProbingCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                                    </i:EventTrigger>
                                                                    <i:EventTrigger EventName="Unchecked">
                                                                        <i:InvokeCommandAction Command="{Binding DataContext.OnceStopAfterProbingCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                                    </i:EventTrigger>
                                                                </i:Interaction.Triggers>
                                                            </ToggleButton>
                                                        </StackPanel>
                                                    </Border>
                                                </Grid>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                            </GroupBox>
                            
                            <Grid Grid.Row="1" Grid.Column="0" VerticalAlignment="Top">
                                <StackPanel Orientation="Vertical" Grid.ColumnSpan="2">
                                    <StackPanel Orientation="Horizontal" Margin="0 10 10 10">
                                        <Label Content="OCR Mode: " Margin="4,2,0,2" Padding="0" FontSize="15" FontWeight="Bold"
                                              VerticalContentAlignment="Center" HorizontalContentAlignment="Left" Foreground="OrangeRed"/>
                                        <Label Content="{Binding LoaderModule.OCRConfig.Mode}" Margin="0" Padding="1" FontSize="15" FontWeight="Bold"
                                              VerticalContentAlignment="Center"  HorizontalContentAlignment="Left" Foreground="OrangeRed"/>
                                    </StackPanel>

                                    <GroupBox   Header="OCR Mode" FontSize="12" Foreground="White" Width="200" HorizontalAlignment="Left" BorderBrush="White" BorderThickness="1" Style="{DynamicResource GroupBoxForegroundStyle}" Margin="1 0 0 0" Height="185">
                                        <StackPanel Orientation="Vertical">
                                            <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                                                <RadioButton  GroupName="OCRMode" IsChecked="True" Padding="0" FontSize="15" Margin="5" Command="{Binding NormalOCRModeCommand}"  Foreground="White" VerticalContentAlignment="Center" Content="NORMAL"/>
                                                <RadioButton  GroupName="OCRMode" Padding="0" FontSize="15"  Margin="5" Command="{Binding DebugOCRModeCommand}"  Foreground="White" VerticalContentAlignment="Center" Content="DEBUG"/>
                                                <RadioButton  GroupName="OCRMode" Padding="0" FontSize="15"  Margin="5" Command="{Binding NG_GO_OCRModeCommand}"  Foreground="White" VerticalContentAlignment="Center" Content="NG__GO"/>
                                                <RadioButton  GroupName="OCRMode" Padding="0" FontSize="15"  Margin="5" Command="{Binding ManualInput_OCRModeCommand}"  Foreground="White" VerticalContentAlignment="Center" Content="MANUAL__INPUT"/>
                                            </StackPanel>
                                            <Button IsEnabled="True" Command="{Binding OCRModeSelectCommand}" 
                                                Width="150"
                                                HorizontalContentAlignment="Center"
                                                HorizontalAlignment="Center" 
                                                FontSize="24" FontWeight="Bold">

                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                    </Grid.RowDefinitions>
                                                    <TextBlock  Grid.Row="0" TextAlignment="Center" FontWeight="Bold" Text="Select"/>

                                                </Grid>
                                            </Button>
                                        </StackPanel>
                                    </GroupBox>
                                    <!--<CheckBox Content="Forced LotEnd" Background="White" Foreground="White" FontSize="17" IsChecked="{Binding LoaderMaster.ForcedLotEndFlag,Mode=TwoWay}"></CheckBox>-->
                                    <!--<Button Content="Collect All Wafer" Background="Blue"  Width="150" HorizontalAlignment="Left"  Foreground="White" Command="{Binding CollectWaferCommand}"  ></Button>-->
                                </StackPanel>
                            </Grid>
                            <Grid Grid.Row="1" Grid.Column="1" VerticalAlignment="top">
                                <StackPanel Orientation="Vertical" Grid.ColumnSpan="2">
                                    <StackPanel Orientation="Horizontal" Margin="0,10,10,10">
                                        <Label Content="Dynamic Carrier: " Margin="4,2,0,2" Padding="0" FontSize="15" FontWeight="Bold"
                                              VerticalContentAlignment="Center" HorizontalContentAlignment="Left" Foreground="OrangeRed"/>
                                        <Label Content="{Binding LoaderMaster.DynamicMode, Converter={StaticResource DynamicCarrierToEnableStringConv}}" Margin="0" Padding="1" FontSize="15" FontWeight="Bold"
                                              VerticalContentAlignment="Center"  HorizontalContentAlignment="Left" Foreground="OrangeRed"/>
                                    </StackPanel>

                                    <GroupBox   Header="Dynamic Carrier" FontSize="12" Foreground="White" Width="200" HorizontalAlignment="Left" BorderBrush="White" BorderThickness="1" Style="{DynamicResource GroupBoxForegroundStyle}" Margin="0,0,3,0">
                                        <StackPanel Orientation="Vertical">
                                            <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                                                <RadioButton  GroupName="DynamicMode" IsChecked="True" Padding="0" FontSize="15" Margin="5" Command="{Binding NormalDyanmicModeCommand}"  Foreground="White" VerticalContentAlignment="Center">DISABLE</RadioButton>
                                                <RadioButton  GroupName="DynamicMode" Padding="0" FontSize="15"  Margin="5" Command="{Binding DyanmicModeCommand}"  Foreground="White" VerticalContentAlignment="Center">ENABLE</RadioButton>
                                            </StackPanel>
                                            <Button IsEnabled="True" Command="{Binding DynamicModeSelectCommand}" 
                                                Width="150"
                                                HorizontalContentAlignment="Center"
                                                HorizontalAlignment="Center" 
                                                FontSize="24" FontWeight="Bold">

                                                <Button.Content>
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition/>
                                                        </Grid.RowDefinitions>
                                                        <TextBlock  Grid.Row="0" TextAlignment="Center" FontWeight="Bold" Text="Apply"/>

                                                    </Grid>
                                                </Button.Content>
                                            </Button>
                                        </StackPanel>
                                    </GroupBox>
                                    <!--<CheckBox Content="Forced LotEnd" Background="White" Foreground="White" FontSize="17" IsChecked="{Binding LoaderMaster.ForcedLotEndFlag,Mode=TwoWay}"></CheckBox>-->
                                    <!--<Button Content="Collect All Wafer" Background="Blue"  Width="150" HorizontalAlignment="Left"  Foreground="White" Command="{Binding CollectWaferCommand}"  ></Button>-->
                                </StackPanel>
                            </Grid>
                            <CheckBox Grid.Column="3" Grid.Row="1" VerticalAlignment="Top" Content="Continue Lot" Background="White" Foreground="White" FontSize="17" Command="{Binding ContinueLotEnableCommand}" IsChecked="{Binding LoaderMaster.ContinueLotFlag, Mode=TwoWay}" VerticalContentAlignment="Center" Height="25" Margin="10"/>
                        </Grid>
                    </MahAppsControls:MetroTabItem>

                    <MahAppsControls:MetroTabItem 
                            x:Name="VISION"
                            Header="VISION"  BorderThickness="1" 
                            BorderBrush="Black"
                            MahAppsControls:ControlsHelper.HeaderFontSize="20"
                            MahAppsControls:ControlsHelper.HeaderMargin="8">

                        <Grid Grid.Row="0" Grid.Column="1" Margin="4,0,0,0">
                            <Border Margin="8,8,4,8" 
                        BorderBrush="WhiteSmoke" BorderThickness="1" >
                                <Grid>
                                    <GroupBox Header="Streaming" FontSize="12" Foreground="White" Style="{DynamicResource GroupBoxForegroundStyle}"
                                            VerticalAlignment="Top" HorizontalAlignment="Right">
                                        <StackPanel Orientation="Horizontal">
                                            <!--<Button Content="Enable" Background="Orange"  Width="100"   Foreground="White" ></Button>
                                                    <Button Content="Disable" Background="Orange"  Width="100"  Foreground="White" ></Button>-->
                                            <Button Content="ON" Background="Orange"  Width="100"   Foreground="White" Command="{Binding StageStreamingOnOffCommand}" CommandParameter="{x:Static pi:StreamingModeEnum.STREAMING_ON}"/>
                                            <Button Content="OFF" Background="Orange"  Width="100"  Foreground="White" Command="{Binding StageStreamingOnOffCommand}" CommandParameter="{x:Static pi:StreamingModeEnum.STREAMING_OFF}"/>
                                        </StackPanel>
                                    </GroupBox>
                                    <Label Content="{Binding SelectedStage.StreamingMode}" VerticalAlignment="Top" HorizontalAlignment="Left" 
                                           FontSize="24" Foreground="Yellow" FontWeight="DemiBold"/>

                                    <Border BorderBrush="DimGray" BorderThickness="2" 
                                            HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <ContentControl Width="640" Height="640" 
                                        Margin="4" 
                                        VerticalAlignment="Center" HorizontalAlignment="Center"
                                        Content="{Binding DisplayPort}"/>
                                    </Border>
                                    <!--<ContentControl Width="570" Height="570" 
                                        Margin="0,8,8,8" 
                                        VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                        Content="{Binding DisplayPort, 
                                            Converter={StaticResource ViewTargetConverter}}" 
                                        />-->

                                    <Grid   Width="100" Height="150" 
                                Margin="8,20"
                                VerticalAlignment="Bottom" HorizontalAlignment="Right" 
                                Opacity="1" 
                                />

                                    <!--<Button Width="120" Height="40" Style="{DynamicResource ControlButtonStyle}" 
                                VerticalAlignment="Bottom" HorizontalAlignment="Left" 
                                Foreground="WhiteSmoke" Content="{Binding SelectedStage.StreamingMode}"
                                IsEnabled="{Binding SelectedStage.StreamingMode}"
                                Background="{Binding SelectedStage.StreamingMode, Converter={StaticResource ViewTargetConverter}}"
                                Command="{Binding StreamingCommand}"/>-->
                                </Grid>
                            </Border>

                            <Grid   Width="200" Height="200" 
                        Margin="8,20"
                        VerticalAlignment="Top" HorizontalAlignment="Right" 
                        Opacity="1" 
                        >
                                <ContentControl Visibility="{Binding LotOPModule.MiniVisible}"
                                    Opacity="0.7"
                                    Content="{Binding LotOPModule.MiniViewTarget, Converter={StaticResource ViewTargetConverter}}" 
                                    />

                            </Grid>
                        </Grid>
                    </MahAppsControls:MetroTabItem>

                    <MahAppsControls:MetroTabItem
                            x:Name="MONITORING"
                            Header="Monitoing"  BorderThickness="1" 
                            BorderBrush="Black"
                            MahAppsControls:ControlsHelper.HeaderFontSize="20"
                            MahAppsControls:ControlsHelper.HeaderMargin="8">
                        <Grid
                        Background="#333333"
                        Margin="8"
                        >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1.5*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="3*"/>
                            </Grid.RowDefinitions>

                            <!--<Border Grid.Row="0" BorderThickness="2" BorderBrush="WhiteSmoke">-->

                            <ListView x:Name="CellListView4" ItemsSource="{Binding Stages}" 
                          Grid.Row="0" BorderThickness="2"
                          ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                          ScrollViewer.VerticalScrollBarVisibility="Auto" 
                          HorizontalContentAlignment="Stretch" 
                          VerticalContentAlignment="Stretch" Grid.ColumnSpan="3" >

                                <ListView.ItemContainerStyle>

                                    <Style TargetType="{x:Type ListViewItem}">

                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="Padding" Value="4,1"/>
                                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="BorderBrush" Value="Transparent"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>-->
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                    </Border>
                                                    <ControlTemplate.Triggers>

                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                                        </MultiTrigger>

                                                        <MultiTrigger>

                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                                <Condition Property="IsSelected" Value="True"/>
                                                            </MultiTrigger.Conditions>

                                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                                        </MultiTrigger>

                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                                <Condition Property="IsSelected" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                                        </MultiTrigger>

                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                        </Trigger>

                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ListView.ItemContainerStyle>

                                <ListView.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <UniformGrid Columns="{Binding CellColumn}" Rows="{Binding CellRow}" Background="Black"/>
                                    </ItemsPanelTemplate>
                                </ListView.ItemsPanel>

                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <Border BorderBrush="White">
                                            <Border.BorderThickness>
                                                <Thickness Top="1" Bottom="1" Left="1" Right="1."/>
                                            </Border.BorderThickness>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <Grid Grid.Row="0">

                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Border Grid.Column="0" Grid.Row="1" BorderBrush="WhiteSmoke" BorderThickness="1"/>
                                                    <Border Grid.Column="0" BorderThickness="3" Margin="2"
                                                                BorderBrush="{Binding StageInfo.IsExcuteProgram, Converter={StaticResource CellObjectForeGroundConv}, Mode=OneWay}" />

                                                    <Label Grid.Column="0"  Content="{Binding Index}" Padding="0,0,0,0"
                                                               Foreground="WhiteSmoke" FontSize="13"  
                                                               FontWeight="Bold"
                                                               VerticalContentAlignment="Center"
                                                               HorizontalContentAlignment="Center"/>


                                                </Grid>

                                                <ListView x:Name="BehaviorListView" ItemsSource="{Binding MonitoringBehaviorList}" 
                                                          Grid.Row="1"
                                                          ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                                                          ScrollViewer.VerticalScrollBarVisibility="Disabled" 
                                                          HorizontalContentAlignment="Stretch" 
                                                          VerticalContentAlignment="Stretch"
                                                          Visibility="{Binding StageInfo.IsConnected, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <ListView.ItemTemplate>
                                                        <DataTemplate>
                                                            <Border x:Name="bor" Grid.Column="0" BorderBrush="WhiteSmoke" BorderThickness="0.5" Margin="0 -7 0 -7" IsEnabled="{Binding IsError}">
                                                                <Label Grid.Column="0"
                                                                        Content="{Binding Name}"
                                                                        FontSize="14"
                                                                        Foreground="White"
                                                                        Width="Auto"
                                                                        Padding="0"
                                                                        FontWeight="Bold"
                                                                        HorizontalAlignment="Center"/>
                                                                <Border.Style>
                                                                    <Style TargetType="Border">
                                                                        <Setter Property="Background" Value="Green" />
                                                                        <Style.Triggers>
                                                                            <DataTrigger Binding="{Binding IsError}" Value="True">
                                                                                <DataTrigger.EnterActions>
                                                                                    <BeginStoryboard>
                                                                                        <Storyboard>
                                                                                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                                                                To="Red" From="Black" Duration="0:0:0.5" AutoReverse="True"
                                                                                                RepeatBehavior="Forever" />
                                                                                        </Storyboard>
                                                                                    </BeginStoryboard>
                                                                                </DataTrigger.EnterActions>
                                                                                <DataTrigger.ExitActions>
                                                                                    <BeginStoryboard>
                                                                                        <Storyboard>
                                                                                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                                                                To="Green" From="Red" Duration="0:0:0.5" />
                                                                                        </Storyboard>
                                                                                    </BeginStoryboard>
                                                                                </DataTrigger.ExitActions>
                                                                            </DataTrigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </Border.Style>
                                                                <i:Interaction.Triggers>
                                                                    <i:EventTrigger EventName="PreviewMouseDown">
                                                                        <i:InvokeCommandAction Command="{Binding DataContext.MonitoringCheckCommand, ElementName=window}" >
                                                                            <i:InvokeCommandAction.CommandParameter>
                                                                                <MultiBinding Converter="{StaticResource MonitoringCheckIndexConverter}">
                                                                                    <Binding RelativeSource="{RelativeSource AncestorType={x:Type ListViewItem}, Mode=FindAncestor}" Converter="{StaticResource IndexConverter}"/>
                                                                                    <Binding RelativeSource="{RelativeSource AncestorType={x:Type ListViewItem}, Mode=FindAncestor, AncestorLevel=2}" Converter="{StaticResource IndexConverter}"/>
                                                                                </MultiBinding>
                                                                            </i:InvokeCommandAction.CommandParameter>
                                                                        </i:InvokeCommandAction>
                                                                    </i:EventTrigger>
                                                                </i:Interaction.Triggers>
                                                            </Border>
                                                        </DataTemplate>
                                                    </ListView.ItemTemplate>
                                                </ListView>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                        </Grid>
                    </MahAppsControls:MetroTabItem>
                </MahAppsControls:MetroAnimatedSingleRowTabControl>
            </Border>

        </Grid>


        <!-- CELLS -->
        <Grid Grid.Column="1" MinWidth="200" >

            <Grid.RowDefinitions>
                <RowDefinition Height="8*"/>
                <RowDefinition Height="2*"/>
            </Grid.RowDefinitions>

            <!--<Border Grid.Row="0" BorderThickness="2" BorderBrush="WhiteSmoke">-->

            <!--<ListView x:Name="CellListView" ItemsSource="{Binding Stages}" 
                          Grid.Row="0" BorderThickness="2" 
                          SelectionMode="{Binding CellListSelectionMode}"
                          ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                          ScrollViewer.VerticalScrollBarVisibility="Disabled" 
                          HorizontalContentAlignment="Stretch" 
                          VerticalContentAlignment="Stretch" >
                -->
            <!--PreviewMouseDown="CellListView_PreviewMouseDown">-->

            <!--<ListView.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Red" />
                    <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Red" />
                </ListView.Resources>-->

            <!--<ListView.Style>
                        <Style TargetType="{x:Type ListView}">
                            <Setter Property="BorderBrush" Value="White"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Margin" Value="0"/>
                            -->
            <!-- here we go -->
            <!--
                            <Style.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Red"/>
                                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Red"/>
                            </Style.Resources>
                        </Style>
                    </ListView.Style>-->
            <!--

                <i:Interaction.Triggers>

                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding SelectedItemChangedCommand}"  
                                                   CommandParameter="{Binding ElementName=CellListView, Path=SelectedItems}"/>
                    </i:EventTrigger>

                    -->
            <!--<i:EventTrigger EventName="PreviewMouseDown">
                        <i:InvokeCommandAction Command="{Binding CellListViewPreviewMouseDown}"  
                                                   CommandParameter="{Binding ElementName=CellListView, Path=SelectedItems}"/>
                    </i:EventTrigger>-->

            <!--<i:EventTrigger EventName="MouseDown">
                        <i:InvokeCommandAction Command="{Binding CellListViewPreviewMouseDown}"  
                                                   CommandParameter="{Binding ElementName=CellListView, Path=SelectedItems}"/>
                    </i:EventTrigger>-->
            <!--

                </i:Interaction.Triggers>


                <ListView.ItemContainerStyle>



                    <Style TargetType="{x:Type ListViewItem}">

                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                        <Setter Property="Padding" Value="4,1"/>
                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        -->
            <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>-->
            <!--
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>

                                        <MultiTrigger>

                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>

                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>

                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="IsSelected" Value="{Binding StageInfo.IsChecked}" />
                        <Setter Property="IsEnabled" Value="{Binding IsEnableTransfer, Mode=TwoWay}"/>

                        -->
            <!--<Style.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                    <Condition Property="Selector.IsSelectionActive" Value="true" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="Green" />
                                -->
            <!--<Setter Property="Template" Value="{StaticResource SelectedTemplate}" />-->
            <!--
                            </MultiTrigger>
                        </Style.Triggers>-->
            <!--

                    </Style>
                </ListView.ItemContainerStyle>

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <UniformGrid Columns="{Binding CellColumn}" Rows="{Binding CellRow}" Background="Black"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Border>

                            <Border.BorderBrush>
                                <MultiBinding Converter="{StaticResource CellSelectedToBrushConv}">
                                    <Binding Path="SelectedItems" ElementName="CellListView" />
                                    <Binding Path="." />
                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}" Path="DataContext.ChangedSelectedItemsCount" />
                                </MultiBinding>
                            </Border.BorderBrush>

                            <Border.BorderThickness>
                                <MultiBinding Converter="{StaticResource CellSelectedToBorderThicknessConv}">
                                    <Binding Path="SelectedItems" ElementName="CellListView" />
                                    <Binding Path="." />
                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}" Path="DataContext.ChangedSelectedItemsCount" />
                                </MultiBinding>
                            </Border.BorderThickness>


                            <Grid>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <Grid Grid.Row="0">

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="4*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>


                                    <Border Grid.Column="0" BorderThickness="1" BorderBrush="White">
                                        <Grid>
                                            <Border Grid.Column="0" BorderThickness="3" Margin="2"
                                                BorderBrush="{Binding StageInfo.IsExcuteProgram, Mode=OneWay, Converter={StaticResource CellObjectForeGroundConv}}" ></Border>

                                            <Label Grid.Column="0" Content="{Binding Index}" Padding="0,0,0,0"
                                                   Foreground="WhiteSmoke" FontSize="16"  
                                                   FontWeight="Bold"
                                               VerticalContentAlignment="Center"
                                               HorizontalContentAlignment="Center" >
                                                <i:Interaction.Triggers>
                                                    <i:EventTrigger EventName="MouseLeftButtonDown">
                                                        <i:InvokeCommandAction Command="{Binding Path=DataContext.ConnectCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                    </i:EventTrigger>
                                                </i:Interaction.Triggers>
                                            </Label>
                                        </Grid>
                                    </Border>


                                    <Grid Grid.Column="1" Margin="0">
                                        <Border Grid.Column="1"  BorderBrush="White" BorderThickness="1"></Border>
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                                            <Label Content="PV" Margin="4,2,0,2" Padding="0" FontSize="10" FontWeight="Bold"
                                              VerticalContentAlignment="Center" HorizontalContentAlignment="Left" Foreground="MediumPurple"/>
                                            <Label Content="{Binding StageInfo.PV}" ContentStringFormat="{}{0:0.0}" Margin="4" Padding="0" FontSize="10" FontWeight="Bold"
                                              VerticalContentAlignment="Center"  HorizontalContentAlignment="Left" Foreground="LightGray"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Bottom">
                                            <Label Content="DP" Margin="0,2,4,2" Padding="0" FontSize="10" FontWeight="Bold"
                                              VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="MediumPurple"/>
                                            <Label Content="{Binding StageInfo.DewPoint}" ContentStringFormat="{}{0:0.0}" Margin="4" Padding="0" FontSize="10" FontWeight="Bold"
                                              VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="LightGray" />
                                        </StackPanel>

                                        <Label Grid.Column="1" Margin="2"
                                           Content="{Binding StageMode}" Padding="5"
                                           HorizontalContentAlignment="Center"
                                           VerticalContentAlignment="Center"
                                           FontSize="14" 
                                           Foreground="WhiteSmoke" 
                                           FontWeight="Bold"/>

                                    </Grid>

                                    <Border Grid.Column="2"  BorderBrush="White" BorderThickness="1">
                                        <MahAppsControls:Badged 
                                        Badge="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}, Mode=FindAncestor}, Path=DataContext.StageInfo.AlarmMessageNotNotifiedCount}" 
                                        HorizontalAlignment="Center" 
                                        VerticalAlignment="Center"
                                        BadgeBackground="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}, Mode=FindAncestor}, Path=DataContext.StageInfo.AlarmMessageNotNotifiedCount, Converter={StaticResource EventBadgeBackGroundBrushConv}}" 
                                        BadgeForeground="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}, Mode=FindAncestor}, Path=DataContext.StageInfo.AlarmMessageNotNotifiedCount,Converter={StaticResource EventBadgeForeGroundBrushConv}}" 
                                        BadgePlacementMode="TopRight"
                                        Margin="0,0,0,0"
                                        Padding="0,0,0,0">

                                            <Button Command="{Binding Path=DataContext.UsedBellDrawerOpenCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                                CommandParameter="{Binding .}"
                                                Template="{StaticResource ExampleButton}"  Width="28"  Margin="0,0,0,-4"
                                                IsEnabled="{Binding StageInfo.IsConnected}" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                                >
                                            </Button>

                                        </MahAppsControls:Badged>
                                    </Border>


                                    -->
            <!--<Button Grid.Column="2" Command="{Binding Path=DataContext.ConnectCommand, ElementName=window}" CommandParameter="{Binding Index}" Height="30" Width="40">

                                        <materialDesign:PackIcon Kind="LanConnect" MinWidth="40"   
                                                                     HorizontalAlignment="Stretch" 
                                                                     VerticalAlignment="Stretch"
                                                                     Foreground="{Binding StageInfo.IsConnected, Mode=OneWay, Converter={StaticResource CellObjectForeGroundConv}}"/>
                                    </Button>-->

            <!--<Button Grid.Column="2" HorizontalAlignment="Center" HorizontalContentAlignment="Center" Margin="18,0,0,0"
                                                Height="35" 
                                                Width="35" 
                                                Command="{Binding Path=DataContext.ConnectCommand, ElementName=window}" CommandParameter="{Binding Index}" >

                                        <Button.Content>
                                            <Label Content="{Binding Index}"
                                                   Foreground="{Binding StageInfo.IsConnected, Mode=OneWay, Converter={StaticResource CellObjectForeGroundConv}}"
                                                   HorizontalAlignment="Center"
                                                   VerticalAlignment="Center"
                                                   Margin="-18,0,0,0"
                                                   FontSize="16"
                                                   FontWeight="Bold"/>
                                        </Button.Content>
                                        -->
            <!--<materialDesign:PackIcon Kind="LanConnect"  
                                                                     HorizontalAlignment="Stretch" 
                                                                     VerticalAlignment="Stretch"
                                                                     Foreground="{Binding StageInfo.IsConnected, Mode=OneWay, Converter={StaticResource CellObjectForeGroundConv}}"/>-->
            <!--
                                    </Button>-->
            <!--

                                </Grid>

                                <Grid Grid.Row="1" Margin="0,0,0,0">

                                    <Grid >
                                        <Rectangle Fill="{Binding StageState, Converter={StaticResource StageStateToValueConverter}}" Height="34" Width="Auto"/>
                                        <Rectangle  Fill="Orange" Opacity="0" Height="34" Width="Auto" >
                                            <Rectangle.Style>
                                                <Style>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding StageInfo.IsReservePause}" Value="True">
                                                            <DataTrigger.EnterActions>
                                                                <BeginStoryboard >
                                                                    <Storyboard RepeatBehavior="Forever" AutoReverse="True">
                                                                        <DoubleAnimation From="0" To="1" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </DataTrigger.EnterActions>
                                                            <DataTrigger.ExitActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard FillBehavior="Stop">
                                                                        <DoubleAnimation To="0" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </DataTrigger.ExitActions>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Rectangle.Style>
                                        </Rectangle>

                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <TextBlock Text="{Binding StageState, Converter={StaticResource StageStateToValueTextConverter}}" FontSize="15" 
                                                       HorizontalAlignment="Center"
                                                       VerticalAlignment="Center"/>
                                            <TextBlock Text="{Binding ProbingTimeStr}" FontSize="15" 
                                                       HorizontalAlignment="Center"
                                                       VerticalAlignment="Center"/>
                                        </StackPanel>
                                        -->
            <!--#region[Error]-->
            <!--Visibility="{Binding StageState, Converter={StaticResource StageErrorStateToVisibilityConvertet}}">-->
            <!--
                                        <Viewbox Height="30" HorizontalAlignment="Right" Margin="0,0,20,0"
                                           Visibility="{Binding StageState, Converter={StaticResource StageErrorStateToVisibilityConvertet}}">
                                            <materialDesign:PackIcon Foreground="WhiteSmoke"
                                                             HorizontalAlignment="Right">
                                                <materialDesign:PackIcon.Style>
                                                    <Style  TargetType="materialDesign:PackIcon"
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                        <Setter Property="Kind" Value="Warning" />
                                                    </Style>
                                                </materialDesign:PackIcon.Style>

                                            </materialDesign:PackIcon>

                                        </Viewbox>

                                        <Button Opacity="0" Background="Transparent" Height="30" HorizontalAlignment="Right" Margin="0,0,20,0" Width="100"
                                                Visibility="{Binding StageState, Converter={StaticResource StageErrorStateToVisibilityConvertet}}"
                                                Command="{Binding Path=DataContext.StageGetErrorInfoCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                                CommandParameter="{Binding Index}"/>


                                        -->
            <!--#endregion-->

            <!--#region[Reserve Pause]-->
            <!--Visibility="{Binding StageInfo.IsReservePause, Converter={StaticResource TimeVisibiltyConvert}}">-->
            <!--
                                        <Viewbox Height="30" HorizontalAlignment="Left" Margin="10,0,0,0"
                                                 Visibility="{Binding StageInfo.IsReservePause, Converter={StaticResource TimeVisibiltyConvert}}">
                                            <materialDesign:PackIcon Foreground="WhiteSmoke"
                                                             HorizontalAlignment="Right">
                                                <materialDesign:PackIcon.Style>
                                                    <Style  TargetType="materialDesign:PackIcon"
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                        <Setter Property="Kind" Value="PauseCircleOutline" />
                                                    </Style>
                                                </materialDesign:PackIcon.Style>

                                            </materialDesign:PackIcon>

                                        </Viewbox>

                                        <Button Opacity="0" Background="Transparent" Height="30" Margin="10,0,0,0" HorizontalAlignment="Left"
                                                Width="100" Visibility="{Binding StageInfo.IsReservePause, Converter={StaticResource TimeVisibiltyConvert}}"
                                                Command="{Binding Path=DataContext.ReservePauseIconClickCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                                CommandParameter="{Binding Index}"/>


                                        -->
            <!--#endregion-->
            <!--

                                    </Grid>
                                </Grid>

                                <Grid Grid.Row="2" Margin="0,-5,0,0">

                                    <Label Content="{Binding StageInfo.LastTitle}" 
                                                   MinHeight="32"
                                                   FontSize="15" 
                                                   Foreground="WhiteSmoke" 
                                                   FontWeight="Bold" 
                                                   BorderBrush="White" 
                                                   BorderThickness="1.5" 
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center"/>

                                </Grid>

                                <Grid Grid.Row="3" Margin="0,-8,0,0" >

                                    <Label MinHeight="32"
                                                   FontSize="15" 
                                                   Foreground="WhiteSmoke" 
                                                   FontWeight="Bold" 
                                                   BorderBrush="White" 
                                                   BorderThickness="1.5" 
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center">
                                        <TextBlock Text="{Binding StageInfo.LotData.DeviceName, Converter={StaticResource NullToStringConv}}"></TextBlock>
                                    </Label>
                                </Grid>

                                -->
            <!-- Card -->
            <!--
                                <Grid Grid.Row="4" Margin="0,-8,0,0">

                                    <Label     FontSize="15" 
                                                   MinHeight="32"
                                                   FontWeight="Bold"                                      
                                                   BorderThickness="1.5" 
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center">
                                        <MultiBinding Converter="{StaticResource CardStatusToTextConv}">
                                            <Binding Path="CardStatus" />
                                            <Binding Path="Progress"/>
                                            <Binding Path="CardObj"/>
                                        </MultiBinding>
                                        <Label.Foreground>
                                            <MultiBinding Converter="{StaticResource CardStatusToColorConv}">
                                                <Binding Path="CardStatus" />
                                                <Binding Path="CardObj.WaferState"/>
                                            </MultiBinding>
                                        </Label.Foreground>
                                        <Label.BorderBrush>
                                            <MultiBinding Converter="{StaticResource CardStatusToColorConv}">
                                                <Binding Path="CardStatus" />
                                                <Binding Path="CardObj.WaferState"/>
                                            </MultiBinding>
                                        </Label.BorderBrush>
                                    </Label>

                                </Grid>

                                -->
            <!-- Wafer -->
            <!--
                                <Grid Grid.Row="5" Margin="0,-8,0,0">

                                    <Label     FontSize="15" 
                                                   MinHeight="32"
                                                   Foreground="{Binding WaferStatus, Converter={StaticResource StatusToColorConv}}"
                                                   FontWeight="Bold" 
                                                   BorderBrush="{Binding WaferStatus, Converter={StaticResource StatusToColorConv}}"
                                                   BorderThickness="1.5" 
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center">
                                        <MultiBinding Converter="{StaticResource WaferStatusToTextConv}">
                                            <Binding Path="WaferStatus" />
                                            <Binding Path="Progress"/>
                                            <Binding Path="WaferObj"/>
                                        </MultiBinding>
                                    </Label>

                                </Grid>

                            </Grid>
                        </Border>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>-->
            <!--</Border>-->


            <ListView x:Name="CellListView" ItemsSource="{Binding Stages}" 
                          Grid.Row="0" BorderThickness="2" 
                          SelectionMode="{Binding CellListSelectionMode}"
                          ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                          ScrollViewer.VerticalScrollBarVisibility="Disabled" 
                          HorizontalContentAlignment="Stretch" 
                          VerticalContentAlignment="Stretch" >


                <i:Interaction.Triggers>

                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding SelectedItemChangedCommand}"  
                                                   CommandParameter="{Binding SelectedItems, ElementName=CellListView}"/>
                    </i:EventTrigger>

                </i:Interaction.Triggers>


                <ListView.ItemContainerStyle>



                    <Style TargetType="{x:Type ListViewItem}">

                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                        <Setter Property="Padding" Value="3"/>
                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>

                                        <MultiTrigger>

                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>

                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                        </MultiTrigger>

                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="IsSelected" Value="{Binding StageInfo.IsChecked}" />
                        <Setter Property="IsEnabled" Value="{Binding IsEnableTransfer, Mode=TwoWay}"/>



                    </Style>
                </ListView.ItemContainerStyle>

                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <UniformGrid Columns="{Binding CellColumn}" Rows="{Binding CellRow}" Background="Black"/>
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>

                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Border>
                            <Border.BorderBrush>
                                <MultiBinding Converter="{StaticResource CellSelectedToBrushConv}">
                                    <Binding Path="SelectedItems" ElementName="CellListView" />
                                    <Binding Path="." />
                                    <Binding RelativeSource="{RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}" Path="DataContext.ChangedSelectedItemsCount" />
                                </MultiBinding>
                            </Border.BorderBrush>

                            <Border.BorderThickness>
                                <MultiBinding Converter="{StaticResource CellSelectedToBorderThicknessConv}">
                                    <Binding Path="SelectedItems" ElementName="CellListView" />
                                    <Binding Path="." />
                                    <Binding RelativeSource="{RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}" Path="DataContext.ChangedSelectedItemsCount" />
                                </MultiBinding>
                            </Border.BorderThickness>

                            <Border.Background>
                                <ImageBrush ImageSource="{StaticResource Background.Lock}" 
                                            Stretch="UniformToFill">
                                    <ImageBrush.Opacity>
                                        <MultiBinding Converter="{StaticResource StageMovelockBackgroundConv}" ConverterParameter="LOCK">
                                            <Binding Path="StageInfo.IsConnected"/>
                                            <Binding Path="StageInfo.LotData.StageMoveState"/>
                                        </MultiBinding>
                                    </ImageBrush.Opacity>
                                </ImageBrush>
                            </Border.Background>

                            <Grid x:Name="CellGrid">

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <!--<RowDefinition Height="Auto"/>-->
                                    <!--<RowDefinition Height="Auto"/>-->
                                </Grid.RowDefinitions>

                                <Grid Grid.Row="0">

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="2.5*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>


                                    <Border Grid.Column="0" BorderThickness="1" BorderBrush="White">
                                        <Grid>
                                            <Border Grid.Column="0" BorderThickness="3" Margin="2"
                                                BorderBrush="{Binding StageInfo.IsExcuteProgram, Converter={StaticResource CellObjectForeGroundConv}, Mode=OneWay}" />

                                            <Label Grid.Column="0" Content="{Binding Index}" Padding="0,0,0,0"
                                                   Foreground="WhiteSmoke" FontSize="16"  
                                                   FontWeight="Bold"
                                               VerticalContentAlignment="Center"
                                               HorizontalContentAlignment="Center" >
                                                <i:Interaction.Triggers>
                                                    <i:EventTrigger EventName="MouseLeftButtonDown">
                                                        <i:InvokeCommandAction Command="{Binding DataContext.ConnectCommand, ElementName=window}"
                                                                                    CommandParameter="{Binding Index}"/>
                                                    </i:EventTrigger>
                                                </i:Interaction.Triggers>
                                            </Label>
                                        </Grid>
                                    </Border>


                                    <Grid Grid.Column="1" Margin="0">
                                        <Border Grid.Column="1"  BorderBrush="White" BorderThickness="1"/>
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Left" VerticalAlignment="Center">
                                            <Label Content="PV" Margin="4,2,0,2" Padding="0" FontSize="14" FontWeight="Bold"
                                              VerticalContentAlignment="Center" HorizontalContentAlignment="Left"  Foreground="{Binding StageInfo.LotData.TempState,Converter={StaticResource StageSVLabelColorConv}}"/>
                                            <Label Content="{Binding StageInfo.PV}" ContentStringFormat="{}{0:0.0}" Margin="4" Padding="0" FontSize="14" FontWeight="Bold"
                                              VerticalContentAlignment="Center"  HorizontalContentAlignment="Left" Foreground="LightGray"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Center">
                                            <Label Content="DP" Margin="0,2,4,2" Padding="0" FontSize="14" FontWeight="Bold"
                                              VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="MediumPurple"/>
                                            <Label Content="{Binding StageInfo.DewPoint}" ContentStringFormat="{}{0:0.0}" Margin="4" Padding="0" FontSize="14" FontWeight="Bold"
                                              VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="LightGray" />
                                        </StackPanel>



                                    </Grid>



                                    <Border Grid.Column="2"  BorderBrush="White" BorderThickness="1">
                                        <MahAppsControls:Badged 
                                        Badge="{Binding DataContext.StageInfo.AlarmMessageNotNotifiedCount, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}, Mode=FindAncestor}}" 
                                        HorizontalAlignment="Center" 
                                        VerticalAlignment="Center"
                                        BadgeBackground="{Binding DataContext.StageInfo.AlarmMessageNotNotifiedCount, Converter={StaticResource EventBadgeBackGroundBrushConv}, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}, Mode=FindAncestor}}" 
                                        BadgeForeground="{Binding DataContext.StageInfo.AlarmMessageNotNotifiedCount, Converter={StaticResource EventBadgeForeGroundBrushConv}, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}, Mode=FindAncestor}}" 
                                        BadgePlacementMode="TopRight"
                                        Margin="0,0,0,0"
                                        Padding="0,0,0,0">

                                            <Button Command="{Binding DataContext.UsedBellDrawerOpenCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                                CommandParameter="{Binding .}"
                                                Template="{StaticResource ExampleButton}"  Width="28"  Margin="0,0,0,-4"
                                                IsEnabled="{Binding StageInfo.IsConnected}" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                                />

                                        </MahAppsControls:Badged>
                                    </Border>


                                </Grid>
                                <Grid Grid.Row="1" Margin="0,0,0,0">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="auto"/>
                                            <RowDefinition Height="auto"/>
                                        </Grid.RowDefinitions>
                                        <Border Grid.Row="0"  BorderBrush="White" Height="30" BorderThickness="1"/>
                                        <Label Grid.Row="0" Margin="-10"
                                               HorizontalContentAlignment="Center"
                                               VerticalContentAlignment="Center"
                                               FontSize="10" 
                                               Foreground="WhiteSmoke" 
                                               FontWeight="Bold">
                                            <Label.Content>
                                                <MultiBinding Converter="{StaticResource StageLockToValueTextConverter}" Mode="OneWay">
                                                    <Binding Path="StageMode"/>
                                                    <Binding Path="LockMode" />
                                                    <Binding Path="Reconnecting" />
                                                </MultiBinding>
                                            </Label.Content>
                                        </Label>
                                        <Border Grid.Row="1"  BorderBrush="White" Height="30" BorderThickness="1"/>
                                        <Label Grid.Row="1" Margin="-10"
                                               HorizontalContentAlignment="Center"
                                               VerticalContentAlignment="Center"
                                               FontSize="10" 
                                               Foreground="WhiteSmoke" 
                                               FontWeight="Bold"
                                               Content="{Binding StageInfo.LotData.LotID, Converter={StaticResource LotIDToStringConv}}">
                                        </Label>
                                    </Grid>
                                </Grid>
                                <Grid Grid.Row="2" Margin="0,0,0,0">

                                    <Grid >
                                        <Rectangle Fill="{Binding StageState, Converter={StaticResource StageStateToValueConverter}}" Height="40" Width="Auto"/>
                                        <Rectangle  Fill="Orange" Opacity="0" Height="40" Width="Auto" >
                                            <Rectangle.Style>
                                                <Style>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding StageInfo.IsReservePause}" Value="True">
                                                            <DataTrigger.EnterActions>
                                                                <BeginStoryboard >
                                                                    <Storyboard RepeatBehavior="Forever" AutoReverse="True">
                                                                        <DoubleAnimation From="0" To="1" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </DataTrigger.EnterActions>
                                                            <DataTrigger.ExitActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard FillBehavior="Stop">
                                                                        <DoubleAnimation To="0" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </DataTrigger.ExitActions>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Rectangle.Style>
                                        </Rectangle>

                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <TextBlock Text="{Binding StageState, Converter={StaticResource StageStateToValueTextConverter}}" FontSize="15" 
                                                       FontWeight="Bold"
                                                       HorizontalAlignment="Center"
                                                       VerticalAlignment="Center"/>
                                            <TextBlock Text="{Binding ProbingTimeStr}" FontSize="15" 
                                                       HorizontalAlignment="Center"
                                                       VerticalAlignment="Center"/>
                                            <TextBlock Text="{Binding ForcedDone, Converter={StaticResource ForcedDoneToTextConv}}" FontSize="15" Foreground="Red"
                                                       HorizontalAlignment="Center"
                                                       VerticalAlignment="Center"/>
                                        </StackPanel>

                                        <Viewbox Height="30" HorizontalAlignment="Right" Margin="0,0,20,0"
                                           Visibility="{Binding StageState, Converter={StaticResource StageErrorStateToVisibilityConvertet}}">
                                            <materialDesign:PackIcon Foreground="WhiteSmoke"
                                                             HorizontalAlignment="Right">
                                                <materialDesign:PackIcon.Style>
                                                    <Style  TargetType="materialDesign:PackIcon"
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                        <Setter Property="Kind" Value="Warning" />
                                                    </Style>
                                                </materialDesign:PackIcon.Style>

                                            </materialDesign:PackIcon>

                                        </Viewbox>

                                        <Button Opacity="0" Background="Transparent" Height="30" HorizontalAlignment="Right" Margin="0,0,20,0" Width="100"
                                                Visibility="{Binding StageState, Converter={StaticResource StageErrorStateToVisibilityConvertet}}"
                                                Command="{Binding DataContext.StageGetErrorInfoCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                                CommandParameter="{Binding Index}"/>

                                        <Viewbox Height="30" HorizontalAlignment="Left" Margin="10,0,0,0"
                                                 Visibility="{Binding StageInfo.IsReservePause, Converter={StaticResource TimeVisibiltyConvert}}">
                                            <materialDesign:PackIcon Foreground="WhiteSmoke"
                                                             HorizontalAlignment="Right">
                                                <materialDesign:PackIcon.Style>
                                                    <Style  TargetType="materialDesign:PackIcon"
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                        <Setter Property="Kind" Value="PauseCircleOutline" />
                                                    </Style>
                                                </materialDesign:PackIcon.Style>

                                            </materialDesign:PackIcon>

                                        </Viewbox>

                                        <Button Opacity="0" Background="Transparent" Height="30" Margin="10,0,0,0" HorizontalAlignment="Left"
                                                Width="100" Visibility="{Binding StageInfo.IsReservePause, Converter={StaticResource TimeVisibiltyConvert}}"
                                                Command="{Binding DataContext.ReservePauseIconClickCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}"
                                                CommandParameter="{Binding Index}"/>
                                    </Grid>
                                </Grid>

                                <Grid Grid.Row="3" Margin="0,0,0,0">

                                    <Label Content="{Binding StageInfo.LastTitle}" 
                                                   MinHeight="32"
                                                   FontSize="12" 
                                                   Foreground="White" 
                                                   FontWeight="Bold" 
                                                   BorderBrush="White" 
                                                   Padding="2"
                                                   VerticalContentAlignment="Center"
                                                   BorderThickness="1.5" 
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center"/>

                                </Grid>

                                <Grid Grid.Row="4" Margin="0,-8,0,0" >

                                    <Label MinHeight="32"
                                                   FontSize="14" 
                                                   Foreground="WhiteSmoke" 
                                                   FontWeight="Bold" 
                                                   BorderBrush="{Binding StageInfo.DeviceLoadResult, Converter={StaticResource DeviceLabelBorderConv}}" 
                                                   BorderThickness="1.5" 
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center">
                                        <TextBlock Text="{Binding StageInfo.LotData.DeviceName, Converter={StaticResource NullToStringConv}}"/>
                                    </Label>
                                </Grid>

                                <!-- Card -->
                                <Grid Grid.Row="5" Margin="0">
                                    <Border BorderThickness="2"  Margin="9,0,9,9">
                                        <Border.BorderBrush>
                                            <MultiBinding Converter="{StaticResource CardStatusToColorConv}">
                                                <Binding Path="CardStatus" />
                                                <Binding Path="CardObj.WaferState"/>
                                                <Binding Path="StageInfo.IsConnected" />
                                            </MultiBinding>
                                        </Border.BorderBrush>
                                        
                                        <Grid>
                                            <ProgressBar MinHeight="60"
                                                 BorderThickness="0" 
                                                 HorizontalAlignment="Stretch" 
                                                 VerticalAlignment="Stretch" 
                                                 HorizontalContentAlignment="Center"
                                                 Foreground="DarkSlateGray"
                                                 Background="Transparent"
                                                 Margin="0"
                                                 Minimum="0"
                                                 Maximum="{Binding ChillingTimeMax}"
                                                 Value="{Binding ChillingTime}"
                                                 Visibility="{Binding ChillingTimeProgressBar_Visibility}"
                                                 />
                                            <StackPanel Orientation="Vertical">
                                                <Label     FontSize="15" 
                                                       Padding="0"
                                                   FontWeight="Bold"        
                                                       Margin="5"
                                                   HorizontalAlignment="Center" 
                                                   VerticalAlignment="Center" 
                                                   HorizontalContentAlignment="Center"
                                                       Content="CARD :">
                                                    <Label.Foreground>
                                                        <MultiBinding Converter="{StaticResource CardStatusToColorConv}">
                                                            <Binding Path="CardStatus" />
                                                            <Binding Path="CardObj.WaferState"/>
                                                            <Binding Path="StageInfo.IsConnected" />
                                                        </MultiBinding>
                                                    </Label.Foreground>

                                                </Label>
                                                <Label     FontSize="15" 
                                                              Padding="0"
                                                   FontWeight="Bold"      
                                                           Margin="5"
                                                   HorizontalAlignment="Center" 
                                                   VerticalAlignment="Center" 
                                                   HorizontalContentAlignment="Center"
                                                      >
                                                    <Label.Foreground>
                                                        <MultiBinding Converter="{StaticResource CardStatusToColorConv}">
                                                            <Binding Path="CardStatus" />
                                                            <Binding Path="CardObj.WaferState"/>
                                                            <Binding Path="StageInfo.IsConnected" />
                                                        </MultiBinding>
                                                    </Label.Foreground>
                                                    <MultiBinding Converter="{StaticResource CardStatusToTextConv1}">
                                                        <Binding Path="CardStatus" />
                                                        <Binding Path="Progress"/>
                                                        <Binding Path="CardObj"/>
                                                    </MultiBinding>
                                                </Label>
                                            </StackPanel>
                                        </Grid>

                                    </Border>
                                </Grid>

                                <!-- Wafer -->
                                <Grid Grid.Row="6" Margin="0,-8,0,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition MaxWidth="{Binding StageInfo.LotData.WaferAlignState ,Converter={StaticResource GridWidthConvert}, FallbackValue=0}"/>
                                    </Grid.ColumnDefinitions>
                                    <Label     FontSize="15"  Grid.Column="0"
                                                   MinHeight="32"
                                                   FontWeight="Bold"  
                                                   BorderThickness="1.5"
                                                   HorizontalAlignment="Stretch" 
                                                   VerticalAlignment="Stretch" 
                                                   HorizontalContentAlignment="Center"
                                                   >
                                        <Label.Foreground>
                                            <MultiBinding Converter="{StaticResource StatusToColorConv}">
                                                <Binding Path="WaferStatus" />
                                                <Binding Path="StageInfo.IsConnected" />
                                            </MultiBinding>
                                        </Label.Foreground>
                                        <Label.BorderBrush>
                                            <MultiBinding Converter="{StaticResource StatusToColorConv}">
                                                <Binding Path="WaferStatus" />
                                                <Binding Path="StageInfo.IsConnected" />
                                            </MultiBinding>
                                        </Label.BorderBrush>
                                        <MultiBinding Converter="{StaticResource WaferStatusToTextConv}">
                                            <Binding Path="WaferStatus" />
                                            <Binding Path="Progress"/>
                                            <Binding Path="WaferObj"/>
                                        </MultiBinding>
                                    </Label>
                                    <Button Grid.Column="1" Margin="0,0,8,0" Padding="0" BorderBrush="LimeGreen"  BorderThickness="2"  Opacity="1" Visibility="{Binding StageInfo.LotData.WaferAlignState, Converter={StaticResource WaferRecoveryVisibiltyConvert}, FallbackValue=Collapsed}"
                                              HorizontalAlignment="Center"
                                              Command="{Binding Path=DataContext.WaferRecoveryInformCammand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}}" CommandParameter="{Binding Index}" Width="30" Height="30" Background="white">
                                        <Button.Content>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Viewbox Grid.Row="0" >
                                                    <materialDesign:PackIcon Kind="ProgressWrench" Foreground="LimeGreen" Background="Transparent" Height="25" Width="25" />
                                                </Viewbox>
                                            </Grid>
                                        </Button.Content>
                                    </Button>
                                </Grid>
                                <Viewbox Width="96" Height="96" Grid.RowSpan="7">
                                    <Canvas Width="48" Height="48">
                                        <Canvas.Opacity>
                                            <MultiBinding Converter="{StaticResource StageMovelockBackgroundConv}" ConverterParameter="LOCK">
                                                <Binding Path="StageInfo.IsConnected"/>
                                                <Binding Path="StageInfo.LotData.StageMoveState"/>
                                            </MultiBinding>
                                        </Canvas.Opacity>
                                        <Canvas.Visibility>
                                            <MultiBinding Converter="{StaticResource StageMovelockVisibleConv}" ConverterParameter="LOCK">
                                                <Binding Path="StageInfo.IsConnected"/>
                                                <Binding Path="StageInfo.LotData.StageMoveState"/>
                                            </MultiBinding>
                                        </Canvas.Visibility>
                                        <Path Fill="Orange" Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z">
                                            <Path.RenderTransform>
                                                <ScaleTransform ScaleX="2" ScaleY="2"/>
                                            </Path.RenderTransform>
                                        </Path>
                                    </Canvas>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDown">
                                            <i:InvokeCommandAction Command="{Binding Path=DataContext.ShowReasonOfLockList, ElementName=window}"
										   CommandParameter="{Binding Index}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Viewbox>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>

            <Border Grid.Row="1" Margin="3" BorderThickness="2" BorderBrush="White" >

                <MahAppsControls:MetroAnimatedSingleRowTabControl SelectedIndex="{Binding SelectedOperationTabIndex}">

                    <MahAppsControls:MetroAnimatedSingleRowTabControl.Resources>
                        <SolidColorBrush x:Key="AccentColorBrush" Color="#9370d8"/>
                        <SolidColorBrush x:Key="HighlightBrush" Color="#7260b5"/>
                    </MahAppsControls:MetroAnimatedSingleRowTabControl.Resources>

                    <MahAppsControls:MetroTabItem
                    Header="Lot Operation" BorderThickness="1" BorderBrush="Black"
                    MahAppsControls:ControlsHelper.HeaderFontSize="20"
                    MahAppsControls:ControlsHelper.HeaderMargin="8"
                    MahAppsControls:ControlsHelper.HeaderFontWeight="DemiBold"
                    HorizontalAlignment="Center"
                    >
                        <Grid Background="#333333" Margin="8" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

                            <Border Margin="4,8,0,0">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="8*"/>
                                        <ColumnDefinition Width="2*"/>
                                    </Grid.ColumnDefinitions>

                                    <Grid Grid.Column="0">
                                        <UniformGrid    Rows="2" Columns="4"  
                                    Margin="0">
                                            <Button Margin="5,5,2.5,2.5"  IsEnabled="{Binding CellLotStartFlag}"
                                         Command="{Binding CellLotStartCommand}">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <materialDesign:PackIcon Height="48" Width="48"
                                                             HorizontalAlignment="Center">

                                                        <materialDesign:PackIcon.Style>
                                                            <Style  TargetType="materialDesign:PackIcon"
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                                <Setter Property="Kind" Value="Play" />
                                                            </Style>
                                                        </materialDesign:PackIcon.Style>

                                                    </materialDesign:PackIcon>

                                                    <TextBlock  Grid.Row="1" 
                                                    Width="60"
                                                    HorizontalAlignment="Left" 
                                                    TextAlignment="Center" FontWeight="Bold" 
                                                    Text="Cell Start"
                                                    />

                                                </Grid>
                                            </Button>

                                            <Button Margin="2.5,5,2.5,2.5" IsEnabled="{Binding CellLotPauseFlag}"
                                         Command="{Binding CellLotPauseCommand}">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition />
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <materialDesign:PackIcon    Height="48" Width="48"
                                                                    HorizontalAlignment="Center" >

                                                        <materialDesign:PackIcon.Style>
                                                            <Style TargetType="materialDesign:PackIcon"
                                                   BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                                <Setter Property="Kind" Value="Pause" />
                                                            </Style>
                                                        </materialDesign:PackIcon.Style>

                                                    </materialDesign:PackIcon>

                                                    <TextBlock  Text="Cell Pause" Grid.Row="1"
                                                    TextAlignment="Center" FontWeight="Bold"/>
                                                </Grid>

                                            </Button>


                                            <Button Margin="2.5,5,2.5,2.5" IsEnabled="{Binding CellLotResumeFlag}"
                                        Command="{Binding CellLotResumeCommand}">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <materialDesign:PackIcon Height="48" Width="48">
                                                        <materialDesign:PackIcon.Style>
                                                            <Style  TargetType="materialDesign:PackIcon" 
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                                <Setter Property="Kind" Value="Replay" />
                                                            </Style>
                                                        </materialDesign:PackIcon.Style>
                                                    </materialDesign:PackIcon>

                                                    <TextBlock  Grid.Row="1" 
                                                    TextAlignment="Center" FontWeight="Bold"
                                                    Text="Cell Resume"
                                                    />

                                                </Grid>

                                            </Button>

                                            <Button Margin="2.5,5,5,2.5" IsEnabled="{Binding CellLotEndFlag}"
                                        Command="{Binding CellLotEndCommand}">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <materialDesign:PackIcon Height="48" Width="48">
                                                        <materialDesign:PackIcon.Style>
                                                            <Style  TargetType="materialDesign:PackIcon" 
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                                <Setter Property="Kind" Value="Stop" />
                                                            </Style>
                                                        </materialDesign:PackIcon.Style>
                                                    </materialDesign:PackIcon>

                                                    <TextBlock  Grid.Row="1" 
                                                    TextAlignment="Center" FontWeight="Bold"
                                                    Text="Cell End"
                                                    />

                                                </Grid>
                                            </Button>

                                            <Button Margin="5,2.5,2.5,5" Visibility="Hidden"
                                        IsEnabled="{Binding LoaderMaster.CurrentModuleState, Converter={StaticResource BtoVConv1}}"
                                        Command="{Binding StartLotOPCommand}" 
                                        CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <materialDesign:PackIcon Height="48" Width="48"
                                                             HorizontalAlignment="Center">

                                                        <materialDesign:PackIcon.Style>
                                                            <Style  TargetType="materialDesign:PackIcon"
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                                <Setter Property="Kind" Value="Play" />
                                                            </Style>
                                                        </materialDesign:PackIcon.Style>

                                                    </materialDesign:PackIcon>

                                                    <TextBlock  Grid.Row="1" 
                                                    Width="48"
                                                    HorizontalAlignment="Left" 
                                                    TextAlignment="Center" FontWeight="Bold" 
                                                    Text="Lot Start"
                                                    />

                                                </Grid>
                                            </Button>
                                            <Button Margin="2.5,2.5,2.5,5"
                                      IsEnabled="{Binding LoaderMaster.CurrentModuleState, Converter={StaticResource BtoVConv2}}"
                                        Command="{Binding PauseLotOPCommand}" 
                                        CommandParameter="{Binding RelativeSource={RelativeSource Self}}">

                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition />
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <materialDesign:PackIcon    Height="48" Width="48"
                                                                    HorizontalAlignment="Center" >

                                                        <materialDesign:PackIcon.Style>
                                                            <Style TargetType="materialDesign:PackIcon"
                                                   BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                                <Setter Property="Kind" Value="Pause" />
                                                            </Style>
                                                        </materialDesign:PackIcon.Style>

                                                    </materialDesign:PackIcon>

                                                    <TextBlock  Text="Lot Pause" Grid.Row="1"
                                                    TextAlignment="Center" FontWeight="Bold"/>
                                                </Grid>


                                            </Button>

                                            <Button Margin="2.5,2.5,2.5,5" 
                                        IsEnabled="{Binding LoaderMaster.CurrentModuleState, Converter={StaticResource BtoVConv3}}"
                                        Command="{Binding ResumeLotOPCommand}" 
                                        CommandParameter="{Binding RelativeSource={RelativeSource Self}}">

                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <materialDesign:PackIcon Height="48" Width="48">
                                                        <materialDesign:PackIcon.Style>
                                                            <Style  TargetType="materialDesign:PackIcon" 
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                                <Setter Property="Kind" Value="Replay" />
                                                            </Style>
                                                        </materialDesign:PackIcon.Style>
                                                    </materialDesign:PackIcon>

                                                    <TextBlock  Grid.Row="1" 
                                                    TextAlignment="Center" FontWeight="Bold"
                                                    Text="Lot Resume"
                                                    />

                                                </Grid>
                                            </Button>
                                            <!--IsEnabled="{Binding LoaderMaster.CurrentModuleState, Converter={StaticResource BtoVConv3}}"-->
                                            <Button Margin="2.5,2.5,2.5,5" Command="{Binding EndLotOPCommand}" IsEnabled="{Binding LoaderMaster.CurrentModuleState, Converter={StaticResource BtoVConv5}}"
                                                    CommandParameter="{Binding RelativeSource={RelativeSource Self}}">

                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <materialDesign:PackIcon Height="48" Width="48">
                                                        <materialDesign:PackIcon.Style>
                                                            <Style  TargetType="materialDesign:PackIcon" 
                                                        BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                                <Setter Property="Kind" Value="Stop" />
                                                            </Style>
                                                        </materialDesign:PackIcon.Style>
                                                    </materialDesign:PackIcon>

                                                    <TextBlock  Grid.Row="1" 
                                                    TextAlignment="Center" FontWeight="Bold"
                                                    Text="Lot End"
                                                    />

                                                </Grid>
                                            </Button>

                                        </UniformGrid>
                                    </Grid>

                                    <Grid Grid.Column="1">
                                        <GroupBox   Header="Select Mode" FontSize="12" Foreground="White" BorderBrush="White" BorderThickness="1" Style="{DynamicResource GroupBoxForegroundStyle}" Margin="0,0,3,0">
                                            <StackPanel Orientation="Vertical">
                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                    <RadioButton  GroupName="SelectMode" IsChecked="True" Padding="0" FontSize="20" Margin="5" Command="{Binding SingleSelectCommand}"  Foreground="White" VerticalContentAlignment="Center" Content="Single"/>
                                                    <RadioButton  GroupName="SelectMode" Padding="0" FontSize="20"  Margin="5" Command="{Binding MultipleSelectCommand}"  Foreground="White" VerticalContentAlignment="Center" Content="Multiple"/>
                                                </StackPanel>
                                                <Button IsEnabled="True" Command="{Binding UnselectedAllCellsCommand}" 
                                                Width="150"
                                                HorizontalContentAlignment="Center"
                                                HorizontalAlignment="Center" 
                                                FontSize="24" FontWeight="Bold">

                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition/>
                                                            <RowDefinition Height="Auto"/>
                                                        </Grid.RowDefinitions>

                                                        <TextBlock  Grid.Row="0" TextAlignment="Center" FontWeight="Bold" Text="Unselect"/>
                                                        <TextBlock  Grid.Row="1" TextAlignment="Center" FontWeight="Bold" Text="All Cells"/>

                                                    </Grid>
                                                </Button>
                                            </StackPanel>
                                        </GroupBox>

                                    </Grid>
                                </Grid>

                            </Border>
                        </Grid>
                    </MahAppsControls:MetroTabItem>

                    <MahAppsControls:MetroTabItem
                    Header="Manual Operation" BorderThickness="1" BorderBrush="Black"
                    MahAppsControls:ControlsHelper.HeaderFontSize="20"
                    MahAppsControls:ControlsHelper.HeaderMargin="8"
                    MahAppsControls:ControlsHelper.HeaderFontWeight="DemiBold"
                    HorizontalAlignment="Center"
                    >
                        <Grid Background="#333333" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Column="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1.6*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <GroupBox   Header="CELL" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" Foreground="White" BorderBrush="White" BorderThickness="1" Style="{DynamicResource GroupBoxForegroundStyle}" Margin="0,0,3,0">

                                    <StackPanel Orientation="Horizontal">
                                        <Button Command="{Binding ManualOPCommandSet.SystemInitExcuteCommand}" 
                                        Content="System Init"  HorizontalAlignment="Stretch" Margin="12" Width="200" Background="DimGray" 
                                        Grid.Row="0" Grid.Column="0" FontSize="20" FontWeight="Bold">
                                            <Button.IsEnabled>
                                                <MultiBinding Converter="{StaticResource StageModeNSoakingModuleStateToIsEnabledConv}" Mode="OneWay">
                                                    <Binding Path="SelectedStage.StageMode"/>
                                                    <Binding Path="SelectedStage.StageInfo.LotData.SoakingState"/>
                                                </MultiBinding>
                                            </Button.IsEnabled>
                                        </Button>
                                        <Button Command="{Binding ManualOPCommandSet.WaferAlignmentExcuteCommand}"  Background="DimGray" 
                                        Content="Wafer Alignment" HorizontalAlignment="Stretch" Margin="12" Width="200" 
                                        Grid.Row="0" Grid.Column="1" FontSize="20" FontWeight="Bold" >
                                            <Button.IsEnabled>
                                                <MultiBinding Converter="{StaticResource StageModeNSoakingModuleStateToIsEnabledConv}" Mode="OneWay">
                                                    <Binding Path="SelectedStage.StageMode"/>
                                                    <Binding Path="SelectedStage.StageInfo.LotData.SoakingState"/>
                                                </MultiBinding>
                                            </Button.IsEnabled>
                                        </Button>
                                        <Button Command="{Binding ManualOPCommandSet.PinAlignmentExcuteCommand}"  Background="DimGray"
                                        Content="Pin Alignment"   HorizontalAlignment="Stretch" Margin="12" Width="200" 
                                        Grid.Row="0" Grid.Column="2" FontSize="20" FontWeight="Bold">
                                            <Button.IsEnabled>
                                                <MultiBinding Converter="{StaticResource StageModeNSoakingModuleStateToIsEnabledConv}" Mode="OneWay">
                                                    <Binding Path="SelectedStage.StageMode"/>
                                                    <Binding Path="SelectedStage.StageInfo.LotData.SoakingState"/>
                                                </MultiBinding>
                                            </Button.IsEnabled>
                                        </Button>
                                    </StackPanel>
                                </GroupBox>


                                <GroupBox   Header="LOADER PARKING" FontSize="18" FontWeight="Bold" Foreground="White" BorderBrush="White" BorderThickness="1" Style="{DynamicResource GroupBoxForegroundStyle}" Margin="0,0,3,0" Grid.Column="1">
                                    <StackPanel Orientation="Horizontal">
                                        <Button Command="{Binding LeftParkingCommand}" 
                                         HorizontalAlignment="Stretch" Margin="30,12,60,12" Width="150"
                                        Grid.Row="0" Grid.Column="1" FontSize="20" FontWeight="Bold" Background="SkyBlue" >
                                            <StackPanel Orientation="Horizontal">
                                                <Image Width="64" Height="48" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" HorizontalAlignment="Left" VerticalAlignment="Top" Source="./Resources/bottom-left.png" />
                                                <Label Margin="-20,0,0,0" FontSize="20" Foreground="Black">LEFT</Label>
                                            </StackPanel>
                                        </Button>
                                        <Button Command="{Binding RightParkingCommand}" 
                                         HorizontalAlignment="Stretch" Margin="12" Width="150"
                                        Grid.Row="0" Grid.Column="2" FontSize="20" FontWeight="Bold" Background="SkyBlue">
                                            <StackPanel Orientation="Horizontal">
                                                <Label Margin="0,0,0,0" FontSize="20" Foreground="Black">RIGHT</Label>
                                                <Image Width="64" Height="48" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" HorizontalAlignment="Left" VerticalAlignment="Top" Source="./Resources/bottom-right.png" />

                                            </StackPanel>
                                        </Button>


                                    </StackPanel>

                                </GroupBox>
                            </Grid>
                            <!--<Button Style="{StaticResource MaterialDesignRaisedLightButton}" Command="{Binding ManualOPCommandSet.SystemInitExcuteCommand}" Content="System Init" Width="140" Height="40" HorizontalAlignment="Left" Margin="4"/>
                                <Button Style="{StaticResource MaterialDesignRaisedLightButton}" Command="{Binding ManualOPCommandSet.WaferAlignmentExcuteCommand}" Content="Wafer Alignment" Width="140" Height="40"  HorizontalAlignment="Left" Margin="4"/>
                                <Button Style="{StaticResource MaterialDesignRaisedLightButton}" Command="{Binding ManualOPCommandSet.PinAlignmentExcuteCommand}" Content="Pin Alignment" Width="140" Height="40"  HorizontalAlignment="Left" Margin="4"/>-->

                        </Grid>
                    </MahAppsControls:MetroTabItem>

                    <MahAppsControls:MetroTabItem
                    Header="Stage Lock Option" BorderThickness="1" BorderBrush="Black"
                    MahAppsControls:ControlsHelper.HeaderFontSize="20"
                    MahAppsControls:ControlsHelper.HeaderMargin="8"
                    MahAppsControls:ControlsHelper.HeaderFontWeight="DemiBold"
                    HorizontalAlignment="Center"
                    >
                        <Grid Background="#333333" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <Button Command="{Binding StageMoveLockCommand}" 
                                        Content="Stage Lock"  HorizontalAlignment="Stretch" Margin="8" 
                                        Grid.Row="0" Grid.Column="0" FontSize="16" FontWeight="Bold"/>
                            <Button Command="{Binding StageMoveUnLockCommand}" 
                                        Content="Stage UnLock" HorizontalAlignment="Stretch" Margin="8"
                                        Grid.Row="0" Grid.Column="1" FontSize="16" FontWeight="Bold" />
                            <Grid Grid.Column="3" Grid.RowSpan="2" Margin="10">
                                <GroupBox   Header="Select Mode" FontSize="12" Foreground="White" BorderBrush="White" BorderThickness="1" Style="{DynamicResource GroupBoxForegroundStyle}" Margin="0,0,3,0">
                                    <StackPanel Orientation="Vertical">
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                            <RadioButton  GroupName="SelectMode" IsChecked="True" Padding="0" FontSize="20" Margin="5" Command="{Binding SingleSelectCommand}"  Foreground="White" VerticalContentAlignment="Center" Content="Single"/>
                                            <RadioButton  GroupName="SelectMode" Padding="0" FontSize="20"  Margin="5" Command="{Binding MultipleSelectCommand}"  Foreground="White" VerticalContentAlignment="Center" Content="Multiple"/>
                                        </StackPanel>
                                        <Button IsEnabled="True" Command="{Binding UnselectedAllCellsCommand}" 
                                                Width="150"
                                                HorizontalContentAlignment="Center"
                                                HorizontalAlignment="Center" 
                                                FontSize="24" FontWeight="Bold">

                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>

                                                <TextBlock  Grid.Row="0" TextAlignment="Center" FontWeight="Bold" Text="Unselect"/>
                                                <TextBlock  Grid.Row="1" TextAlignment="Center" FontWeight="Bold" Text="All Cells"/>

                                            </Grid>
                                        </Button>
                                    </StackPanel>
                                </GroupBox>
                            </Grid>
                        </Grid>
                    </MahAppsControls:MetroTabItem>

                </MahAppsControls:MetroAnimatedSingleRowTabControl>
                
                

            </Border>



        </Grid>

    </Grid>
</UserControl>
