<UserControl x:Class="FocusingControl.FocusingViewControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:local="clr-namespace:FocusingControl"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800" Loaded="UserControl_Loaded">
    <Grid>
        <Grid.Resources>
            <ResourceDictionary>
                <!--<System:Double x:Key="DialogTitleFontSize">26</System:Double>
                <System:Double x:Key="DialogMessageFontSize">15</System:Double>-->
                
                <Style TargetType="{x:Type Label}">
                    <Setter Property="FontSize" Value="16" />
                    <Setter Property="Foreground" Value="Black"/>
                </Style>
                <Style TargetType="{x:Type TextBox}">
                    <Setter Property="Foreground" Value="Black"/>
                    <Setter Property="TextAlignment" Value="Center"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="FontSize" Value="16" />
                    <Setter Property="Height" Value="30"/>
                </Style>
                <Style x:Key="DefaultButton" TargetType="Button">
                    <Setter Property="Margin" Value="4"/>
                    <Setter Property="FontSize" Value="18" />
                </Style>
                <Style TargetType="{x:Type ToggleButton}">
                    <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <ControlTemplate.Resources>
                                <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut"/>
                                <Storyboard x:Key="ShowRipple">
                                    <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             To="0.26" Duration="0"/>
                                    <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             From="1" To="2.5" Duration="0:0:0.2"/>
                                    <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             From="1" To="2.5" Duration="0:0:0.2"/>
                                </Storyboard>
                                <Storyboard x:Key="HideRipple">
                                    <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             To="0.26" Duration="0:0:0.3"/>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Viewbox Width="65" Margin="0,5,0,5">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" To="Checked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-10"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="50">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" To="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="50"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-10">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"
                                                         Duration="0" To="50" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"
                                                         Duration="0" To="-10" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid>
                                    <Rectangle x:Name="Track"
                                                    HorizontalAlignment="Left" Height="25"
                                                    Stroke="{x:Null}" 
                                                   VerticalAlignment="Top" Width="65" 
                                                   RadiusY="7.5" RadiusX="7.5"
                                                   Opacity="0.56"/>
                                    <TextBlock  x:Name="TrackText"
                                                    VerticalAlignment="Center"
                                                    Foreground="Black"
                                                    FontSize="18"/>

                                    <Grid x:Name="ThumbHolder"
                                  HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Ellipse x:Name="RippleThumb"
                                         Fill="{DynamicResource PrimaryHueLightBrush}"
                                         Height="15" Width="15"
                                         IsHitTestVisible="False"
                                         Opacity="0.26"
                                         Margin="0"
                                         HorizontalAlignment="Center" VerticalAlignment="Center"
                                         RenderTransformOrigin="0.5,0.5">
                                            <Ellipse.RenderTransform>
                                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            </Ellipse.RenderTransform>
                                        </Ellipse>
                                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(local:ShadowAssist.CacheMode)}">
                                            <Ellipse x:Name="Thumb"
                                             Fill="#FFFAFAFA" Stroke="Gray" 
                                             HorizontalAlignment="Center" VerticalAlignment="Center"
                                             Width="25" Height="25"
                                             Margin="0,0,0,0"
                                             RenderTransformOrigin="0.5,0.5"
                                             Effect="{DynamicResource MaterialDesignShadowDepth1}">
                                            </Ellipse>
                                        </AdornerDecorator>
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                                  Margin="{TemplateBinding Padding}"
                                                  x:Name="ContentPresenter"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                  FlowDirection="LeftToRight"/>
                                        <Grid.RenderTransform>
                                            <TranslateTransform X="0" Y="0"/>
                                        </Grid.RenderTransform>
                                    </Grid>
                                </Grid>
                            </Viewbox>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <!--<Setter TargetName="Thumb" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />-->
                                    <Setter TargetName="Track" Property="Fill" Value="Purple" />
                                    <Setter TargetName="Track" Property="Opacity" Value="0.80" />
                                    <Setter TargetName="TrackText" Property="Text" Value="On" />
                                    <Setter TargetName="TrackText" Property="HorizontalAlignment" Value="Left" />
                                    <Setter TargetName="TrackText" Property="Margin" Value="10 0 0 0" />
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsChecked" Value="True" />
                                        <Condition Property="local:ToggleButtonAssist.HasOnContent" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:ToggleButtonAssist.OnContent)}" />
                                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:ToggleButtonAssist.OnContentTemplate)}" />
                                </MultiTrigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                    <Setter TargetName="Track" Property="Fill" Value="{DynamicResource PrimaryHueLightBrush}" />
                                    <Setter TargetName="Track" Property="Opacity" Value="0.50" />
                                    <Setter TargetName="TrackText" Property="Text" Value="Off" />
                                    <Setter TargetName="TrackText" Property="HorizontalAlignment" Value="Right" />
                                    <Setter TargetName="TrackText" Property="Margin" Value="0 0 10 0" />
                                    <!-- Need to set Foreground to Background here instead of hardcoded PrimaryHueMidBrush -->
                                </Trigger>
                                <Trigger Property="Button.IsDefaulted" Value="true"/>
                                <Trigger Property="IsMouseOver" Value="true"/>
                                <Trigger Property="IsPressed" Value="true">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource ShowRipple}"/>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource HideRipple}"/>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="Thumb" Property="Fill" Value="#BDBDBD" />
                                    <Setter TargetName="Track" Property="Fill">
                                        <Setter.Value>
                                            <SolidColorBrush Color="White" Opacity=".12" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                </Style>
                <!--<Style TargetType="{x:Type ComboBox}">
                    <Setter Property="Margin" Value="4"/>
                    <Setter Property="FontSize" Value="18" />
                </Style>-->
                
            </ResourceDictionary>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <StackPanel Margin="0,0,4,0">
            <!-- Focus Range-->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*" />
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Focus Range : "/>
                <TextBox AutomationProperties.AutomationId="txtFocusRange"
                         Grid.Column="1" Text="{Binding FocusParam.FocusRange.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDown" >
                            <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>

            <!-- Focus Max Step-->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Focus Max Step : " />
                <TextBox AutomationProperties.AutomationId="txtFocusMaxStep"
                         Grid.Column="1" Text="{Binding FocusParam.FocusMaxStep.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDown" >
                            <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>

            <!-- Depth Of Field-->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Depth Of Field : " />
                <TextBox AutomationProperties.AutomationId="txtDepthOfField"
                         Grid.Column="1" Text="{Binding FocusParam.DepthOfField.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDown" >
                            <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>

            <!-- Focus Threshold-->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Focus Threshold : " />
                <TextBox AutomationProperties.AutomationId="txtFocusThreshold"
                         Grid.Column="1" Text="{Binding FocusParam.FocusThreshold.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDown" >
                            <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>

            <!-- Flatness Threshold-->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Flatness Threshold : " />
                <TextBox AutomationProperties.AutomationId="txtFlatnessThreshold"
                         Grid.Column="1" Text="{Binding FocusParam.FlatnessThreshold.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDown" >
                            <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>

            <!-- Peak Range Threshold-->
            <Grid Margin="2"> 
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Peak Range Threshold : " />
                <TextBox AutomationProperties.AutomationId="txtPeakRangeThreshold"
                         Grid.Column="1" Text="{Binding FocusParam.PeakRangeThreshold.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDown" >
                            <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>

            <!-- Potential Threshold-->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Potential Threshold : " />
                <TextBox AutomationProperties.AutomationId="txtPotentialThreshold"
                         Grid.Column="1" Text="{Binding FocusParam.PotentialThreshold.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDown" >
                            <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>

            <!-- Out Focus Limit -->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Out Focus Limit : " />
                <TextBox AutomationProperties.AutomationId="txtOutFocusLimit"
                         Grid.Column="1" Text="{Binding FocusParam.OutFocusLimit.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDown" >
                            <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Grid>

            <!-- Focusing Type  -->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Focusing Type : " />
                <ComboBox AutomationProperties.AutomationId="cmbFocusingType"
                          Grid.Column="1"  BorderBrush="Purple" BorderThickness="1" HorizontalContentAlignment="Center"
                          ItemsSource="{Binding FocusTypes}" SelectedItem="{Binding FocusParam.FocusingType.Value}">

                </ComboBox>
            </Grid>
            
        </StackPanel>

        <StackPanel Grid.Column="1" Margin="4,0,0,0">
            <!-- Check Potential -->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.8*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Check Potential : " />
                <ToggleButton AutomationProperties.AutomationId="tglCheckPotential"
                              Grid.Column="1" IsChecked="{Binding FocusParam.CheckPotential.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <!--<i:EventTrigger EventName="PreviewMouseDown" >
                            <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                        </i:EventTrigger>-->
                    </i:Interaction.Triggers>
                </ToggleButton>
            </Grid>

            <!-- Check Threshold Focus Value -->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.8*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Check Threshold Focus Value : " />
                <ToggleButton AutomationProperties.AutomationId="tglCheckThresholdFocusValue"
                              Grid.Column="1" IsChecked="{Binding FocusParam.CheckThresholdFocusValue.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>

                    </i:Interaction.Triggers>
                </ToggleButton>
            </Grid>

            <!-- Check Flatness -->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.8*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Check Flatness : " />
                <ToggleButton AutomationProperties.AutomationId="tglCheckFlatness"
                              Grid.Column="1" IsChecked="{Binding FocusParam.CheckFlatness.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>

                    </i:Interaction.Triggers>
                </ToggleButton>
            </Grid>

            <!-- Check DualPeak -->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.8*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Check DualPeak : " />
                <ToggleButton AutomationProperties.AutomationId="tglCheckDualPeak"
                              Grid.Column="1" IsChecked="{Binding FocusParam.CheckDualPeak.Value, Mode=TwoWay}">
                    <i:Interaction.Triggers>

                    </i:Interaction.Triggers>
                </ToggleButton>
            </Grid>

            <!-- Focusing Camera  -->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Focusing Camera : " />
                <ComboBox AutomationProperties.AutomationId="cmbFocusingCamera"
                          Grid.Column="1" BorderBrush="Purple" BorderThickness="1" HorizontalContentAlignment="Center"
                          ItemsSource="{Binding CamTypes}" SelectedItem="{Binding FocusParam.FocusingCam.Value}">
                    
                </ComboBox>
            </Grid>

            <!-- Focusing Axis  -->
            <Grid Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.4*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Label Content="Focusing Axis : " />
                <ComboBox AutomationProperties.AutomationId="cmbFocusingAxis"
                          Grid.Column="1"  BorderBrush="Purple" BorderThickness="1" HorizontalContentAlignment="Center"
                          ItemsSource="{Binding Axises}" SelectedItem="{Binding FocusParam.FocusingAxis.Value}">

                </ComboBox>
            </Grid>

            <!-- Focusing ROI  -->
            <GroupBox Margin="2" BorderBrush="DimGray" BorderThickness="1" Header="Focusing ROI">
                <Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Label Grid.Row="0" Content="Start X Pos : " />
                        <Label Grid.Row="1" Content="Start Y Pos : " />
                        <Label Grid.Row="2" Content="Width : " />
                        <Label Grid.Row="3" Content="Height : " />

                        <!--X-->
                        <TextBox AutomationProperties.AutomationId="txtFocusingROIX" IsEnabled="False"
                                 Grid.Row="0" Grid.Column="1" Text="{Binding FocusROI_x, Mode=TwoWay}">
                            <!--<i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding FocusROITextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>-->
                        </TextBox>

                        <!--Y-->
                        <TextBox AutomationProperties.AutomationId="txtFocusingROIY" IsEnabled="False"
                                 Grid.Row="1" Grid.Column="1" Text="{Binding FocusROI_y, Mode=TwoWay}">
                            <!--<i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding FocusROITextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>-->
                        </TextBox>

                        <!--WIDTH-->
                        <TextBox AutomationProperties.AutomationId="txtFocusingROIWidth" Tag="Width"
                                 Grid.Row="2" Grid.Column="1" Text="{Binding FocusROI_Width, Mode=TwoWay}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding FocusROITextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>

                        <!--HEIGHT-->
                        <TextBox AutomationProperties.AutomationId="txtFocusingROIHeight" Tag="Height"
                                 Grid.Row="3" Grid.Column="1" Text="{Binding FocusROI_Height, Mode=TwoWay}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseDown" >
                                    <i:InvokeCommandAction Command="{Binding FocusROITextBoxClickCommand}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>

                    </Grid>
                </Grid>
            </GroupBox>

        </StackPanel>
    </Grid>
</UserControl>
