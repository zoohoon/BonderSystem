<Application x:Class="ProberSystem.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ProberSystem"
             xmlns:cui="clr-namespace:CUI;assembly=CUI"
             xmlns:ucdutviewer="clr-namespace:ucDutViewer;assembly=ucDutViewer"
             xmlns:conv="clr-namespace:ValueConverters;assembly=ValueConverters"
             xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
             xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:Dialogs="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
             xmlns:account="clr-namespace:AccountModule;assembly=AccountModule"
             xmlns:displayport="clr-namespace:UcDisplayPort;assembly=UcDisplayPort"
             StartupUri="MainWindow.xaml"
             ShutdownMode="OnExplicitShutdown"
             >
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--========================================================================== -->
                <!--MahApps--><!--
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />

                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedSingleRowTabControl.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.TabControl.xaml" />
                --><!--Material Design--><!--
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.indigo.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.deeporange.xaml" />

                --><!--Material Design: MahApps Compatibility--><!--
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.MahApps;component/Themes/MaterialDesignTheme.MahApps.Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.MahApps;component/Themes/MaterialDesignTheme.MahApps.Flyout.xaml" />
                --><!--Multi Lauguage 
                <ResourceDictionary Source="Resource.resx"/>
                <ResourceDictionary Source="Resources.ko-KR.resx"/>
                <ResourceDictionary Source="Resources.ja-JP.resx"/>
                <ResourceDictionary Source="Resources.zh-CN.resx"/>
                <ResourceDictionary Source="Resources.zh-TW.resx"/>-->

                <!--WPFNotification--><!--
                <ResourceDictionary Source="/WPFNotification;component/Assets/NotificationUI.xaml" />

                --><!-- ToolTipNotification --><!--
                <ResourceDictionary Source="/CUIToolTip;component/Assets/SimpleToolTip/ToolTip_Simple_UI.xaml" />
                <ResourceDictionary Source="/CUIToolTip;component/Assets/ImageToolTip/ToolTip_Image_UI.xaml" />
                <ResourceDictionary Source="/CUIToolTip;component/Assets/GifToolTip/ToolTip_Gif_UI.xaml" />-->

                <!--<ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml"/>-->

                <!-- accent resource -->
                <!-- change "Cobalt" to the accent color you want -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Orange.xaml"/>

                <!-- theme resource -->
                <!-- change "BaseLight" to the theme you want -->
                <!--<ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml"/>-->

                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
                <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />-->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.MahApps;component/Themes/MaterialDesignTheme.MahApps.Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.MahApps;component/Themes/MaterialDesignTheme.MahApps.Flyout.xaml" />

                <!--WPFNotification-->
                
                <ResourceDictionary Source="/WPFNotification;component/Assets/NotificationUI.xaml" />

                
                 <!--ToolTipNotification--> 
                
                <ResourceDictionary Source="/CUIToolTip;component/Assets/SimpleToolTip/ToolTip_Simple_UI.xaml" />
                <ResourceDictionary Source="/CUIToolTip;component/Assets/ImageToolTip/ToolTip_Image_UI.xaml" />
                <ResourceDictionary Source="/CUIToolTip;component/Assets/GifToolTip/ToolTip_Gif_UI.xaml" />
                <!--MaterialDesign Extensions-->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignExtensions;component/Themes/Generic.xaml" />
                <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignExtensions;component/Themes/MaterialDesignDarkTheme.xaml" />-->
            </ResourceDictionary.MergedDictionaries>

            <!--#region ==> Brushes-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                            MahApps Brushes                                             -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <SolidColorBrush x:Key="HighlightBrush" Color="{DynamicResource Primary700}"/>
            <SolidColorBrush x:Key="AccentBaseColorBrush" Color="{DynamicResource Primary600}" />
            <SolidColorBrush x:Key="AccentColorBrush" Color="{DynamicResource Primary500}"/>
            <SolidColorBrush x:Key="AccentColorBrush2" Color="{DynamicResource Primary400}"/>
            <SolidColorBrush x:Key="AccentColorBrush3" Color="{DynamicResource Primary300}"/>
            <SolidColorBrush x:Key="AccentColorBrush4" Color="{DynamicResource Primary200}"/>
            <SolidColorBrush x:Key="WindowTitleColorBrush" Color="{DynamicResource Primary700}"/>
            <SolidColorBrush x:Key="AccentSelectedColorBrush" Color="{DynamicResource Primary500Foreground}"/>
            <LinearGradientBrush x:Key="ProgressBrush" EndPoint="0.001,0.5" StartPoint="1.002,0.5">
                <GradientStop Color="{DynamicResource Primary700}" Offset="0"/>
                <GradientStop Color="{DynamicResource Primary300}" Offset="1"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="CheckmarkFill" Color="{DynamicResource Primary500}"/>
            <SolidColorBrush x:Key="RightArrowFill" Color="{DynamicResource Primary500}"/>
            <SolidColorBrush x:Key="IdealForegroundColorBrush" Color="{DynamicResource Primary500Foreground}"/>
            <SolidColorBrush x:Key="IdealForegroundDisabledBrush" Color="{DynamicResource Primary500}" Opacity="0.4"/>
            <SolidColorBrush x:Key="MahApps.Metro.Brushes.ToggleSwitchButton.OnSwitchBrush.Win10" Color="{DynamicResource Primary500}" />
            <SolidColorBrush x:Key="MahApps.Metro.Brushes.ToggleSwitchButton.OnSwitchMouseOverBrush.Win10" Color="{DynamicResource Primary400}" />
            <SolidColorBrush x:Key="MahApps.Metro.Brushes.ToggleSwitchButton.ThumbIndicatorCheckedBrush.Win10" Color="{DynamicResource Primary500Foreground}" />

            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                               Btn Brushes                                              -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
            <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
            <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
            <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#252525"/>
            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#555555"/>
            <SolidColorBrush x:Key="Button.MouseOver.Border2" Color="#FF3C7FB1"/>
            <SolidColorBrush x:Key="Button.Pressed.Border2" Color="#FFFF8868"/>

            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                          Common Tile Brushes                                           -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <LinearGradientBrush x:Key="GreenTileBrush" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0" Color="DarkGreen" />
                <GradientStop Offset="1" Color="Green" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="PurpleTileBrush" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0" Color="Indigo" />
                <GradientStop Offset="1" Color="#FF643EBF" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="BlueTileBrush" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0" Color="DodgerBlue" />
                <GradientStop Offset="1" Color="DeepSkyBlue" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="PlumTileBrush" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0" Color="DarkOrchid" />
                <GradientStop Offset="1" Color="MediumOrchid" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="DarkRedTileBrush" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0" Color="#FFBF1E4B" />
                <GradientStop Offset="1" Color="Crimson" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="TomatoTileBrush" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0" Color="#FFD34826" />
                <GradientStop Offset="1" Color="Tomato" />
            </LinearGradientBrush>

            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                          Common ETC Brushes                                           -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

            <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#CCC" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#CCC" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#EEE" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#EEE" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#FFF" Offset="0.0"/>
                        <GradientStop Color="#AAA" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#BBB" Offset="0.0"/>
                        <GradientStop Color="#EEE" Offset="0.1"/>
                        <GradientStop Color="#EEE" Offset="0.9"/>
                        <GradientStop Color="#FFF" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

            <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

            <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

            <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

            <!-- Border Brushes -->

            <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#CCC" Offset="0.0"/>
                        <GradientStop Color="#444" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#CCC" Offset="0.0"/>
                        <GradientStop Color="#444" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#777" Offset="0.0"/>
                        <GradientStop Color="#000" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                    <GradientStopCollection>
                        <GradientStop Color="#444" Offset="0.0"/>
                        <GradientStop Color="#888" Offset="1.0"/>
                    </GradientStopCollection>
                </GradientBrush.GradientStops>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

            <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

            <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

            <!-- Miscellaneous Brushes -->
            <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

            <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

            <!--#endregion-->

            <!--#region ==> Converter-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                     Miscellaneous Boolean Converter                                    -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <conv:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <conv:BoolToVisibilityConverter x:Key="BoolToOppositeVisibilityConverter" OppositeBooleanValue="True" />
            <conv:BoolToOppositeBoolConverter x:Key="BoolToOppositeBoolConverter" />
            <conv:BoolToBrushConverter x:Key="BoolToBrushConverter" />
            <conv:MaskingMultiConverterWithBoolVal x:Key="MaskingMultiConverterWithBoolVal"/>

            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                      Miscellaneous Brush Converter                                     -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <conv:BrushToColorConverter x:Key="BrushToColorConverter" />

            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                    Miscellaneous Visibility Converter                                  -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <conv:StringToVisibilityConverter x:Key="StringToVisibilityConverter" />
            <conv:StringToVisibilityConverter x:Key="StringToOppositeVisibilityConverter" OppositeStringValue="True" />
            <conv:MaskingVisiblilityMultiConverter x:Key="MaskingVisiblilityMultiConverter"/>

            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                     Miscellaneous Numeric Converter                                    -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <conv:DoubleToEmptyStringConverter x:Key="DoubleToEmptyStringConverter" />
            <conv:IntToEmptyStringConverter x:Key="IntToEmptyStringConverter" />
            <conv:IntToBrushConverter x:Key="IntToBrushConverter" />

            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                         Miscellaneous Converter                                        -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <conv:DateTimeToEmptyStringConverter x:Key="DateTimeToEmptyStringConverter" />
            <conv:EnumMatchToBooleanConverter x:Key="EnumConverter" />

            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                            ETC Converter                                               -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <conv:MaskingCheckMultiConverter x:Key="converter"/>
            <conv:LockingColorChangerUsingMasking x:Key="LockingColorChangerUsingMasking"/>

            <!--#endregion-->

            <!--#region ==> Style-->

            <!--#region ==> Common Label Style-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                           Common Label Style                                           -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <Style x:Key="TitleBorderLabel"  TargetType="{x:Type Label}" >
                <Setter Property="Foreground" Value="#d9d9d9"/>
                <Setter Property="BorderBrush" Value="#474343"/>
                <Setter Property="BorderThickness" Value="0.8"/>
                <!--<Setter Property="FontFamily" Value="맑은 고딕"/>-->
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
            </Style>

            <Style x:Key="ContentBorderLabel" TargetType="{x:Type Label}">
                <Setter Property="Foreground" Value="#d9d9d9"/>
                <Setter Property="BorderBrush" Value="#7f7f7f"/>
                <Setter Property="BorderThickness" Value="0.8"/>
                <!--<Setter Property="FontFamily" Value="맑은 고딕"/>-->
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>

            <Style x:Key="ContentLabel" TargetType="{x:Type Label}">
                <Setter Property="Foreground" Value="#d9d9d9"/>
                <Setter Property="FontSize" Value="12"/>
                <!--<Setter Property="FontFamily" Value="맑은 고딕"/>-->
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>

            <Style  x:Key="InputTextBlock" TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="White"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>

            <Style x:Key="InputTextBox" TargetType="{x:Type TextBox}">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="White"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>

            <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
                <Setter Property="Margin" Value="10" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="VerticalContentAlignment" Value="Bottom" />
                <Setter Property="Padding" Value="15,5" />
            </Style>

            <!--<Style x:Key="TSKLabelStyle" TargetType="{x:Type Label}">
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="BorderBrush" Value="#FF3C3C3C"/>
                <Setter Property="BorderThickness" Value="2,2,1,1"/>
                <Setter Property="Margin" Value="1"/>
                <Setter Property="Padding" Value="0"/>
            </Style>-->

            <!--#endregion-->

            <!--#region ==> Common Button Style-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                          Common Button Style                                           -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <Style TargetType="{x:Type cui:Button}">
                <Setter Property="IsPrivilegeEnabled">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource converter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                            <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cui:Button}">
                            <Grid>
                                <Rectangle x:Name="BtnBackground" Opacity="1" RadiusX="9" RadiusY="9"
                                   Fill="{TemplateBinding Background}" StrokeThickness="0.35">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF777777" Offset="0" />
                                            <GradientStop Color="#FF777777" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="BtnShine" Margin="2,2,2,0" VerticalAlignment="Top" RadiusX="8" RadiusY="8" Opacity="1" Stroke="Transparent" MinHeight="36">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF9fa3ac" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Viewbox x:Name="vb_lockimg" Width="20" Height="20" VerticalAlignment="Bottom" HorizontalAlignment="Right" >
                                    <Canvas Width="24" Height="24">
                                        <Canvas.Effect>
                                            <DropShadowEffect Color="Green" Direction="90" Opacity="1" BlurRadius="2" ShadowDepth ="3"></DropShadowEffect>
                                        </Canvas.Effect>
                                        <Path Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" 
                                              >
                                            <Path.Fill>
                                                <MultiBinding Converter="{StaticResource LockingColorChangerUsingMasking}">
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type cui:Button}}" 
                                                             Mode="OneWay"
                                                             Path="MaskingLevel"/>
                                                    <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                                                </MultiBinding>
                                            </Path.Fill>
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF77778a"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="BtnBackground">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="White" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="Button.IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="BtnBackground" Value="#FF222222"/>
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="Button.IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <Style TargetType="{x:Type cui:Button}" x:Key="NormalTypeCUIButtonStyle">
                <Setter Property="IsPrivilegeEnabled">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource converter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                            <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cui:Button}">
                            <Grid>
                                <Border Name="ButtonBorderStyle" Background="#333333"
                                >
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="2"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Label Name="ButtonLabelStyle"
                                   Content="{TemplateBinding Content}"
                                   VerticalAlignment="Stretch"
                                   VerticalContentAlignment="Center"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Center"
                                   FontSize="14"
                                    Margin="-10"
                                   Foreground="White"/>
                                <Viewbox x:Name="vb_lockimg" Width="20" Height="20" VerticalAlignment="Bottom" HorizontalAlignment="Right" >
                                    <Canvas Width="24" Height="24">
                                        <Canvas.Effect>
                                            <DropShadowEffect Color="Green" Direction="90" Opacity="1" BlurRadius="2" ShadowDepth ="3"></DropShadowEffect>
                                        </Canvas.Effect>
                                        <Path Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" 
                                              >
                                            <Path.Fill>
                                                <MultiBinding Converter="{StaticResource LockingColorChangerUsingMasking}">
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type cui:Button}}" 
                                                             Mode="OneWay"
                                                             Path="MaskingLevel"/>
                                                    <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                                                </MultiBinding>
                                            </Path.Fill>
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border}"/>
                                    <Setter Property="Margin" TargetName="ButtonBorderStyle" Value="2"/>
                                </Trigger>
                                <Trigger Property="Button.IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="Foreground" TargetName="ButtonLabelStyle" Value="{StaticResource Button.Disabled.Foreground}"/>
                                    <Setter Property="BitmapEffect" TargetName="ButtonBorderStyle" Value="{x:Null}"/>
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="Button.IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <Style TargetType="{x:Type cui:Button}" x:Key="ActionTypeCUIButtonStyle">
                <Setter Property="IsPrivilegeEnabled">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource converter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                            <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cui:Button}">
                            <Grid>
                                <Border Name="ButtonBorderStyle" Background="#333333"
                                >
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="2"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Label Name="ButtonLabelStyle"
                                   Content="{TemplateBinding Content}"
                                   VerticalAlignment="Stretch"
                                   VerticalContentAlignment="Center"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Center"
                                   FontSize="14"
                                    Margin="-10"
                                   Foreground="White"/>
                                <Viewbox x:Name="vb_lockimg" Width="20" Height="20" VerticalAlignment="Bottom" HorizontalAlignment="Right" >
                                    <Canvas Width="24" Height="24">
                                        <Canvas.Effect>
                                            <DropShadowEffect Color="Green" Direction="90" Opacity="1" BlurRadius="2" ShadowDepth ="3"></DropShadowEffect>
                                        </Canvas.Effect>
                                        <Path Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" 
                                              >
                                            <Path.Fill>
                                                <MultiBinding Converter="{StaticResource LockingColorChangerUsingMasking}">
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type cui:Button}}" 
                                                             Mode="OneWay"
                                                             Path="MaskingLevel"/>
                                                    <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                                                </MultiBinding>
                                            </Path.Fill>
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border}"/>
                                    <Setter Property="Margin" TargetName="ButtonBorderStyle" Value="2"/>
                                </Trigger>
                                <Trigger Property="Button.IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="Foreground" TargetName="ButtonLabelStyle" Value="{StaticResource Button.Disabled.Foreground}"/>
                                    <Setter Property="BitmapEffect" TargetName="ButtonBorderStyle" Value="{x:Null}"/>
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="Button.IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <Style TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Rectangle x:Name="BtnBackground" Opacity="1" RadiusX="9" RadiusY="9"
                                   Fill="{TemplateBinding Background}" StrokeThickness="0.35">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF777777" Offset="0" />
                                            <GradientStop Color="#FF777777" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="BtnShine" Margin="2,2,2,0" VerticalAlignment="Top" RadiusX="8" RadiusY="8" Opacity="1" Stroke="Transparent" Height="20">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF9fa3ac" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Viewbox x:Name="vb_lockimg" Width="20" Height="20" VerticalAlignment="Bottom" HorizontalAlignment="Right" >
                                    <Canvas Width="24" Height="24">
                                        <Canvas.Effect>
                                            <DropShadowEffect Color="Green" Direction="90" Opacity="1" BlurRadius="2" ShadowDepth ="3"></DropShadowEffect>
                                        </Canvas.Effect>
                                        <Path Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" 
                                             Fill="#FEBE38">
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF77778a"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="BtnBackground">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="White" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="BtnBackground" Value="#FF222222"/>
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <Style x:Key="DisableLockBtnStyle" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Rectangle x:Name="BtnBackground" Opacity="1" RadiusX="9" RadiusY="9"
                                   Fill="{TemplateBinding Background}" StrokeThickness="0.35">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF777777" Offset="0" />
                                            <GradientStop Color="#FF777777" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="BtnShine" Margin="2,2,2,0" VerticalAlignment="Top" RadiusX="8" RadiusY="8" Opacity="1" Stroke="Transparent" Height="20">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF9fa3ac" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF77778a"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="BtnBackground">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="White" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="BtnBackground" Value="#FF222222"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <Style x:Key="DarkActionBtnSytle" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Rectangle x:Name="BtnBackground" Opacity="1" RadiusX="9" RadiusY="9"
                                   Fill="{TemplateBinding Background}" StrokeThickness="0.35">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF777777" Offset="0" />
                                            <GradientStop Color="#FF777777" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="BtnShine" Margin="2,2,2,0" VerticalAlignment="Top" RadiusX="8" RadiusY="8" Opacity="1" Stroke="Transparent" Height="20">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF9fa3ac" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#423f3f"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="BtnBackground">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="White" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="BtnBackground" Value="#1c1a1a"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#302e2e"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <Style x:Key="ControlButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border Name="ButtonBorderStyle" Background="#333333"
                                >
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="2"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Label Name="ButtonLabelStyle"
                                   Content="{TemplateBinding Content}"
                                   VerticalAlignment="Stretch"
                                   VerticalContentAlignment="Center"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Center"
                                   FontSize="14"
                                    Margin="-10"
                                   Foreground="White"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border}"/>
                                    <Setter Property="Margin" TargetName="ButtonBorderStyle" Value="2"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="Foreground" TargetName="ButtonLabelStyle" Value="{StaticResource Button.Disabled.Foreground}"/>
                                    <Setter Property="BitmapEffect" TargetName="ButtonBorderStyle" Value="{x:Null}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ControlButton2Style" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border Name="ButtonBorderStyle" Background="#333333"
                                >
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="2"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Label Name="ButtonLabelStyle"
                                   Content="{TemplateBinding Content}"
                                   VerticalAlignment="Stretch"
                                   VerticalContentAlignment="Center"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Center"
                                   FontSize="14"
                                    Margin="-10"
                                   Foreground="White"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.MouseOver.Border2}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border2}"/>
                                    <Setter Property="Margin" TargetName="ButtonBorderStyle" Value="2"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border2}"/>
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border2}"/>
                                    <Setter Property="Foreground" TargetName="ButtonLabelStyle" Value="{StaticResource Button.Pressed.Border2}"/>
                                    <Setter Property="BitmapEffect" TargetName="ButtonBorderStyle" Value="{x:Null}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TSKButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="BorderBrush" Value="#FFC0C0C0"/>
                <Setter Property="BorderThickness" Value="2,2,1,1"/>
                <Setter Property="Margin" Value="1"/>
                <Setter Property="Padding" Value="0"/>
            </Style>

            <Style x:Key="TSKButtonStyle_Black" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border CornerRadius="8" BorderBrush="#FF5c5c5c" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="#FF5E5E3F" Offset="0"/>
                                        <GradientStop Color="#FF404040" Offset="0.49"/>
                                        <GradientStop Color="#FF404040" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BitmapEffect">
                            <Setter.Value>
                                <DropShadowBitmapEffect Color="Black" ShadowDepth="7" Softness="0.8" Opacity="0.6"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TSKButtonStyle_Red" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border CornerRadius="8" BorderBrush="#FF5c5c5c" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="#FFedb2c3" Offset="0"/>
                                        <GradientStop Color="#FFd45d48" Offset="0.15"/>
                                        <GradientStop Color="#FFde003f" Offset="0.69"/>
                                        <GradientStop Color="#FFde003f" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BitmapEffect">
                            <Setter.Value>
                                <DropShadowBitmapEffect Color="Black" ShadowDepth="7" Softness="0.8" Opacity="0.6"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TSKButtonStyle_Blue" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border CornerRadius="8" BorderBrush="#FF5c5c5c" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="#FFa8ccf0" Offset="0"/>
                                        <GradientStop Color="#FF80a0bf" Offset="0.15"/>
                                        <GradientStop Color="#FF3b6bc4" Offset="0.3"/>
                                        <GradientStop Color="#FF005cb8" Offset="0.45"/>
                                        <GradientStop Color="#FF284fbd" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BitmapEffect">
                            <Setter.Value>
                                <DropShadowBitmapEffect Color="Black" ShadowDepth="7" Softness="0.8" Opacity="0.6"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TSKButtonStyle_Gray" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border CornerRadius="8" BorderBrush="#FF5c5c5c" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="#FFdfebd8" Offset="0"/>
                                        <GradientStop Color="#FFc1dbc1" Offset="0.15"/>
                                        <GradientStop Color="#FF949292" Offset="0.30"/>
                                        <GradientStop Color="#FF949292" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BitmapEffect">
                            <Setter.Value>
                                <DropShadowBitmapEffect Color="Black" ShadowDepth="7" Softness="0.8" Opacity="0.6"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TSKButtonStyle_Green" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border CornerRadius="8" BorderBrush="#FF5c5c5c" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="#FFa0de81" Offset="0"/>
                                        <GradientStop Color="#FF14de14" Offset="0.3"/>
                                        <GradientStop Color="#FF14de14" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BitmapEffect">
                            <Setter.Value>
                                <DropShadowBitmapEffect Color="Black" ShadowDepth="7" Softness="0.8" Opacity="0.6"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TSKButtonStyle_SkyBlue" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border CornerRadius="8" BorderBrush="#FF5c5c5c" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="#FFa8ccf0" Offset="0"/>
                                        <GradientStop Color="#FFa8ccf0" Offset="0.15"/>
                                        <GradientStop Color="#FFa8ccf0" Offset="0.69"/>
                                        <GradientStop Color="#FFa8ccf0" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BitmapEffect">
                            <Setter.Value>
                                <DropShadowBitmapEffect Color="Black" ShadowDepth="7" Softness="0.8" Opacity="0.6"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TSKButtonStyle_Pink" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Name="button_border" CornerRadius="8" BorderBrush="#FF5c5c5c" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="#FFd989b1" Offset="0.15"/>
                                        <GradientStop Color="#FFdb5eb2" Offset="0.5"/>
                                        <GradientStop Color="#FFdb5eb2" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BitmapEffect">
                            <Setter.Value>
                                <DropShadowBitmapEffect Color="Black" ShadowDepth="7" Softness="0.8" Opacity="0.6"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TSKButtonStyle_Yellow" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Name="button_border" CornerRadius="8" BorderBrush="#FF5c5c5c" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="#FFe3e548" Offset="0.15"/>
                                        <GradientStop Color="#FFe3e548" Offset="0.5"/>
                                        <GradientStop Color="#FFe3e548" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BitmapEffect">
                            <Setter.Value>
                                <DropShadowBitmapEffect Color="Black" ShadowDepth="7" Softness="0.8" Opacity="0.6"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TSKButtonStyle_NONE" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Name="button_border" CornerRadius="8" BorderBrush="#FF5c5c5c" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="White" Offset="0.15"/>
                                        <GradientStop Color="White" Offset="0.5"/>
                                        <GradientStop Color="White" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BitmapEffect">
                            <Setter.Value>
                                <DropShadowBitmapEffect Color="Black" ShadowDepth="7" Softness="0.8" Opacity="0.6"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="PieButtonQ" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <ed:Arc Name="PieBtnBase" ArcThickness="10" ArcThicknessUnit="Percent" EndAngle="90" Stretch="None" Stroke="Gray" StartAngle="0">
                                    <ed:Arc.Fill>
                                        <RadialGradientBrush RadiusX="1" RadiusY="1" GradientOrigin="0,1" Center="0,1">
                                            <GradientStop Color="#FF8d95a3" Offset="0"/>
                                            <GradientStop Color="#FF3c4047" Offset="0.3"/>
                                            <GradientStop Color="#FF181a1c" Offset="0.6"/>
                                            <GradientStop Color="Black" Offset="1"/>
                                        </RadialGradientBrush>
                                    </ed:Arc.Fill>
                                </ed:Arc>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsFocused" Value="True"/>
                                <Trigger Property="IsDefaulted" Value="True"/>
                                <Trigger Property="IsMouseOver" Value="True"/>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="PieBtnBase">
                                        <Setter.Value>
                                            <RadialGradientBrush RadiusX="1" RadiusY="1" GradientOrigin="0,1" Center="0,1">
                                                <GradientStop Color="#FFddf2f8" Offset="0"/>
                                                <GradientStop Color="#FF808894" Offset="0.3"/>
                                                <GradientStop Color="#FF646973" Offset="0.6"/>
                                                <GradientStop Color="Black" Offset="1"/>
                                            </RadialGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False"/>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CicleButton" TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Rectangle x:Name="BtnBackground" Opacity="1" RadiusX="9" RadiusY="9"
                                   Fill="{TemplateBinding Background}" StrokeThickness="0.35">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="Transparent" Offset="0" />
                                            <GradientStop Color="Transparent" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <!--<Rectangle x:Name="BtnShine" Margin="2,2,2,0" VerticalAlignment="Top" RadiusX="8" RadiusY="8" Opacity="1" Stroke="Transparent" Height="20">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF9fa3ac" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>-->
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF77778a"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="BtnBackground">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="DimGray" Offset="0"/>
                                                <GradientStop Color="Transparent" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="BtnBackground" Value="LightGray"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <Style x:Key="ImageIConBtnStyle" TargetType="{x:Type Button}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Name="border" BorderThickness="0" BorderBrush="Black" Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value="0.8" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="UpButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid Opacity="0.5">
                                <Border Name="UpButtonBorderStyle" Background="#333333">
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="10"
                                    Softness="0.5"
                                    />
                                    </Border.BitmapEffect>
                                </Border>
                                <Viewbox Margin="8">
                                    <Path Data="M1,21H23L12,2" Fill="White" Name="TryAngleIcon"/>
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="UpButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true"/>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="TryAngleIcon" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="UpButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="UpButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DwButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid Opacity="0.5">
                                <Border Name="DwButtonBorderStyle" Background="#333333">
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="10"
                                    Softness="0.5"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Viewbox Margin="8">
                                    <Path Data="M1,2H23L12,21"
                                          Fill="White" Name="TryAngleIcon"
                                          />
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="DwButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true"/>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="TryAngleIcon" Value="{StaticResource Button.Pressed.Border}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="DwButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="DwButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--#endregion-->

            <!--#region ==> Common ToggleButton Style-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                        Common ToggleButton Style                                       -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <Style x:Key="ON_OFF_ToggleBtn" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <ControlTemplate.Resources>
                                <SineEase x:Key="RippleEasingFunction" EasingMode="EaseInOut"/>
                                <Storyboard x:Key="ShowRipple">
                                    <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             To="0.26" Duration="0"/>
                                    <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             From="1" To="2.5" Duration="0:0:0.2"/>
                                    <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             From="1" To="2.5" Duration="0:0:0.2"/>
                                </Storyboard>
                                <Storyboard x:Key="HideRipple">
                                    <DoubleAnimation Storyboard.TargetName="RippleThumb" Storyboard.TargetProperty="Opacity"
                                             EasingFunction="{StaticResource RippleEasingFunction}"
                                             To="0.26" Duration="0:0:0.3"/>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Viewbox Width="65" Margin="0,5,0,5">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition From="*" To="Checked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="-10"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="50">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                            <VisualTransition From="Checked" To="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder">
                                                        <EasingDoubleKeyFrame KeyTime="0" Value="50"/>
                                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-10">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseOut"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"
                                                         Duration="0" To="50" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ThumbHolder"
                                                         Duration="0" To="-10" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid>
                                    <Rectangle x:Name="Track"
                                                    HorizontalAlignment="Left" Height="25"
                                                    Stroke="{x:Null}" 
                                                   VerticalAlignment="Top" Width="65" 
                                                   RadiusY="7.5" RadiusX="7.5"
                                                   Opacity="0.56"/>
                                    <TextBlock  x:Name="TrackText"
                                                    VerticalAlignment="Center"
                                                    Foreground="Black"
                                                    FontSize="18"/>

                                    <Grid x:Name="ThumbHolder"
                                  HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Ellipse x:Name="RippleThumb"
                                         Fill="{DynamicResource PrimaryHueLightBrush}"
                                         Height="15" Width="15"
                                         IsHitTestVisible="False"
                                         Opacity="0.26"
                                         Margin="0"
                                         HorizontalAlignment="Center" VerticalAlignment="Center"
                                         RenderTransformOrigin="0.5,0.5">
                                            <Ellipse.RenderTransform>
                                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            </Ellipse.RenderTransform>
                                        </Ellipse>
                                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(local:ShadowAssist.CacheMode)}">
                                            <Ellipse x:Name="Thumb"
                                             Fill="#FFFAFAFA" Stroke="Gray" 
                                             HorizontalAlignment="Center" VerticalAlignment="Center"
                                             Width="25" Height="25"
                                             Margin="0,0,0,0"
                                             RenderTransformOrigin="0.5,0.5"
                                             Effect="{DynamicResource MaterialDesignShadowDepth1}">
                                            </Ellipse>
                                        </AdornerDecorator>
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                                  Margin="{TemplateBinding Padding}"
                                                  x:Name="ContentPresenter"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                  FlowDirection="LeftToRight"/>
                                        <Grid.RenderTransform>
                                            <TranslateTransform X="0" Y="0"/>
                                        </Grid.RenderTransform>
                                    </Grid>
                                </Grid>
                            </Viewbox>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <!--<Setter TargetName="Thumb" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />-->
                                    <Setter TargetName="Track" Property="Fill" Value="White" />
                                    <Setter TargetName="Track" Property="Opacity" Value="0.80" />
                                    <Setter TargetName="TrackText" Property="Text" Value="On" />
                                    <Setter TargetName="TrackText" Property="HorizontalAlignment" Value="Left" />
                                    <Setter TargetName="TrackText" Property="Margin" Value="10 0 0 0" />
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsChecked" Value="True" />
                                        <Condition Property="local:ToggleButtonAssist.HasOnContent" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:ToggleButtonAssist.OnContent)}" />
                                    <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:ToggleButtonAssist.OnContentTemplate)}" />
                                </MultiTrigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                    <Setter TargetName="Track" Property="Fill" Value="{DynamicResource PrimaryHueLightBrush}" />
                                    <Setter TargetName="Track" Property="Opacity" Value="0.50" />
                                    <Setter TargetName="TrackText" Property="Text" Value="Off" />
                                    <Setter TargetName="TrackText" Property="HorizontalAlignment" Value="Right" />
                                    <Setter TargetName="TrackText" Property="Margin" Value="0 0 10 0" />
                                    <!-- Need to set Foreground to Background here instead of hardcoded PrimaryHueMidBrush -->
                                </Trigger>
                                <Trigger Property="Button.IsDefaulted" Value="true"/>
                                <Trigger Property="IsMouseOver" Value="true"/>
                                <Trigger Property="IsPressed" Value="true">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource ShowRipple}"/>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource HideRipple}"/>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="Thumb" Property="Fill" Value="#BDBDBD" />
                                    <Setter TargetName="Track" Property="Fill">
                                        <Setter.Value>
                                            <SolidColorBrush Color="White" Opacity=".12" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#endregion-->

            <!--#region ==> Common RepeatButton Style-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                        Common RepeatButton Style                                       -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <Style TargetType="{x:Type cui:RepeatButton}">
                <Setter Property="IsEnabled">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource converter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                            <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cui:RepeatButton}">
                            <Grid>
                                <Rectangle x:Name="BtnBackground" Opacity="1" RadiusX="9" RadiusY="9"
                                   Fill="{TemplateBinding Background}" StrokeThickness="0.35">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF777777" Offset="0" />
                                            <GradientStop Color="#FF777777" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="BtnShine" Margin="2,2,2,0" VerticalAlignment="Top" RadiusX="8" RadiusY="8" Opacity="1" Stroke="Transparent" Height="20">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF9fa3ac" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Viewbox x:Name="vb_lockimg" Width="20" Height="20" VerticalAlignment="Bottom" HorizontalAlignment="Right" >
                                    <Canvas Width="24" Height="24">
                                        <Canvas.Effect>
                                            <DropShadowEffect Color="Green" Direction="90" Opacity="1" BlurRadius="2" ShadowDepth ="3"></DropShadowEffect>
                                        </Canvas.Effect>
                                        <Path Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" 
                                              >
                                            <Path.Fill>
                                                <MultiBinding Converter="{StaticResource LockingColorChangerUsingMasking}">
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type cui:Button}}" 
                                                             Mode="OneWay"
                                                             Path="MaskingLevel"/>
                                                    <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                                                </MultiBinding>
                                            </Path.Fill>
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF77778a"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="BtnBackground">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="White" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="BtnBackground" Value="#FF222222"/>
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
            </Style>

            <Style x:Key="CUIControlRepeatBtnStyle"  TargetType="{x:Type cui:RepeatButton}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>

                <Setter Property="IsEnabled">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource converter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                            <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cui:RepeatButton}">
                            <Grid>
                                <Border Name="ButtonBorderStyle" Background="#333333">
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="2"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Label Name="ButtonLabelStyle"
                                   Content="{TemplateBinding Content}"
                                   VerticalAlignment="Stretch"
                                   VerticalContentAlignment="Center"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Center"
                                   FontSize="14"
                                    Margin="-10"
                                   Foreground="White"/>
                                <Viewbox x:Name="vb_lockimg" Width="20" Height="20" VerticalAlignment="Bottom" HorizontalAlignment="Right" >
                                    <Canvas Width="24" Height="24">
                                        <Canvas.Effect>
                                            <DropShadowEffect Color="Green" Direction="90" Opacity="1" BlurRadius="2" ShadowDepth ="3"></DropShadowEffect>
                                        </Canvas.Effect>
                                        <Path Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" 
                                              >
                                            <Path.Fill>
                                                <MultiBinding Converter="{StaticResource LockingColorChangerUsingMasking}">
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type cui:Button}}" 
                                                             Mode="OneWay"
                                                             Path="MaskingLevel"/>
                                                    <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                                                </MultiBinding>
                                            </Path.Fill>
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border}"/>
                                    <Setter Property="Margin" TargetName="ButtonBorderStyle" Value="2"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="Foreground" TargetName="ButtonLabelStyle" Value="{StaticResource Button.Disabled.Foreground}"/>
                                    <Setter Property="BitmapEffect" TargetName="ButtonBorderStyle" Value="{x:Null}"/>
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ControlRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Border Name="ButtonBorderStyle" Background="#333333"
                                >
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="2"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Label Name="ButtonLabelStyle"
                                   Content="{TemplateBinding Content}"
                                   VerticalAlignment="Stretch"
                                   VerticalContentAlignment="Center"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Center"
                                   FontSize="14"
                                    Margin="-10"
                                   Foreground="White"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <!--<Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>-->
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border}"/>
                                    <Setter Property="Margin" TargetName="ButtonBorderStyle" Value="2"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="Foreground" TargetName="ButtonLabelStyle" Value="{StaticResource Button.Disabled.Foreground}"/>
                                    <Setter Property="BitmapEffect" TargetName="ButtonBorderStyle" Value="{x:Null}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <Style x:Key="RepeatBtnStyle"  TargetType="{x:Type RepeatButton}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Border Name="ButtonBorderStyle" Background="#333333">
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="2"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Label Name="ButtonLabelStyle"
                                   Content="{TemplateBinding Content}"
                                   VerticalAlignment="Stretch"
                                   VerticalContentAlignment="Center"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Center"
                                   FontSize="14"
                                    Margin="-10"
                                   Foreground="White"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border}"/>
                                    <Setter Property="Margin" TargetName="ButtonBorderStyle" Value="2"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="Foreground" TargetName="ButtonLabelStyle" Value="{StaticResource Button.Disabled.Foreground}"/>
                                    <Setter Property="BitmapEffect" TargetName="ButtonBorderStyle" Value="{x:Null}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type RepeatButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Rectangle x:Name="BtnBackground" Opacity="1" RadiusX="9" RadiusY="9"
                                   Fill="{TemplateBinding Background}" StrokeThickness="0.35">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF777777" Offset="0" />
                                            <GradientStop Color="#FF777777" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="BtnShine" Margin="2,2,2,0" VerticalAlignment="Top" RadiusX="8" RadiusY="8" Opacity="1" Stroke="Transparent" Height="20">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF9fa3ac" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Viewbox x:Name="vb_lockimg" Width="20" Height="20" VerticalAlignment="Bottom" HorizontalAlignment="Right" >
                                    <Canvas Width="24" Height="24">
                                        <Canvas.Effect>
                                            <DropShadowEffect Color="Green" Direction="90" Opacity="1" BlurRadius="2" ShadowDepth ="3"></DropShadowEffect>
                                        </Canvas.Effect>
                                        <Path Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" 
                                             Fill="#FEBE38">
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF77778a"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="BtnBackground">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="White" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="BtnBackground" Value="#FF222222"/>
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
            </Style>

            <Style x:Key="DisableLockRepeatBtnStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Rectangle x:Name="BtnBackground" Opacity="1" RadiusX="9" RadiusY="9"
                                   Fill="{TemplateBinding Background}" StrokeThickness="0.35">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF777777" Offset="0" />
                                            <GradientStop Color="#FF777777" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <Rectangle x:Name="BtnShine" Margin="2,2,2,0" VerticalAlignment="Top" RadiusX="8" RadiusY="8" Opacity="1" Stroke="Transparent" Height="20">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF9fa3ac" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>

                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF77778a"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Fill" TargetName="BtnBackground">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="White" Offset="0"/>
                                                <GradientStop Color="White" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="BtnBackground" Value="#FF222222"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
            </Style>

            <Style x:Key="ControlRepeatBtnStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Border Name="ButtonBorderStyle" Background="#333333"
                                >
                                    <Border.BitmapEffect>
                                        <DropShadowBitmapEffect x:Name="btnImageEffect"
                                    Color="LightGray" 
                                    ShadowDepth="2"
                                    Softness="0"/>
                                    </Border.BitmapEffect>
                                </Border>
                                <Label Name="ButtonLabelStyle"
                                   Content="{TemplateBinding Content}"
                                   VerticalAlignment="Stretch"
                                   VerticalContentAlignment="Center"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Center"
                                   FontSize="14"
                                    Margin="-10"
                                   Foreground="White"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Pressed.Border}"/>
                                    <Setter Property="Margin" TargetName="ButtonBorderStyle" Value="2"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="ButtonBorderStyle" Value="{StaticResource Button.Disabled.Border}"/>
                                    <Setter Property="Foreground" TargetName="ButtonLabelStyle" Value="{StaticResource Button.Disabled.Foreground}"/>
                                    <Setter Property="BitmapEffect" TargetName="ButtonBorderStyle" Value="{x:Null}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#endregion-->

            <!--#region ==> Common CheckBox Style-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                          Common CheckBox Style                                         -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

            <Style TargetType="{x:Type cui:CheckBox}">
                <Setter Property="IsEnabled">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource converter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                            <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="FocusVisualStyle"    Value="{StaticResource CheckBoxFocusVisual}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cui:CheckBox}">
                            <Grid>
                                <BulletDecorator Background="Transparent">
                                    <BulletDecorator.Bullet>
                                        <Border x:Name="Border"  
                                        Width="13" 
                                        Height="13" 
                                        CornerRadius="0" 
                                        Background="{StaticResource NormalBrush}"
                                        BorderThickness="1"
                                        BorderBrush="{StaticResource NormalBorderBrush}">
                                            <Path 
                                            Width="7" Height="7" 
                                            x:Name="CheckMark"
                                            SnapsToDevicePixels="False" 
                                            Stroke="{StaticResource GlyphBrush}"
                                            StrokeThickness="2"
                                            Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                                        </Border>
                                    </BulletDecorator.Bullet>
                                    <ContentPresenter Margin="4,0,0,0"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Left"
                                    RecognizesAccessKey="True"/>
                                </BulletDecorator>

                                <Viewbox Name="cb_lockimg" Width="20" Height="20" VerticalAlignment="Bottom" HorizontalAlignment="Right" >
                                    <Canvas Width="24" Height="24">
                                        <Canvas.Effect>
                                            <DropShadowEffect Color="Green" Direction="90" Opacity="1" BlurRadius="2" ShadowDepth ="3"></DropShadowEffect>
                                        </Canvas.Effect>
                                        <Path Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" 
                                              >
                                            <Path.Fill>
                                                <MultiBinding Converter="{StaticResource LockingColorChangerUsingMasking}">
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type cui:CheckBox}}" 
                                                             Mode="OneWay" 
                                                             Path="MaskingLevel"/>
                                                    <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                                                </MultiBinding>
                                            </Path.Fill>
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="false">
                                    <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                                    <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                                    <Setter Property="Visibility" TargetName="cb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="cb_lockimg" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Value="Visible">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource MaskingVisiblilityMultiConverter}">
                                <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                                <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="CheckBox.Visibility" Value="Visible"/>
                    </DataTrigger>
                    <DataTrigger Value="Hidden">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource MaskingVisiblilityMultiConverter}">
                                <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                                <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="CheckBox.Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Value="Collapsed">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource MaskingVisiblilityMultiConverter}">
                                <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                                <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="CheckBox.Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>




            <!--<Style TargetType="{x:Type cui:CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
                <Setter Property="IsEnabled">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource converter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                            <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu>
                            <cuim:UserContextMenu/>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cui:CheckBox}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                --><!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content --><!--
                                <BulletDecorator  x:Name="test" Grid.Column="0">
                                    <BulletDecorator.Bullet>
                                        <Grid Width="13" Height="13">
                                            <Border x:Name="Border" 
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}" 
                                                BorderThickness="{TemplateBinding BorderThickness}"/>
                                            <Path x:Name="CheckMark" Stroke="{DynamicResource GlyphBrush}" 
                                                StrokeThickness="2" 
                                                SnapsToDevicePixels="False" 
                                                  Data="M 0 0 L 13 13 M 0 13 L 13 0"/>
                                        </Grid>
                                    </BulletDecorator.Bullet>
                                </BulletDecorator>
                                <ContentPresenter Grid.Column="1" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    Margin="{TemplateBinding Padding}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                    RecognizesAccessKey="True"/>

                          
                                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Visibility" TargetName="cb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="cb_lockimg" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="#FF777777"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Margin" Value="8"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>-->

            <!--#endregion-->

            <!--#region ==> Common TextBox Style-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                          Common TextBox Style                                          -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <Style x:Key="CommonTextBoxStyle" TargetType="TextBox">
                <Setter Property="MinHeight" Value="36" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Padding" Value="16,0"/>
                <!--<Setter Property="Background" Value="Transparent"/>-->
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="1"/>
                <!--<Setter Property="BorderBrush" Value="Gray"/>-->
                <Setter Property="IsReadOnly" Value="True"/>
            </Style>

            <Style x:Key="ErrorInfoTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="TextAlignment" Value="Center"/>
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate>
                            <DockPanel LastChildFill="true">
                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom" Margin="5,0,0,0">
                                    <Border Background="Red" DockPanel.Dock="Bottom" Margin="0,0,0,0" Width="20" Height="16" CornerRadius="10">
                                        <TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white">
                                        </TextBlock>
                                    </Border>
                                    <Border Background="Transparent" DockPanel.Dock="Bottom" Margin="3,0,0,0" Height="16" >
                                        <TextBlock Text="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)/ErrorContent}" 
                                                   VerticalAlignment="center" HorizontalAlignment="Left" FontWeight="Bold" Foreground="Red">
                                        </TextBlock>
                                    </Border>
                                </StackPanel>

                                <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
                                    <!--<Border BorderBrush="red" BorderThickness="1" />-->
                                </AdornedElementPlaceholder>
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="Padding" Value="0,0,0,0"/>
                <Setter Property="Margin" Value="4,4,4,16"/>
                <Setter Property="FontSize" Value="18" />
            </Style>

            <Style x:Key="TextBox.Rounded" TargetType="TextBox">
                <Setter Property="FontFamily" Value="Arial" />
                <Setter Property="FontSize" Value="24" />
                <Setter Property="MinHeight" Value="34" />
                <Setter Property="MaxHeight" Value="44" />
                <Setter Property="MinWidth" Value="160" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate
                    TargetType="{x:Type TextBox}"
                    x:Name="MainControlTemplate"
                    >
                            <Border
                        x:Name="Border"
                        Margin="5"
                        Padding="2"
                        CornerRadius="2"
                        BorderThickness="0"
                        BorderBrush="#FFCCCCCC"
                        Background="#FFDCDCDC"
                        SnapsToDevicePixels="True"
                        >
                                <Grid>
                                    <ScrollViewer 
                                x:Name="PART_ContentHost" 
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left"
                                Margin="0"
                                />
                                </Grid>
                                <Border.Effect>
                                    <DropShadowEffect
                                x:Name="BorderShadow"
                                RenderingBias="Performance"
                                ShadowDepth="0"
                                BlurRadius="10"
                                Color="#FFCCCCCC"
                                />
                                </Border.Effect>
                            </Border>
                            <ControlTemplate.Resources>
                                <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#FF999999" />
                                <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#FFCCCCCC" />
                            </ControlTemplate.Resources>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                                    <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                                </Trigger>
                                <EventTrigger RoutedEvent="TextBox.GotFocus">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation
                                            Storyboard.TargetName="BorderShadow"
                                            Storyboard.TargetProperty="Color"
                                            To="Red"
                                            Duration="0:0:0.2"
                                            />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="TextBox.LostFocus">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation
                                            Storyboard.TargetName="BorderShadow"
                                            Storyboard.TargetProperty="Color"
                                            To="#FFCCCCCC"
                                            Duration="0:0:0.2"
                                            />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#endregion-->

            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                          Common ComboBox Style                                         -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

            <ControlTemplate TargetType="ToggleButton" x:Key="NormalTypeCUIComboBoxToggleButtonTemplate">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="20"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle Name="Rectangle_combo" Grid.ColumnSpan="2" Fill="White" Margin="0,0,5,0" RadiusX="8" RadiusY="8" Opacity="1" Stroke="Transparent" MinHeight="36"/>
                    <Path Name="Arrow" Grid.Column="1" Margin="0,0,10,0" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" HorizontalAlignment="Center" Fill="White" VerticalAlignment="Center" />
                    <Line Grid.ColumnSpan="2" X1="30" Y1="35" X2="190" Y2="35" Stroke="White"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="ToggleButton.IsChecked" Value="True">
                        <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style TargetType="{x:Type cui:ComboBox}" x:Key="NormalTypeCUIComboBoxStyle">
                <Setter Property="IsPrivilegeEnabled">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource converter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                            <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cui:ComboBox}">
                            <Grid Background="White">
                                <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="False"
                                  IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                  Template="{StaticResource NormalTypeCUIComboBoxToggleButtonTemplate}"/>
                                <ContentPresenter Name="ContentSite" IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                      Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                      ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                                <TextBox Visibility="Hidden" Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True" />
                                <Viewbox x:Name="vb_lockimg" Width="20" Height="20" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="24,0,0,0" >
                                    <Canvas Width="24" Height="24">
                                        <Canvas.Effect>
                                            <DropShadowEffect Direction="90" Opacity="1" BlurRadius="2" ShadowDepth ="3"/>
                                        </Canvas.Effect>
                                        <Path Data="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" >
                                            <Path.Fill>
                                                <MultiBinding Converter="{StaticResource LockingColorChangerUsingMasking}">
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type cui:ComboBox}}" 
                                                 Mode="OneWay"
                                                 Path="MaskingLevel"/>
                                                    <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                                                </MultiBinding>
                                            </Path.Fill>
                                        </Path>
                                    </Canvas>
                                </Viewbox>
                                <Popup Name="Popup" Placement="Bottom" Focusable="False" AllowsTransparency="True" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" PopupAnimation="Slide">
                                    <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                        <Border Name="DropDownBorder" Background="White"  CornerRadius="0" BorderThickness="0"/>
                                        <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="ComboBox.IsEnabled" Value="False" >
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="ComboBox.IsEnabled" Value="True">
                                    <Setter Property="Visibility" TargetName="vb_lockimg" Value="Hidden"/>
                                </Trigger>
                                <Trigger Property="ItemsControl.HasItems" Value="False">
                                    <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="IsEditable" Value="False"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                <Setter Property="TextElement.Foreground" Value="Black"/>
                <Setter Property="IsDropDownOpen" Value="False"/>
                <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
            </Style>
            <!--#region ==> Common Dialog Style-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                           Common Dialog Style                                          -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <Style TargetType="{x:Type Dialogs:BaseMetroDialog}"
            x:Key="FullCustomDialogStyle"
            BasedOn="{StaticResource {x:Type Dialogs:BaseMetroDialog}}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Dialogs:BaseMetroDialog}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="DialogShownStoryboard">
                                    <DoubleAnimation AccelerationRatio=".9"
                                            BeginTime="0:0:0"
                                            Duration="0:0:0.2"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1" />
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid Background="{TemplateBinding Background}">
                                <Border FocusVisualStyle="{x:Null}"
                            Focusable="False">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid Grid.Row="0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="1*" />
                                                <ColumnDefinition Width="90*" />
                                                <ColumnDefinition Width="1*" />
                                            </Grid.ColumnDefinitions>
                                            <!--  Content area  -->
                                            <Grid Grid.Column="1"
                                        Margin="0 10 0 10">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="*" />
                                                </Grid.RowDefinitions>

                                                <ContentPresenter Grid.Row="1"
                                                        Content="{TemplateBinding Content}" />
                                            </Grid>
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard Storyboard="{StaticResource DialogShownStoryboard}" />
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Dialogs:BaseMetroDialog}"
            x:Key="FullScreenDialogStyle"
            BasedOn="{StaticResource {x:Type Dialogs:BaseMetroDialog}}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Dialogs:BaseMetroDialog}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="DialogShownStoryboard">
                                    <DoubleAnimation AccelerationRatio=".9"
                                            BeginTime="0:0:0"
                                            Duration="0:0:0.2"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1" />
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid Background="{TemplateBinding Background}">
                                <Border FocusVisualStyle="{x:Null}"
                            Focusable="False">
                                    <Grid Background="#FF202020">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="1024" />
                                        </Grid.RowDefinitions>
                                        <Grid Grid.Row="0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="1*" />
                                                <ColumnDefinition Width="90*" />
                                                <ColumnDefinition Width="1*" />
                                            </Grid.ColumnDefinitions>
                                            <!--  Content area  -->
                                            <Grid Grid.Column="1"
                                        Margin="0 10 0 10">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="*" />
                                                </Grid.RowDefinitions>

                                                <ContentPresenter Grid.Row="1"
                                                        Content="{TemplateBinding Content}" />
                                            </Grid>
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard Storyboard="{StaticResource DialogShownStoryboard}" />
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--#endregion-->

            <!--#region ==> Common ETC Style-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                           Common ETC Style                                             -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <Style x:Key="CommonRectangleStyle" TargetType="Rectangle">
                <Setter Property="Width" Value="10"/>
                <Setter Property="Height" Value="10"/>
                <Setter Property="Fill" Value="White"/>
            </Style>

            <Style x:Key="CommonBorderStyle" TargetType="Border">
                <!--<Setter Property="BorderBrush" Value="Silver"/>-->
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <!--<Style TargetType="{x:Type ucdutviewer:ucDUTviewer}">
                <Setter Property="IsEnabled">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource converter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="MaskingLevel"/>
                            <Binding Source="{x:Static account:AccountManager.CurrentUserInfo}" Path="UserLevel"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Style>-->

            <!--#endregion-->

            <!--#endregion-->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--                                             Dialog Style                                               -->
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
            <!--<Style TargetType="{x:Type Dialogs:MessageDialog}" BasedOn="{StaticResource {x:Type Dialogs:BaseMetroDialog}}">
                <Style.Resources>
                    <Style TargetType="{x:Type Grid}">
                        --><!--<Setter Property="Background" Value="Transparent"/>-->
                        <!--<Setter Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Color="White" Opacity="0.2"/>
                            </Setter.Value>
                        </Setter>--><!--
                        <Setter Property="Opacity" Value="0.9" />
                    </Style>
                </Style.Resources>
            </Style>-->
            
        </ResourceDictionary>
    </Application.Resources>
</Application>
